{"version":3,"file":"lib_index_js.fe9373a85dc4fd596cc7.js","mappings":";;;;;;;;;;;;;;;AAAoD;AACpD;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-nbgrader-tools/./lib/index.js"],"sourcesContent":["import { ILabShell } from '@jupyterlab/application';\nconst extension = {\n    id: 'jupyterlab-nbgrader-tools:plugin',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app) => {\n        console.log('JupyterLab extension jupyterlab-nbgrader-tools is activated!');\n        // Nbgrader graded cells highlight\n        // Idea: https://discourse.jupyter.org/t/jupyterlab-4-iterating-over-all-cells-in-a-notebook/20033\n        const labShell = app.shell;\n        labShell.currentChanged.connect(() => {\n            const notebook = app.shell.currentWidget;\n            if (notebook) {\n                notebook.revealed.then(() => {\n                    if (notebook.content.model) {\n                        // console.log('NOTEBOOK content: ', notebook.content)\n                        // console.log('NOTEBOOK widgets: ', notebook.content.widgets)\n                        const cellList = notebook.content.model.cells;\n                        const widgetList = notebook.content.widgets;\n                        for (let i = 0; i < cellList.length; i++) {\n                            // console.log('DATA: ', cellList.get(i))\n                            // console.log('TYPE: ', cellList.get(i).type)\n                            // console.log('METADATA: ', cellList.get(i).metadata)\n                            // console.log('widget: ', widgetList[i])\n                            if (cellList.get(i).type == 'code' && cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                                widgetList[i].node.classList.add('gradedquestioncode');\n                            }\n                            if (cellList.get(i).type == 'markdown' && cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                                widgetList[i].node.classList.add('gradedquestionmd');\n                            }\n                            if (cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                                widgetList[i].node.classList.add('gradedquestion');\n                            }\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\nexport default extension;\n"],"names":[],"sourceRoot":""}