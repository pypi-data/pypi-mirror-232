{"version":3,"file":"lib_index_js.0dd8f1a820a5983c7a9c.js","mappings":";;;;;;;;;;;;;;;AAKiC;AAIjC,MAAM,SAAS,GAAgC;IAC7C,EAAE,EAAE,kCAAkC;IACtC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,8DAAS,CAAC;IACrB,QAAQ,EAAE,CACR,GAAoB,EACpB,EAAE;QACF,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;QAE5E,kCAAkC;QAClC,uGAAuG;QACvG,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAiB,CAAC;QACvC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE;YACnC,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,aAAyC,CAAC;YACrE,IAAI,QAAQ,EAAE;gBACV,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC1B,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAC;wBACzB,sDAAsD;wBACtD,8DAA8D;wBAC9D,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;wBAC9C,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;wBAC5C,sCAAsC;wBACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACxC,yCAAyC;4BACzC,8CAA8C;4BAC9C,sDAAsD;4BACtD,yCAAyC;4BAEzC,iDAAiD;4BACjD,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM;gCAC9B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gCACvD,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;6BACxD;4BACD,qDAAqD;4BACrD,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,UAAU;gCAClC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gCACvD,8DAA8D;gCAC9D,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAC;oCACtD,SAAS;iCACV;gCACD,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;6BACtD;4BACD,gDAAgD;4BAChD,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gCACvD,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;6BACpD;yBACF;qBACF;gBACH,CAAC,CAAC,CAAC;aACN;QACH,CAAC,CAAC,CAAC;IAEL,CAAC;CACF,CAAC;AAEF,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-nbgrader-tools/./src/index.tsx"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILabShell,\n  LabShell\n} from '@jupyterlab/application';\n\nimport { NotebookPanel } from '@jupyterlab/notebook';\n\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-nbgrader-tools:plugin',\n  autoStart: true,\n  requires: [ILabShell],\n  activate: (\n    app: JupyterFrontEnd,\n  ) => {\n    console.log('JupyterLab extension jupyterlab-nbgrader-tools is activated!');\n\n    // Nbgrader graded cells highlight\n    // Idea from: https://discourse.jupyter.org/t/jupyterlab-4-iterating-over-all-cells-in-a-notebook/20033\n    const labShell = app.shell as LabShell;\n    labShell.currentChanged.connect(() => {\n      const notebook = app.shell.currentWidget as unknown as NotebookPanel;\n      if (notebook) {\n          notebook.revealed.then(() => {\n            if (notebook.content.model){\n              // console.log('NOTEBOOK content: ', notebook.content)\n              // console.log('NOTEBOOK widgets: ', notebook.content.widgets)\n              const cellList = notebook.content.model.cells;\n              const widgetList = notebook.content.widgets;\n              // Loop over all cells in the notebook\n              for (let i = 0; i < cellList.length; i++) {\n                // console.log('DATA: ', cellList.get(i))\n                // console.log('TYPE: ', cellList.get(i).type)\n                // console.log('METADATA: ', cellList.get(i).metadata)\n                // console.log('WIDGET: ', widgetList[i])\n\n                // Add class to code cells with nbgrader metadata\n                if (cellList.get(i).type == 'code' && \n                    cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                  widgetList[i].node.classList.add('gradedquestioncode');\n                }\n                // Add class to markdown cells with nbgrader metadata\n                if (cellList.get(i).type == 'markdown' && \n                    cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                  // Skip markdown cells with editable metadata (readonly cells)\n                  if (cellList.get(i).metadata.hasOwnProperty('editable')){\n                    continue;\n                  }\n                  widgetList[i].node.classList.add('gradedquestionmd');\n                }\n                // Add class to all cells with nbgrader metadata\n                if (cellList.get(i).metadata.hasOwnProperty('nbgrader')) {\n                  widgetList[i].node.classList.add('gradedquestion');\n                }\n              }\n            }\n          });\n      }\n    });\n\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}