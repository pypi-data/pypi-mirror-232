"use strict";(self.webpackChunktrame_jupyter_extension=self.webpackChunktrame_jupyter_extension||[]).push([[211],{211:(e,s,t)=>{t.r(s),t.d(s,{default:()=>c});class n{constructor(e){this.app=e,this.sessionToKernel={},this.kernels={},this.updateSessionMapping(),this.app.serviceManager.sessions.runningChanged.connect(this.updateSessionMapping,this)}updateSessionMapping(){const e=this.app.serviceManager.sessions.running();let s=null;do{s=e.next();const t=s.value;if(null==t?void 0:t.kernel){this.sessionToKernel[t.name]=t.kernel;const e=t.kernel.id;if(!this.kernels[e]){const s=this.app.serviceManager.kernels.connectTo({model:t.kernel,handleComms:!0});this.kernels[e]=s,s.requestExecute({silent:!0,code:'\n              import os\n              os.environ["TRAME_DISABLE_V3_WARNING"] = "1"\n              os.environ["TRAME_IFRAME_BUILDER"] = "jupyter-extension"\n              os.environ["TRAME_BACKEND"] = "jupyter"\n            '})}}}while(!s.done)}getActiveKernel(){const e=window.location.pathname.split("/").at(-1);return e?this.sessionToKernel[e]:null}getKernelConnection(e){return this.kernels[e]}dispose(){this.app.serviceManager.sessions.runningChanged.disconnect(this.updateSessionMapping,this)}}class i{constructor(){this._listeners={}}addEventListener(e,s){let t=this._listeners[e];t||(t=new Set,this._listeners[e]=t),t.add(s)}removeEventListener(e,s){const t=this._listeners[e];t&&t.delete(s)}emit(e,s){const t=this._listeners[e];t&&t.forEach((e=>{e(s)}))}removeListeners(e){const s=this._listeners[e];s&&s.clear()}}class o extends i{constructor(e){super(),this.kernel=e,this.comm=null}open(){this.comm&&!this.comm.isDisposed||(this.comm=this.kernel.createComm("wslink_comm"),this.comm.open(),this.comm.onMsg=this.onMessage.bind(this),this.comm.onClose=this.onClose.bind(this))}send(e){this.comm?this.comm.send(e.data,void 0,e.buffers):console.error("trame::jupyter-comm::send -- NO COMM")}onMessage(e){this.emit("message",{data:e.content.data,buffers:e.buffers})}onClose(e){console.error("trame::jupyter-comm::close -- NO COMM")}}const r=function(){let e=0;return function(){const s=e;return e+=1,s.toString()}}();class a extends i{constructor(e,s){super(),this.serverName="trame",this.clientId=r(),this.readyState=0;const t=new URLSearchParams(e.location.search);t.has("server")&&(this.serverName=t.get("server")||"trame"),this.window=e,this.comm=s,this.commListener=e=>{const{data:s,buffers:t}=e,{server:n,client:i,payload:o}=s;var r;if(i===this.clientId&&n===this.serverName)if(t&&t.length>0){const e=(null==(r=t[0])?void 0:r.buffer)?t[0].buffer:t[0];e.constructor=this.window.ArrayBuffer,e.__proto__=this.window.ArrayBuffer.prototype,this.emit("message",{data:e})}else this.emit("message",{data:o})},this.comm.addEventListener("message",this.commListener),this.window.addEventListener("unload",(()=>this.close())),setTimeout((()=>{this.readyState=1,this.emit("open",{data:""})}),0)}close(){this.comm.removeEventListener("message",this.commListener),console.log("trame::jupyter-comm::close","FIXME"),this.emit("close",{data:""})}send(e){const s="string"!=typeof e,t={data:{server:this.serverName,client:this.clientId},buffers:[]};s?t.buffers=[e]:t.data.payload=e,this.comm.send(t)}set onopen(e){this.removeListeners("open"),this.addEventListener("open",e)}set onmessage(e){this.removeListeners("message"),this.addEventListener("message",e)}set onclose(e){this.removeListeners("close"),this.addEventListener("close",e)}set onerror(e){this.removeListeners("error"),this.addEventListener("error",e)}}const c={id:"trame-jupyter-extension:plugin",description:"A JupyterLab extension for trame communication layer",autoStart:!0,activate:e=>{const s=new n(e),t={},i={app:e,activeManager:s,comms:t,init:function(e){const n=e.frameElement.dataset.kernelId;if(!t[n]){const e=s.getKernelConnection(n);if(!e)throw new Error(`trame: Could not get kernel connection to ${n}`);t[n]=new o(e),t[n].open()}if(t[n])return{createWebSocket:()=>new a(e,t[n])}}};window.trameJupyter=i}}}}]);