from .models import Unit
from django.utils.translation import gettext_lazy as _
from .enums import UnitType


def initialize_base_units(*, include_types: list[UnitType]):
    units = [
        Unit(
            name=_("Piece"),
            name_pluralized=_("Pieces"),
            abbreviation=_("pcs"),
            unit_type=UnitType.PIECES,
            base_factor="1.00",
            is_base_unit=True,
            is_default=True,
        ),
        Unit(
            name=_("Package"),
            name_pluralized=_("Packages"),
            abbreviation=_("pkg"),
            unit_type=UnitType.PIECES,
            base_factor="1.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Clove"),
            name_pluralized=_("Cloves"),
            abbreviation=_("clove"),
            unit_type=UnitType.PIECES,
            base_factor="0.10",
            is_base_unit=False,
        ),
        Unit(
            name=_("Tablet"),
            name_pluralized=_("Tablets"),
            abbreviation=_("tab"),
            unit_type=UnitType.PIECES,
            base_factor="1.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Par"),
            name_pluralized=None,
            abbreviation=_("par"),
            unit_type=UnitType.PIECES,
            base_factor="1.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Portion"),
            name_pluralized=None,
            abbreviation=_("Portions"),
            unit_type=UnitType.PIECES,
            base_factor="1.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Stem"),
            name_pluralized=_("Stems"),
            abbreviation=_("stem"),
            unit_type=UnitType.PIECES,
            base_factor="0.10",
            is_base_unit=False,
        ),
        # Weight
        Unit(
            name=_("Gram"),
            name_pluralized=None,
            abbreviation=_("g"),
            unit_type=UnitType.WEIGHT,
            base_factor="1.00",
            is_base_unit=True,
        ),
        Unit(
            name=_("Kilogram"),
            name_pluralized=None,
            abbreviation=_("kg"),
            unit_type=UnitType.WEIGHT,
            base_factor="1000.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Teaspoon"),
            name_pluralized=_("Teaspoons"),
            abbreviation=_("tsp"),
            unit_type=UnitType.WEIGHT,
            base_factor="5.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Tablespoon"),
            name_pluralized=_("Tablespoons"),
            abbreviation=_("tbsp"),
            unit_type=UnitType.WEIGHT,
            base_factor="15.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Pinch"),
            name_pluralized=_("Pinches"),
            abbreviation=_("pinch"),
            unit_type=UnitType.WEIGHT,
            base_factor="5.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Handful"),
            name_pluralized=_("Handfuls"),
            abbreviation=_("handful"),
            unit_type=UnitType.WEIGHT,
            base_factor="30.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Slice"),
            name_pluralized=_("Slices"),
            abbreviation=_("slice"),
            unit_type=UnitType.WEIGHT,
            base_factor="50.00",
            is_base_unit=False,
        ),
        # Volume
        Unit(
            name=_("Milliliter"),
            name_pluralized=None,
            abbreviation=_("ml"),
            unit_type=UnitType.VOLUME,
            base_factor="1.00",
            is_base_unit=True,
        ),
        Unit(
            name=_("Liter"),
            name_pluralized=None,
            abbreviation=_("l"),
            unit_type=UnitType.VOLUME,
            base_factor="1000.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Deciliter"),
            name_pluralized=None,
            abbreviation=_("dl"),
            unit_type=UnitType.VOLUME,
            base_factor="100.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Centiliter"),
            name_pluralized=None,
            abbreviation=_("cl"),
            unit_type=UnitType.VOLUME,
            base_factor="10.00",
            is_base_unit=False,
        ),
        # Length
        Unit(
            name=_("Millimeter"),
            name_pluralized=None,
            abbreviation=_("mm"),
            unit_type=UnitType.LENGTH,
            base_factor="1.00",
            is_base_unit=True,
        ),
        Unit(
            name=_("Centimeter"),
            name_pluralized=None,
            abbreviation=_("cm"),
            unit_type=UnitType.LENGTH,
            base_factor="10.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Decimeter"),
            name_pluralized=None,
            abbreviation=_("dm"),
            unit_type=UnitType.LENGTH,
            base_factor="100.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Meter"),
            name_pluralized=None,
            abbreviation=_("m"),
            unit_type=UnitType.LENGTH,
            base_factor="1000.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("100 meter"),
            name_pluralized=None,
            abbreviation=_("100 m"),
            unit_type=UnitType.LENGTH,
            base_factor="100000.00",
            is_base_unit=False,
        ),
        # Usage
        Unit(
            name=_("Usage"),
            name_pluralized=None,
            abbreviation=_("usage"),
            unit_type=UnitType.USAGE,
            base_factor="1.00",
            is_base_unit=True,
        ),
        Unit(
            name=_("Wash"),
            name_pluralized=None,
            abbreviation=_("wash"),
            unit_type=UnitType.USAGE,
            base_factor="1.00",
            is_base_unit=False,
        ),
        Unit(
            name=_("Treatment"),
            name_pluralized=_("Treatments"),
            abbreviation=_("treatment"),
            unit_type=UnitType.USAGE,
            base_factor="1.00",
            is_base_unit=False,
        ),
    ]
    units_to_create = [unit for unit in units if unit.unit_type in include_types]

    Unit.objects.bulk_create(units_to_create)
