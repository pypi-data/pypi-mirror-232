# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from smarts.service.proto import (
    bubble_pb2 as smarts_dot_service_dot_proto_dot_bubble__pb2,
)


class BubbleStub(object):
    """Interface exported by the bubble service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExamineBubbles = channel.unary_unary(
            "/smarts.service.Bubble/ExamineBubbles",
            request_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleRequest.SerializeToString,
            response_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleInfos.FromString,
        )
        self.GetObservations = channel.unary_unary(
            "/smarts.service.Bubble/GetObservations",
            request_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.ObservationRequest.SerializeToString,
            response_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.FromString,
        )
        self.ActOnBubbleAgents = channel.unary_unary(
            "/smarts.service.Bubble/ActOnBubbleAgents",
            request_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentActions.SerializeToString,
            response_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.FromString,
        )


class BubbleServicer(object):
    """Interface exported by the bubble service."""

    def ExamineBubbles(self, request, context):
        """Examine all current bubbles."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetObservations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ActOnBubbleAgents(self, request, context):
        """Act on existing agents in the bubble."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BubbleServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ExamineBubbles": grpc.unary_unary_rpc_method_handler(
            servicer.ExamineBubbles,
            request_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleRequest.FromString,
            response_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleInfos.SerializeToString,
        ),
        "GetObservations": grpc.unary_unary_rpc_method_handler(
            servicer.GetObservations,
            request_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.ObservationRequest.FromString,
            response_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.SerializeToString,
        ),
        "ActOnBubbleAgents": grpc.unary_unary_rpc_method_handler(
            servicer.ActOnBubbleAgents,
            request_deserializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentActions.FromString,
            response_serializer=smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "smarts.service.Bubble", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Bubble(object):
    """Interface exported by the bubble service."""

    @staticmethod
    def ExamineBubbles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/smarts.service.Bubble/ExamineBubbles",
            smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleRequest.SerializeToString,
            smarts_dot_service_dot_proto_dot_bubble__pb2.BubbleInfos.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetObservations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/smarts.service.Bubble/GetObservations",
            smarts_dot_service_dot_proto_dot_bubble__pb2.ObservationRequest.SerializeToString,
            smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ActOnBubbleAgents(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/smarts.service.Bubble/ActOnBubbleAgents",
            smarts_dot_service_dot_proto_dot_bubble__pb2.AgentActions.SerializeToString,
            smarts_dot_service_dot_proto_dot_bubble__pb2.AgentObservations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
