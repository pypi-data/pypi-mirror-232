import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, assign, binding_callbacks, bind, create_component, mount_component, transition_in, transition_out, destroy_component, space, insert_dev, get_spread_update, get_spread_object, add_flush_callback, detach_dev } from '../../../node/dev/svelte-internal.js';
import { N as Number } from './Number-fa726925.js';
import { B as Block } from './Button-71613b11.js';
import { S as Static } from './index-b455ce1a.js';
import './BlockTitle-153169b9.js';

/* home/runner/work/gradio/gradio/js/number/interactive/InteractiveNumber.svelte generated by Svelte v4.0.0 */

// (22:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={container}  allow_overflow={false}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let number;
	let updating_value;
	let updating_value_is_output;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[2].autoscroll },
		{ i18n: /*gradio*/ ctx[2].i18n },
		/*loading_status*/ ctx[14]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	function number_value_binding(value) {
		/*number_value_binding*/ ctx[16](value);
	}

	function number_value_is_output_binding(value) {
		/*number_value_is_output_binding*/ ctx[17](value);
	}

	let number_props = {
		label: /*label*/ ctx[3],
		info: /*info*/ ctx[4],
		show_label: /*show_label*/ ctx[11],
		minimum: /*minimum*/ ctx[12],
		maximum: /*maximum*/ ctx[13],
		step: /*step*/ ctx[15],
		container: /*container*/ ctx[8]
	};

	if (/*value*/ ctx[0] !== void 0) {
		number_props.value = /*value*/ ctx[0];
	}

	if (/*value_is_output*/ ctx[1] !== void 0) {
		number_props.value_is_output = /*value_is_output*/ ctx[1];
	}

	number = new Number({ props: number_props, $$inline: true });
	binding_callbacks.push(() => bind(number, 'value', number_value_binding));
	binding_callbacks.push(() => bind(number, 'value_is_output', number_value_is_output_binding));
	number.$on("change", /*change_handler*/ ctx[18]);
	number.$on("input", /*input_handler*/ ctx[19]);
	number.$on("submit", /*submit_handler*/ ctx[20]);
	number.$on("blur", /*blur_handler*/ ctx[21]);
	number.$on("focus", /*focus_handler*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(number.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(number, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 16388)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4 && { autoscroll: /*gradio*/ ctx[2].autoscroll },
					dirty & /*gradio*/ 4 && { i18n: /*gradio*/ ctx[2].i18n },
					dirty & /*loading_status*/ 16384 && get_spread_object(/*loading_status*/ ctx[14])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const number_changes = {};
			if (dirty & /*label*/ 8) number_changes.label = /*label*/ ctx[3];
			if (dirty & /*info*/ 16) number_changes.info = /*info*/ ctx[4];
			if (dirty & /*show_label*/ 2048) number_changes.show_label = /*show_label*/ ctx[11];
			if (dirty & /*minimum*/ 4096) number_changes.minimum = /*minimum*/ ctx[12];
			if (dirty & /*maximum*/ 8192) number_changes.maximum = /*maximum*/ ctx[13];
			if (dirty & /*step*/ 32768) number_changes.step = /*step*/ ctx[15];
			if (dirty & /*container*/ 256) number_changes.container = /*container*/ ctx[8];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				number_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_value_is_output && dirty & /*value_is_output*/ 2) {
				updating_value_is_output = true;
				number_changes.value_is_output = /*value_is_output*/ ctx[1];
				add_flush_callback(() => updating_value_is_output = false);
			}

			number.$set(number_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(number.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(number.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(number, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(22:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={container}  allow_overflow={false}  {scale}  {min_width} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[7],
				elem_id: /*elem_id*/ ctx[5],
				elem_classes: /*elem_classes*/ ctx[6],
				padding: /*container*/ ctx[8],
				allow_overflow: false,
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 128) block_changes.visible = /*visible*/ ctx[7];
			if (dirty & /*elem_id*/ 32) block_changes.elem_id = /*elem_id*/ ctx[5];
			if (dirty & /*elem_classes*/ 64) block_changes.elem_classes = /*elem_classes*/ ctx[6];
			if (dirty & /*container*/ 256) block_changes.padding = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, label, info, show_label, minimum, maximum, step, container, value, value_is_output, gradio, loading_status*/ 8452383) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveNumber', slots, []);
	let { gradio } = $$props;
	let { label = gradio.i18n("number.number") } = $$props;
	let { info = undefined } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { value = 0 } = $$props;
	let { show_label } = $$props;
	let { minimum = undefined } = $$props;
	let { maximum = undefined } = $$props;
	let { loading_status } = $$props;
	let { value_is_output = false } = $$props;
	let { step = null } = $$props;

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveNumber> was created without expected prop 'gradio'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<InteractiveNumber> was created without expected prop 'show_label'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveNumber> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'gradio',
		'label',
		'info',
		'elem_id',
		'elem_classes',
		'visible',
		'container',
		'scale',
		'min_width',
		'value',
		'show_label',
		'minimum',
		'maximum',
		'loading_status',
		'value_is_output',
		'step'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveNumber> was created with unknown prop '${key}'`);
	});

	function number_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function number_value_is_output_binding(value) {
		value_is_output = value;
		$$invalidate(1, value_is_output);
	}

	const change_handler = () => gradio.dispatch("change");
	const input_handler = () => gradio.dispatch("input");
	const submit_handler = () => gradio.dispatch("submit");
	const blur_handler = () => gradio.dispatch("blur");
	const focus_handler = () => gradio.dispatch("focus");

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('minimum' in $$props) $$invalidate(12, minimum = $$props.minimum);
		if ('maximum' in $$props) $$invalidate(13, maximum = $$props.maximum);
		if ('loading_status' in $$props) $$invalidate(14, loading_status = $$props.loading_status);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('step' in $$props) $$invalidate(15, step = $$props.step);
	};

	$$self.$capture_state = () => ({
		Number,
		Block,
		StatusTracker: Static,
		gradio,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		container,
		scale,
		min_width,
		value,
		show_label,
		minimum,
		maximum,
		loading_status,
		value_is_output,
		step
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('minimum' in $$props) $$invalidate(12, minimum = $$props.minimum);
		if ('maximum' in $$props) $$invalidate(13, maximum = $$props.maximum);
		if ('loading_status' in $$props) $$invalidate(14, loading_status = $$props.loading_status);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('step' in $$props) $$invalidate(15, step = $$props.step);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		value_is_output,
		gradio,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		container,
		scale,
		min_width,
		show_label,
		minimum,
		maximum,
		loading_status,
		step,
		number_value_binding,
		number_value_is_output_binding,
		change_handler,
		input_handler,
		submit_handler,
		blur_handler,
		focus_handler
	];
}

class InteractiveNumber extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 2,
			label: 3,
			info: 4,
			elem_id: 5,
			elem_classes: 6,
			visible: 7,
			container: 8,
			scale: 9,
			min_width: 10,
			value: 0,
			show_label: 11,
			minimum: 12,
			maximum: 13,
			loading_status: 14,
			value_is_output: 1,
			step: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveNumber",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get info() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set info(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get minimum() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set minimum(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maximum() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maximum(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get step() {
		throw new Error("<InteractiveNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set step(value) {
		throw new Error("<InteractiveNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const InteractiveNumber$1 = InteractiveNumber;

export { InteractiveNumber$1 as default };
//# sourceMappingURL=index-18109c5b.js.map
