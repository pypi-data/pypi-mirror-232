import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, afterUpdate, assign, create_component, mount_component, transition_in, transition_out, destroy_component, space, insert_dev, get_spread_update, get_spread_object, detach_dev } from '../../../node/dev/svelte-internal.js';
import { B as Block } from './Button-71613b11.js';
import { S as Static } from './index-b455ce1a.js';
import { T as Table } from './Table-63c024df.js';
import './Upload-dabc29e8.js';
import './StaticMarkdown-11e2f6b1.js';
import './dsv-a37bb3db.js';

/* home/runner/work/gradio/gradio/js/dataframe/static/StaticDataframe.svelte generated by Svelte v4.0.0 */

// (53:0) <Block  {visible}  padding={false}  {elem_id}  {elem_classes}  container={false}  {scale}  {min_width}  allow_overflow={false} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let table;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[13].autoscroll
		},
		{ i18n: /*gradio*/ ctx[13].i18n },
		/*loading_status*/ ctx[16]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	table = new Table({
			props: {
				root: /*root*/ ctx[12],
				label: /*label*/ ctx[7],
				row_count: /*row_count*/ ctx[6],
				col_count: /*col_count*/ ctx[5],
				values: /*value*/ ctx[0],
				headers: /*headers*/ ctx[1],
				wrap: /*wrap*/ ctx[8],
				datatype: /*datatype*/ ctx[9],
				latex_delimiters: /*latex_delimiters*/ ctx[14],
				editable: false,
				height: /*height*/ ctx[15],
				i18n: /*gradio*/ ctx[13].i18n
			},
			$$inline: true
		});

	table.$on("change", /*change_handler*/ ctx[19]);
	table.$on("select", /*select_handler*/ ctx[20]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(table.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 73728)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 8192 && {
						autoscroll: /*gradio*/ ctx[13].autoscroll
					},
					dirty & /*gradio*/ 8192 && { i18n: /*gradio*/ ctx[13].i18n },
					dirty & /*loading_status*/ 65536 && get_spread_object(/*loading_status*/ ctx[16])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const table_changes = {};
			if (dirty & /*root*/ 4096) table_changes.root = /*root*/ ctx[12];
			if (dirty & /*label*/ 128) table_changes.label = /*label*/ ctx[7];
			if (dirty & /*row_count*/ 64) table_changes.row_count = /*row_count*/ ctx[6];
			if (dirty & /*col_count*/ 32) table_changes.col_count = /*col_count*/ ctx[5];
			if (dirty & /*value*/ 1) table_changes.values = /*value*/ ctx[0];
			if (dirty & /*headers*/ 2) table_changes.headers = /*headers*/ ctx[1];
			if (dirty & /*wrap*/ 256) table_changes.wrap = /*wrap*/ ctx[8];
			if (dirty & /*datatype*/ 512) table_changes.datatype = /*datatype*/ ctx[9];
			if (dirty & /*latex_delimiters*/ 16384) table_changes.latex_delimiters = /*latex_delimiters*/ ctx[14];
			if (dirty & /*height*/ 32768) table_changes.height = /*height*/ ctx[15];
			if (dirty & /*gradio*/ 8192) table_changes.i18n = /*gradio*/ ctx[13].i18n;
			table.$set(table_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(table, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(53:0) <Block  {visible}  padding={false}  {elem_id}  {elem_classes}  container={false}  {scale}  {min_width}  allow_overflow={false} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				container: false,
				scale: /*scale*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				allow_overflow: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];
			if (dirty & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty & /*scale*/ 1024) block_changes.scale = /*scale*/ ctx[10];
			if (dirty & /*min_width*/ 2048) block_changes.min_width = /*min_width*/ ctx[11];

			if (dirty & /*$$scope, root, label, row_count, col_count, value, headers, wrap, datatype, latex_delimiters, height, gradio, loading_status*/ 4322275) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticDataframe', slots, []);
	let { headers = [] } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;

	let { value = {
		data: [["", "", ""]],
		headers: ["1", "2", "3"]
	} } = $$props;

	let old_value = JSON.stringify(value);
	let { value_is_output = false } = $$props;
	let { col_count } = $$props;
	let { row_count } = $$props;
	let { label = null } = $$props;
	let { wrap } = $$props;
	let { datatype } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { root } = $$props;
	let { gradio } = $$props;
	let { latex_delimiters } = $$props;
	let { height = undefined } = $$props;
	let { loading_status } = $$props;

	function handle_change() {
		gradio.dispatch("change");

		if (!value_is_output) {
			gradio.dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(17, value_is_output = false);
	});

	if (Array.isArray(value) && value?.[0]?.length === 0 || value.data?.[0]?.length === 0) {
		value = {
			data: [Array(col_count?.[0] || 3).fill("")],
			headers: Array(col_count?.[0] || 3).fill("").map((_, i) => `${i + 1}`)
		};
	}

	$$self.$$.on_mount.push(function () {
		if (col_count === undefined && !('col_count' in $$props || $$self.$$.bound[$$self.$$.props['col_count']])) {
			console.warn("<StaticDataframe> was created without expected prop 'col_count'");
		}

		if (row_count === undefined && !('row_count' in $$props || $$self.$$.bound[$$self.$$.props['row_count']])) {
			console.warn("<StaticDataframe> was created without expected prop 'row_count'");
		}

		if (wrap === undefined && !('wrap' in $$props || $$self.$$.bound[$$self.$$.props['wrap']])) {
			console.warn("<StaticDataframe> was created without expected prop 'wrap'");
		}

		if (datatype === undefined && !('datatype' in $$props || $$self.$$.bound[$$self.$$.props['datatype']])) {
			console.warn("<StaticDataframe> was created without expected prop 'datatype'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<StaticDataframe> was created without expected prop 'root'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticDataframe> was created without expected prop 'gradio'");
		}

		if (latex_delimiters === undefined && !('latex_delimiters' in $$props || $$self.$$.bound[$$self.$$.props['latex_delimiters']])) {
			console.warn("<StaticDataframe> was created without expected prop 'latex_delimiters'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticDataframe> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'headers',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'value_is_output',
		'col_count',
		'row_count',
		'label',
		'wrap',
		'datatype',
		'scale',
		'min_width',
		'root',
		'gradio',
		'latex_delimiters',
		'height',
		'loading_status'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticDataframe> was created with unknown prop '${key}'`);
	});

	const change_handler = ({ detail }) => {
		$$invalidate(0, value = detail);
	};

	const select_handler = e => gradio.dispatch("select", e.detail);

	$$self.$$set = $$props => {
		if ('headers' in $$props) $$invalidate(1, headers = $$props.headers);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(17, value_is_output = $$props.value_is_output);
		if ('col_count' in $$props) $$invalidate(5, col_count = $$props.col_count);
		if ('row_count' in $$props) $$invalidate(6, row_count = $$props.row_count);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('wrap' in $$props) $$invalidate(8, wrap = $$props.wrap);
		if ('datatype' in $$props) $$invalidate(9, datatype = $$props.datatype);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('gradio' in $$props) $$invalidate(13, gradio = $$props.gradio);
		if ('latex_delimiters' in $$props) $$invalidate(14, latex_delimiters = $$props.latex_delimiters);
		if ('height' in $$props) $$invalidate(15, height = $$props.height);
		if ('loading_status' in $$props) $$invalidate(16, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		Block,
		Table,
		StatusTracker: Static,
		headers,
		elem_id,
		elem_classes,
		visible,
		value,
		old_value,
		value_is_output,
		col_count,
		row_count,
		label,
		wrap,
		datatype,
		scale,
		min_width,
		root,
		gradio,
		latex_delimiters,
		height,
		loading_status,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('headers' in $$props) $$invalidate(1, headers = $$props.headers);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(18, old_value = $$props.old_value);
		if ('value_is_output' in $$props) $$invalidate(17, value_is_output = $$props.value_is_output);
		if ('col_count' in $$props) $$invalidate(5, col_count = $$props.col_count);
		if ('row_count' in $$props) $$invalidate(6, row_count = $$props.row_count);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('wrap' in $$props) $$invalidate(8, wrap = $$props.wrap);
		if ('datatype' in $$props) $$invalidate(9, datatype = $$props.datatype);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('gradio' in $$props) $$invalidate(13, gradio = $$props.gradio);
		if ('latex_delimiters' in $$props) $$invalidate(14, latex_delimiters = $$props.latex_delimiters);
		if ('height' in $$props) $$invalidate(15, height = $$props.height);
		if ('loading_status' in $$props) $$invalidate(16, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, old_value*/ 262145) {
			{
				if (JSON.stringify(value) !== old_value) {
					$$invalidate(18, old_value = JSON.stringify(value));
					handle_change();
				}
			}
		}
	};

	return [
		value,
		headers,
		elem_id,
		elem_classes,
		visible,
		col_count,
		row_count,
		label,
		wrap,
		datatype,
		scale,
		min_width,
		root,
		gradio,
		latex_delimiters,
		height,
		loading_status,
		value_is_output,
		old_value,
		change_handler,
		select_handler
	];
}

class StaticDataframe extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			headers: 1,
			elem_id: 2,
			elem_classes: 3,
			visible: 4,
			value: 0,
			value_is_output: 17,
			col_count: 5,
			row_count: 6,
			label: 7,
			wrap: 8,
			datatype: 9,
			scale: 10,
			min_width: 11,
			root: 12,
			gradio: 13,
			latex_delimiters: 14,
			height: 15,
			loading_status: 16
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticDataframe",
			options,
			id: create_fragment.name
		});
	}

	get headers() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set headers(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get col_count() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set col_count(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get row_count() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row_count(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrap() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrap(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get datatype() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set datatype(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get latex_delimiters() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set latex_delimiters(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticDataframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticDataframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticDataframe$1 = StaticDataframe;

export { StaticDataframe$1 as default };
//# sourceMappingURL=index-b968e4f2.js.map
