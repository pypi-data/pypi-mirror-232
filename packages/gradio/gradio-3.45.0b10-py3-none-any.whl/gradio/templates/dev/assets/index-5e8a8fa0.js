import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, attr_dev, set_style, add_location, toggle_class, insert_dev, append_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev } from '../../../node/dev/svelte-internal.js';

const Group_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/group/static/Group.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/group/static/Group.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let div1_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "styler s-HLn4zS1sv8AO");
			set_style(div0, "--block-radius", `0px`);
			set_style(div0, "--block-border-width", `0px`);
			set_style(div0, "--layout-gap", `1px`);
			set_style(div0, "--form-gap-width", `1px`);
			set_style(div0, "--button-border-width", `0px`);
			set_style(div0, "--button-large-radius", `0px`);
			set_style(div0, "--button-small-radius", `0px`);
			add_location(div0, file, 11, 1, 199);
			attr_dev(div1, "id", /*elem_id*/ ctx[0]);
			attr_dev(div1, "class", div1_class_value = "gr-group " + /*elem_classes*/ ctx[1].join(' ') + " s-HLn4zS1sv8AO");
			toggle_class(div1, "hide", !/*visible*/ ctx[2]);
			add_location(div1, file, 6, 0, 111);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(div1, "id", /*elem_id*/ ctx[0]);
			}

			if (!current || dirty & /*elem_classes*/ 2 && div1_class_value !== (div1_class_value = "gr-group " + /*elem_classes*/ ctx[1].join(' ') + " s-HLn4zS1sv8AO")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*elem_classes, visible*/ 6) {
				toggle_class(div1, "hide", !/*visible*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Group', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	const writable_props = ['elem_id', 'elem_classes', 'visible'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Group> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ elem_id, elem_classes, visible });

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [elem_id, elem_classes, visible, $$scope, slots];
}

class Group extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { elem_id: 0, elem_classes: 1, visible: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Group",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Group$1 = Group;

export { Group$1 as default };
//# sourceMappingURL=index-5e8a8fa0.js.map
