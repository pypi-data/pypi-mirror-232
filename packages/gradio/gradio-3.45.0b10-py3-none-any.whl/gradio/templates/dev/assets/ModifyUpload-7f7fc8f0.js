import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, svg_element, attr_dev, set_style, add_location, insert_dev, append_dev, noop, detach_dev, createEventDispatcher, element, space, create_component, toggle_class, mount_component, transition_in, group_outros, transition_out, check_outros, destroy_component } from '../../../node/dev/svelte-internal.js';
import './Button-71613b11.js';
import { I as IconButton } from './IconButton-88b1ebfb.js';
import './index-b455ce1a.js';
import { U as Undo } from './Undo-012722f8.js';

/* home/runner/work/gradio/gradio/js/icons/src/Clear.svelte generated by Svelte v4.0.0 */

const file$2 = "home/runner/work/gradio/gradio/js/icons/src/Clear.svelte";

function create_fragment$2(ctx) {
	let svg;
	let g;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M18,6L6.087,17.913");
			set_style(path0, "fill", "none");
			set_style(path0, "fill-rule", "nonzero");
			set_style(path0, "stroke-width", "2px");
			add_location(path0, file$2, 14, 2, 374);
			attr_dev(g, "transform", "matrix(1.14096,-0.140958,-0.140958,1.14096,-0.0559523,0.0559523)");
			add_location(g, file$2, 11, 1, 287);
			attr_dev(path1, "d", "M4.364,4.364L19.636,19.636");
			set_style(path1, "fill", "none");
			set_style(path1, "fill-rule", "nonzero");
			set_style(path1, "stroke-width", "2px");
			add_location(path1, file$2, 19, 1, 475);
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "xml:space", "preserve");
			attr_dev(svg, "stroke", "currentColor");
			set_style(svg, "fill-rule", "evenodd");
			set_style(svg, "clip-rule", "evenodd");
			set_style(svg, "stroke-linecap", "round");
			set_style(svg, "stroke-linejoin", "round");
			add_location(svg, file$2, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g);
			append_dev(g, path0);
			append_dev(svg, path1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Clear', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clear> was created with unknown prop '${key}'`);
	});

	return [];
}

class Clear extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Clear",
			options,
			id: create_fragment$2.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Edit.svelte generated by Svelte v4.0.0 */

const file$1 = "home/runner/work/gradio/gradio/js/icons/src/Edit.svelte";

function create_fragment$1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z");
			add_location(path, file$1, 12, 1, 231);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-edit-2");
			add_location(svg, file$1, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Edit', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Edit> was created with unknown prop '${key}'`);
	});

	return [];
}

class Edit extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Edit",
			options,
			id: create_fragment$1.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/upload/src/ModifyUpload.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/upload/src/ModifyUpload.svelte";

// (15:1) {#if editable}
function create_if_block_1(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Edit,
				label: /*i18n*/ ctx[3]("common.edit")
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 8) iconbutton_changes.label = /*i18n*/ ctx[3]("common.edit");
			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(15:1) {#if editable}",
		ctx
	});

	return block;
}

// (23:1) {#if undoable}
function create_if_block(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Undo,
				label: /*i18n*/ ctx[3]("common.undo")
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_1*/ ctx[6]);

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 8) iconbutton_changes.label = /*i18n*/ ctx[3]("common.undo");
			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(23:1) {#if undoable}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let iconbutton;
	let current;
	let if_block0 = /*editable*/ ctx[0] && create_if_block_1(ctx);
	let if_block1 = /*undoable*/ ctx[1] && create_if_block(ctx);

	iconbutton = new IconButton({
			props: {
				Icon: Clear,
				label: /*i18n*/ ctx[3]("common.clear")
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_2*/ ctx[7]);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			create_component(iconbutton.$$.fragment);
			attr_dev(div, "class", "s-Bw5mpPvzAzu5");
			toggle_class(div, "not-absolute", !/*absolute*/ ctx[2]);
			set_style(div, "position", /*absolute*/ ctx[2] ? "absolute" : "static");
			add_location(div, file, 19, 0, 317);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t1);
			mount_component(iconbutton, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*editable*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*editable*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*undoable*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*undoable*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 8) iconbutton_changes.label = /*i18n*/ ctx[3]("common.clear");
			iconbutton.$set(iconbutton_changes);

			if (!current || dirty & /*absolute*/ 4) {
				toggle_class(div, "not-absolute", !/*absolute*/ ctx[2]);
			}

			if (dirty & /*absolute*/ 4) {
				set_style(div, "position", /*absolute*/ ctx[2] ? "absolute" : "static");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ModifyUpload', slots, []);
	let { editable = false } = $$props;
	let { undoable = false } = $$props;
	let { absolute = true } = $$props;
	let { i18n } = $$props;
	const dispatch = createEventDispatcher();

	$$self.$$.on_mount.push(function () {
		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<ModifyUpload> was created without expected prop 'i18n'");
		}
	});

	const writable_props = ['editable', 'undoable', 'absolute', 'i18n'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModifyUpload> was created with unknown prop '${key}'`);
	});

	const click_handler = () => dispatch("edit");
	const click_handler_1 = () => dispatch("undo");

	const click_handler_2 = event => {
		dispatch("clear");
		event.stopPropagation();
	};

	$$self.$$set = $$props => {
		if ('editable' in $$props) $$invalidate(0, editable = $$props.editable);
		if ('undoable' in $$props) $$invalidate(1, undoable = $$props.undoable);
		if ('absolute' in $$props) $$invalidate(2, absolute = $$props.absolute);
		if ('i18n' in $$props) $$invalidate(3, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		IconButton,
		Edit,
		Clear,
		Undo,
		createEventDispatcher,
		editable,
		undoable,
		absolute,
		i18n,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('editable' in $$props) $$invalidate(0, editable = $$props.editable);
		if ('undoable' in $$props) $$invalidate(1, undoable = $$props.undoable);
		if ('absolute' in $$props) $$invalidate(2, absolute = $$props.absolute);
		if ('i18n' in $$props) $$invalidate(3, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		editable,
		undoable,
		absolute,
		i18n,
		dispatch,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ModifyUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			editable: 0,
			undoable: 1,
			absolute: 2,
			i18n: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ModifyUpload",
			options,
			id: create_fragment.name
		});
	}

	get editable() {
		throw new Error("<ModifyUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editable(value) {
		throw new Error("<ModifyUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get undoable() {
		throw new Error("<ModifyUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set undoable(value) {
		throw new Error("<ModifyUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get absolute() {
		throw new Error("<ModifyUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set absolute(value) {
		throw new Error("<ModifyUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<ModifyUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<ModifyUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Clear as C, ModifyUpload as M };
//# sourceMappingURL=ModifyUpload-7f7fc8f0.js.map
