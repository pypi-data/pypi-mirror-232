import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, element, attr_dev, toggle_class, add_location, insert_dev, noop, detach_dev, assign, create_component, mount_component, transition_in, transition_out, destroy_component, space, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { S as Static } from './index-b455ce1a.js';
import { B as Block } from './Button-71613b11.js';

const HTML_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/html/static/HTML.svelte generated by Svelte v4.0.0 */
const file$1 = "home/runner/work/gradio/gradio/js/html/static/HTML.svelte";

function create_fragment$1(ctx) {
	let div;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", div_class_value = "prose " + /*elem_classes*/ ctx[1].join(' ') + " s-w5yaCBe2xoHb");
			attr_dev(div, "id", /*elem_id*/ ctx[0]);
			toggle_class(div, "min", /*min_height*/ ctx[4]);
			toggle_class(div, "hide", !/*visible*/ ctx[3]);
			add_location(div, file$1, 13, 0, 280);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = /*value*/ ctx[2];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 4) div.innerHTML = /*value*/ ctx[2];
			if (dirty & /*elem_classes*/ 2 && div_class_value !== (div_class_value = "prose " + /*elem_classes*/ ctx[1].join(' ') + " s-w5yaCBe2xoHb")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*elem_id*/ 1) {
				attr_dev(div, "id", /*elem_id*/ ctx[0]);
			}

			if (dirty & /*elem_classes, min_height*/ 18) {
				toggle_class(div, "min", /*min_height*/ ctx[4]);
			}

			if (dirty & /*elem_classes, visible*/ 10) {
				toggle_class(div, "hide", !/*visible*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HTML', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { value } = $$props;
	let { visible = true } = $$props;
	let { min_height = false } = $$props;
	const dispatch = createEventDispatcher();

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<HTML> was created without expected prop 'value'");
		}
	});

	const writable_props = ['elem_id', 'elem_classes', 'value', 'visible', 'min_height'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HTML> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('min_height' in $$props) $$invalidate(4, min_height = $$props.min_height);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		elem_id,
		elem_classes,
		value,
		visible,
		min_height,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('min_height' in $$props) $$invalidate(4, min_height = $$props.min_height);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 4) {
			(dispatch("change"));
		}
	};

	return [elem_id, elem_classes, value, visible, min_height];
}

class HTML extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			value: 2,
			visible: 3,
			min_height: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HTML",
			options,
			id: create_fragment$1.name
		});
	}

	get elem_id() {
		throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_height() {
		throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_height(value) {
		throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticHtml_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/html/static/StaticHtml.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/html/static/StaticHtml.svelte";

// (14:0) <Block {visible} {elem_id} {elem_classes} container={false}>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let div;
	let html;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[5].autoscroll },
		{ i18n: /*gradio*/ ctx[5].i18n },
		/*loading_status*/ ctx[4],
		{ variant: "center" }
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	html = new HTML({
			props: {
				min_height: /*loading_status*/ ctx[4] && /*loading_status*/ ctx[4]?.status !== "complete",
				value: /*value*/ ctx[3],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				visible: /*visible*/ ctx[2]
			},
			$$inline: true
		});

	html.$on("change", /*change_handler*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			div = element("div");
			create_component(html.$$.fragment);
			attr_dev(div, "class", "s-7r3ef8yJVVed");
			toggle_class(div, "pending", /*loading_status*/ ctx[4]?.status === "pending");
			add_location(div, file, 27, 1, 540);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			mount_component(html, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 48)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 32 && { autoscroll: /*gradio*/ ctx[5].autoscroll },
					dirty & /*gradio*/ 32 && { i18n: /*gradio*/ ctx[5].i18n },
					dirty & /*loading_status*/ 16 && get_spread_object(/*loading_status*/ ctx[4]),
					statustracker_spread_levels[3]
				])
			: {};

			statustracker.$set(statustracker_changes);
			const html_changes = {};
			if (dirty & /*loading_status*/ 16) html_changes.min_height = /*loading_status*/ ctx[4] && /*loading_status*/ ctx[4]?.status !== "complete";
			if (dirty & /*value*/ 8) html_changes.value = /*value*/ ctx[3];
			if (dirty & /*elem_id*/ 1) html_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) html_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*visible*/ 4) html_changes.visible = /*visible*/ ctx[2];
			html.$set(html_changes);

			if (!current || dirty & /*loading_status*/ 16) {
				toggle_class(div, "pending", /*loading_status*/ ctx[4]?.status === "pending");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(html.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(html.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			destroy_component(statustracker, detaching);
			destroy_component(html);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:0) <Block {visible} {elem_id} {elem_classes} container={false}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];

			if (dirty & /*$$scope, loading_status, value, elem_id, elem_classes, visible, gradio*/ 319) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticHtml', slots, []);
	let { label } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = "" } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticHtml> was created without expected prop 'label'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticHtml> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticHtml> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'label',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'loading_status',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticHtml> was created with unknown prop '${key}'`);
	});

	const change_handler = () => gradio.dispatch("change");

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(4, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(5, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		HTML,
		StatusTracker: Static,
		Block,
		label,
		elem_id,
		elem_classes,
		visible,
		value,
		loading_status,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(4, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(5, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*label, gradio*/ 96) {
			(gradio.dispatch("change"));
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		loading_status,
		gradio,
		label,
		change_handler
	];
}

class StaticHtml extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 6,
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			loading_status: 4,
			gradio: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticHtml",
			options,
			id: create_fragment.name
		});
	}

	get label() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticHtml>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticHtml>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticHtml$1 = StaticHtml;

export { StaticHtml$1 as default };
//# sourceMappingURL=index-bff7e632.js.map
