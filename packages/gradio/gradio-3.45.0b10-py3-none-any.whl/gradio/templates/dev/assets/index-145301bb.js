import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, onDestroy, element, create_component, space, attr_dev, toggle_class, add_location, insert_dev, append_dev, mount_component, listen_dev, transition_in, group_outros, transition_out, check_outros, detach_dev, destroy_component, add_render_callback, create_bidirectional_transition, afterUpdate, assign, empty, get_spread_update, get_spread_object, binding_callbacks, bind, add_flush_callback } from '../../../node/dev/svelte-internal.js';
import { C as Code, a as Code$1 } from './Widgets.svelte_svelte_type_style_lang-94dae1bc.js';
import { f as fade, B as Block } from './Button-71613b11.js';
import { C as Copy, a as Check } from './Copy-4994c840.js';
import { S as Static } from './index-b455ce1a.js';
import { D as Download } from './Download-b7009333.js';
import { B as BlockLabel } from './BlockLabel-046dac9c.js';
import { E as Empty } from './Empty-f0c1763b.js';

/* home/runner/work/gradio/gradio/js/code/shared/Copy.svelte generated by Svelte v4.0.0 */
const file$2 = "home/runner/work/gradio/gradio/js/code/shared/Copy.svelte";

// (31:1) {#if copied}
function create_if_block$2(ctx) {
	let span;
	let check;
	let span_transition;
	let current;
	check = new Check({ $$inline: true });

	const block = {
		c: function create() {
			span = element("span");
			create_component(check.$$.fragment);
			attr_dev(span, "class", "check s-oMqElAe34RVJ");
			add_location(span, file$2, 34, 2, 736);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(check, span, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(check.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!span_transition) span_transition = create_bidirectional_transition(span, fade, {}, true);
					span_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(check.$$.fragment, local);

			if (local) {
				if (!span_transition) span_transition = create_bidirectional_transition(span, fade, {}, false);
				span_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}

			destroy_component(check);
			if (detaching && span_transition) span_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(31:1) {#if copied}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let button;
	let span;
	let copy;
	let t;
	let current;
	let mounted;
	let dispose;
	copy = new Copy({ $$inline: true });
	let if_block = /*copied*/ ctx[0] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			create_component(copy.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			attr_dev(span, "class", "copy-text");
			toggle_class(span, "copied", /*copied*/ ctx[0]);
			add_location(span, file$2, 31, 1, 650);
			attr_dev(button, "title", "copy");
			attr_dev(button, "class", "s-oMqElAe34RVJ");
			add_location(button, file$2, 29, 0, 580);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);
			mount_component(copy, span, null);
			append_dev(button, t);
			if (if_block) if_block.m(button, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handle_copy*/ ctx[1], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*copied*/ 1) {
				toggle_class(span, "copied", /*copied*/ ctx[0]);
			}

			if (/*copied*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*copied*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(copy.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(copy.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			destroy_component(copy);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Copy', slots, []);
	let copied = false;
	let { value } = $$props;
	let timer;

	function copy_feedback() {
		$$invalidate(0, copied = true);
		if (timer) clearTimeout(timer);

		timer = setTimeout(
			() => {
				$$invalidate(0, copied = false);
			},
			2000
		);
	}

	async function handle_copy() {
		if ("clipboard" in navigator) {
			await navigator.clipboard.writeText(value);
			copy_feedback();
		}
	}

	onDestroy(() => {
		if (timer) clearTimeout(timer);
	});

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Copy> was created without expected prop 'value'");
		}
	});

	const writable_props = ['value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Copy> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		onDestroy,
		fade,
		Copy,
		Check,
		copied,
		value,
		timer,
		copy_feedback,
		handle_copy
	});

	$$self.$inject_state = $$props => {
		if ('copied' in $$props) $$invalidate(0, copied = $$props.copied);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('timer' in $$props) timer = $$props.timer;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [copied, handle_copy, value];
}

class Copy_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { value: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Copy_1",
			options,
			id: create_fragment$3.name
		});
	}

	get value() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/code/shared/Download.svelte generated by Svelte v4.0.0 */
const file$1 = "home/runner/work/gradio/gradio/js/code/shared/Download.svelte";

// (53:1) {#if copied}
function create_if_block$1(ctx) {
	let span;
	let check;
	let span_transition;
	let current;
	check = new Check({ $$inline: true });

	const block = {
		c: function create() {
			span = element("span");
			create_component(check.$$.fragment);
			attr_dev(span, "class", "check s-QG-s9e5oTcpV");
			add_location(span, file$1, 60, 2, 1129);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(check, span, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(check.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!span_transition) span_transition = create_bidirectional_transition(span, fade, {}, true);
					span_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(check.$$.fragment, local);

			if (local) {
				if (!span_transition) span_transition = create_bidirectional_transition(span, fade, {}, false);
				span_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}

			destroy_component(check);
			if (detaching && span_transition) span_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(53:1) {#if copied}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let a;
	let download;
	let t;
	let a_download_value;
	let current;
	let mounted;
	let dispose;
	download = new Download({ $$inline: true });
	let if_block = /*copied*/ ctx[0] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			a = element("a");
			create_component(download.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			attr_dev(a, "download", a_download_value = "file." + /*ext*/ ctx[2]);
			attr_dev(a, "href", /*download_value*/ ctx[1]);
			attr_dev(a, "class", "s-QG-s9e5oTcpV");
			toggle_class(a, "copied", /*copied*/ ctx[0]);
			add_location(a, file$1, 52, 0, 1008);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(download, a, null);
			append_dev(a, t);
			if (if_block) if_block.m(a, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "click", /*copy_feedback*/ ctx[3], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*copied*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*copied*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*ext*/ 4 && a_download_value !== (a_download_value = "file." + /*ext*/ ctx[2])) {
				attr_dev(a, "download", a_download_value);
			}

			if (!current || dirty & /*download_value*/ 2) {
				attr_dev(a, "href", /*download_value*/ ctx[1]);
			}

			if (!current || dirty & /*copied*/ 1) {
				toggle_class(a, "copied", /*copied*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(download.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(download.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}

			destroy_component(download);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function get_ext_for_type(type) {
	const exts = {
		py: "py",
		python: "py",
		md: "md",
		markdown: "md",
		json: "json",
		html: "html",
		css: "css",
		js: "js",
		javascript: "js",
		ts: "ts",
		typescript: "ts",
		yaml: "yaml",
		yml: "yml",
		dockerfile: "dockerfile",
		sh: "sh",
		shell: "sh",
		r: "r"
	};

	return exts[type] || "txt";
}

function instance$2($$self, $$props, $$invalidate) {
	let ext;
	let download_value;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Download', slots, []);
	let { value } = $$props;
	let { language } = $$props;
	let copied = false;
	let timer;

	function copy_feedback() {
		$$invalidate(0, copied = true);
		if (timer) clearTimeout(timer);

		timer = setTimeout(
			() => {
				$$invalidate(0, copied = false);
			},
			2000
		);
	}

	onDestroy(() => {
		if (timer) clearTimeout(timer);
	});

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Download> was created without expected prop 'value'");
		}

		if (language === undefined && !('language' in $$props || $$self.$$.bound[$$self.$$.props['language']])) {
			console.warn("<Download> was created without expected prop 'language'");
		}
	});

	const writable_props = ['value', 'language'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Download> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(4, value = $$props.value);
		if ('language' in $$props) $$invalidate(5, language = $$props.language);
	};

	$$self.$capture_state = () => ({
		onDestroy,
		fade,
		Download,
		Check,
		value,
		language,
		get_ext_for_type,
		copied,
		timer,
		copy_feedback,
		download_value,
		ext
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(4, value = $$props.value);
		if ('language' in $$props) $$invalidate(5, language = $$props.language);
		if ('copied' in $$props) $$invalidate(0, copied = $$props.copied);
		if ('timer' in $$props) timer = $$props.timer;
		if ('download_value' in $$props) $$invalidate(1, download_value = $$props.download_value);
		if ('ext' in $$props) $$invalidate(2, ext = $$props.ext);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*language*/ 32) {
			$$invalidate(2, ext = get_ext_for_type(language));
		}

		if ($$self.$$.dirty & /*value*/ 16) {
			$$invalidate(1, download_value = URL.createObjectURL(new Blob([value])));
		}
	};

	return [copied, download_value, ext, copy_feedback, value, language];
}

class Download_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { value: 4, language: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Download_1",
			options,
			id: create_fragment$2.name
		});
	}

	get value() {
		throw new Error("<Download>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Download>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get language() {
		throw new Error("<Download>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set language(value) {
		throw new Error("<Download>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/code/shared/Widgets.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/code/shared/Widgets.svelte";

function create_fragment$1(ctx) {
	let div;
	let download;
	let t;
	let copy;
	let current;

	download = new Download_1({
			props: {
				value: /*value*/ ctx[0],
				language: /*language*/ ctx[1]
			},
			$$inline: true
		});

	copy = new Copy_1({
			props: { value: /*value*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(download.$$.fragment);
			t = space();
			create_component(copy.$$.fragment);
			attr_dev(div, "class", "s-ToHN-m_ffC4k");
			add_location(div, file, 8, 0, 144);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(download, div, null);
			append_dev(div, t);
			mount_component(copy, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const download_changes = {};
			if (dirty & /*value*/ 1) download_changes.value = /*value*/ ctx[0];
			if (dirty & /*language*/ 2) download_changes.language = /*language*/ ctx[1];
			download.$set(download_changes);
			const copy_changes = {};
			if (dirty & /*value*/ 1) copy_changes.value = /*value*/ ctx[0];
			copy.$set(copy_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(download.$$.fragment, local);
			transition_in(copy.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(download.$$.fragment, local);
			transition_out(copy.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(download);
			destroy_component(copy);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Widgets', slots, []);
	let { value } = $$props;
	let { language } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Widgets> was created without expected prop 'value'");
		}

		if (language === undefined && !('language' in $$props || $$self.$$.bound[$$self.$$.props['language']])) {
			console.warn("<Widgets> was created without expected prop 'language'");
		}
	});

	const writable_props = ['value', 'language'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Widgets> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('language' in $$props) $$invalidate(1, language = $$props.language);
	};

	$$self.$capture_state = () => ({ Copy: Copy_1, Download: Download_1, value, language });

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('language' in $$props) $$invalidate(1, language = $$props.language);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, language];
}

class Widgets extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, language: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Widgets",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Widgets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Widgets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get language() {
		throw new Error("<Widgets>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set language(value) {
		throw new Error("<Widgets>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/code/static/StaticCode.svelte generated by Svelte v4.0.0 */

// (44:1) {:else}
function create_else_block(ctx) {
	let widget;
	let t;
	let code;
	let updating_value;
	let current;

	widget = new Widgets({
			props: {
				language: /*language*/ ctx[2],
				value: /*value*/ ctx[0]
			},
			$$inline: true
		});

	function code_value_binding(value) {
		/*code_value_binding*/ ctx[13](value);
	}

	let code_props = {
		language: /*language*/ ctx[2],
		lines: /*lines*/ ctx[3],
		dark_mode: /*dark_mode*/ ctx[10],
		readonly: true
	};

	if (/*value*/ ctx[0] !== void 0) {
		code_props.value = /*value*/ ctx[0];
	}

	code = new Code({ props: code_props, $$inline: true });
	binding_callbacks.push(() => bind(code, 'value', code_value_binding));

	const block = {
		c: function create() {
			create_component(widget.$$.fragment);
			t = space();
			create_component(code.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(widget, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(code, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const widget_changes = {};
			if (dirty & /*language*/ 4) widget_changes.language = /*language*/ ctx[2];
			if (dirty & /*value*/ 1) widget_changes.value = /*value*/ ctx[0];
			widget.$set(widget_changes);
			const code_changes = {};
			if (dirty & /*language*/ 4) code_changes.language = /*language*/ ctx[2];
			if (dirty & /*lines*/ 8) code_changes.lines = /*lines*/ ctx[3];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				code_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			code.$set(code_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(widget.$$.fragment, local);
			transition_in(code.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(widget.$$.fragment, local);
			transition_out(code.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(widget, detaching);
			destroy_component(code, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(44:1) {:else}",
		ctx
	});

	return block;
}

// (40:1) {#if !value}
function create_if_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(40:1) {#if !value}",
		ctx
	});

	return block;
}

// (41:2) <Empty unpadded_box={true} size="large">
function create_default_slot_1(ctx) {
	let codeicon;
	let current;
	codeicon = new Code$1({ $$inline: true });

	const block = {
		c: function create() {
			create_component(codeicon.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(codeicon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(codeicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(codeicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(codeicon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(41:2) <Empty unpadded_box={true} size=\\\"large\\\">",
		ctx
	});

	return block;
}

// (31:0) <Block variant={"solid"} padding={false} {elem_id} {elem_classes} {visible}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocklabel;
	let t1;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[1].autoscroll },
		{ i18n: /*gradio*/ ctx[1].i18n },
		/*loading_status*/ ctx[9]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	blocklabel = new BlockLabel({
			props: {
				Icon: Code$1,
				show_label: /*show_label*/ ctx[8],
				label: /*label*/ ctx[7],
				float: false
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocklabel.$$.fragment);
			t1 = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 514)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 2 && { autoscroll: /*gradio*/ ctx[1].autoscroll },
					dirty & /*gradio*/ 2 && { i18n: /*gradio*/ ctx[1].i18n },
					dirty & /*loading_status*/ 512 && get_spread_object(/*loading_status*/ ctx[9])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 256) blocklabel_changes.show_label = /*show_label*/ ctx[8];
			if (dirty & /*label*/ 128) blocklabel_changes.label = /*label*/ ctx[7];
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(if_block_anchor);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(31:0) <Block variant={\\\"solid\\\"} padding={false} {elem_id} {elem_classes} {visible}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: "solid",
				padding: false,
				elem_id: /*elem_id*/ ctx[4],
				elem_classes: /*elem_classes*/ ctx[5],
				visible: /*visible*/ ctx[6],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 16) block_changes.elem_id = /*elem_id*/ ctx[4];
			if (dirty & /*elem_classes*/ 32) block_changes.elem_classes = /*elem_classes*/ ctx[5];
			if (dirty & /*visible*/ 64) block_changes.visible = /*visible*/ ctx[6];

			if (dirty & /*$$scope, value, language, lines, show_label, label, gradio, loading_status*/ 33679) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticCode', slots, []);
	let { gradio } = $$props;
	let { value = "" } = $$props;
	let { value_is_output = false } = $$props;
	let { language = "" } = $$props;
	let { lines = 5 } = $$props;
	let { target } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { label = gradio.i18n("code.code") } = $$props;
	let { show_label = true } = $$props;
	let { loading_status } = $$props;
	let dark_mode = target.classList.contains("dark");

	function handle_change() {
		gradio.dispatch("change", value);

		if (!value_is_output) {
			gradio.dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(11, value_is_output = false);
	});

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticCode> was created without expected prop 'gradio'");
		}

		if (target === undefined && !('target' in $$props || $$self.$$.bound[$$self.$$.props['target']])) {
			console.warn("<StaticCode> was created without expected prop 'target'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticCode> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'gradio',
		'value',
		'value_is_output',
		'language',
		'lines',
		'target',
		'elem_id',
		'elem_classes',
		'visible',
		'label',
		'show_label',
		'loading_status'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticCode> was created with unknown prop '${key}'`);
	});

	function code_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(11, value_is_output = $$props.value_is_output);
		if ('language' in $$props) $$invalidate(2, language = $$props.language);
		if ('lines' in $$props) $$invalidate(3, lines = $$props.lines);
		if ('target' in $$props) $$invalidate(12, target = $$props.target);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(9, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		Code,
		Widget: Widgets,
		StatusTracker: Static,
		Block,
		BlockLabel,
		Empty,
		CodeIcon: Code$1,
		gradio,
		value,
		value_is_output,
		language,
		lines,
		target,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		loading_status,
		dark_mode,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(11, value_is_output = $$props.value_is_output);
		if ('language' in $$props) $$invalidate(2, language = $$props.language);
		if ('lines' in $$props) $$invalidate(3, lines = $$props.lines);
		if ('target' in $$props) $$invalidate(12, target = $$props.target);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(9, loading_status = $$props.loading_status);
		if ('dark_mode' in $$props) $$invalidate(10, dark_mode = $$props.dark_mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			(handle_change());
		}
	};

	return [
		value,
		gradio,
		language,
		lines,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		loading_status,
		dark_mode,
		value_is_output,
		target,
		code_value_binding
	];
}

class StaticCode extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 1,
			value: 0,
			value_is_output: 11,
			language: 2,
			lines: 3,
			target: 12,
			elem_id: 4,
			elem_classes: 5,
			visible: 6,
			label: 7,
			show_label: 8,
			loading_status: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticCode",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get language() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set language(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lines() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lines(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticCode$1 = StaticCode;

export { StaticCode$1 as default };
//# sourceMappingURL=index-145301bb.js.map
