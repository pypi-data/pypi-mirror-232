import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, assign, create_component, mount_component, transition_in, transition_out, destroy_component, space, element, attr_dev, add_location, insert_dev, get_spread_update, get_spread_object, group_outros, check_outros, detach_dev, ensure_array_like_dev, empty, src_url_equal, toggle_class, append_dev, noop, destroy_each, text, set_style, listen_dev, set_data_dev, run_all } from '../../../node/dev/svelte-internal.js';
import { B as Block, n as normalise_file } from './Button-40a1e1cf.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { E as Empty } from './Empty-d9b102c4.js';
import { S as Static } from './index-bbf998f8.js';
import { I as Image } from './Image-ca58ca37.js';

const AnnotatedImage_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/annotatedimage/static/AnnotatedImage.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/annotatedimage/static/AnnotatedImage.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

// (83:2) {:else}
function create_else_block(ctx) {
	let div;
	let img;
	let img_src_value;
	let t0;
	let t1;
	let if_block_anchor;

	let each_value_1 = ensure_array_like_dev(/*_value*/ ctx[14]
	? /*_value*/ ctx[14]?.annotations
	: []);

	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*show_legend*/ ctx[6] && /*_value*/ ctx[14] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(img, "class", "base-image s-8MY3b4bvzdWs");

			if (!src_url_equal(img.src, img_src_value = /*_value*/ ctx[14]
			? /*_value*/ ctx[14].image.data
			: null)) attr_dev(img, "src", img_src_value);

			toggle_class(img, "fit-height", /*height*/ ctx[7]);
			add_location(img, file, 103, 4, 1964);
			attr_dev(div, "class", "image-container s-8MY3b4bvzdWs");
			add_location(div, file, 101, 3, 1880);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*_value*/ 16384 && !src_url_equal(img.src, img_src_value = /*_value*/ ctx[14]
			? /*_value*/ ctx[14].image.data
			: null)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*height*/ 128) {
				toggle_class(img, "fit-height", /*height*/ ctx[7]);
			}

			if (dirty[0] & /*_value, color_map, active*/ 49664) {
				each_value_1 = ensure_array_like_dev(/*_value*/ ctx[14]
				? /*_value*/ ctx[14]?.annotations
				: []);

				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*show_legend*/ ctx[6] && /*_value*/ ctx[14]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
				detach_dev(t1);
				detach_dev(if_block_anchor);
			}

			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(83:2) {:else}",
		ctx
	});

	return block;
}

// (81:2) {#if _value == null}
function create_if_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				size: "large",
				unpadded_box: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty[1] & /*$$scope*/ 2) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(81:2) {#if _value == null}",
		ctx
	});

	return block;
}

// (91:4) {#each _value ? _value?.annotations : [] as ann, i}
function create_each_block_1(ctx) {
	let img;
	let img_src_value;
	let img_style_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "mask fit-height s-8MY3b4bvzdWs");
			if (!src_url_equal(img.src, img_src_value = /*ann*/ ctx[28].image.data)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "style", img_style_value = /*color_map*/ ctx[9] && /*ann*/ ctx[28].label in /*color_map*/ ctx[9]
			? null
			: `filter: hue-rotate(${Math.round(/*i*/ ctx[30] * 360 / /*_value*/ ctx[14]?.annotations.length)}deg);`);

			toggle_class(img, "active", /*active*/ ctx[15] == /*ann*/ ctx[28].label);
			toggle_class(img, "inactive", /*active*/ ctx[15] != /*ann*/ ctx[28].label && /*active*/ ctx[15] != null);
			add_location(img, file, 110, 5, 2188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*_value*/ 16384 && !src_url_equal(img.src, img_src_value = /*ann*/ ctx[28].image.data)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*color_map, _value*/ 16896 && img_style_value !== (img_style_value = /*color_map*/ ctx[9] && /*ann*/ ctx[28].label in /*color_map*/ ctx[9]
			? null
			: `filter: hue-rotate(${Math.round(/*i*/ ctx[30] * 360 / /*_value*/ ctx[14]?.annotations.length)}deg);`)) {
				attr_dev(img, "style", img_style_value);
			}

			if (dirty[0] & /*active, _value*/ 49152) {
				toggle_class(img, "active", /*active*/ ctx[15] == /*ann*/ ctx[28].label);
			}

			if (dirty[0] & /*active, _value*/ 49152) {
				toggle_class(img, "inactive", /*active*/ ctx[15] != /*ann*/ ctx[28].label && /*active*/ ctx[15] != null);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(img);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(91:4) {#each _value ? _value?.annotations : [] as ann, i}",
		ctx
	});

	return block;
}

// (106:3) {#if show_legend && _value}
function create_if_block_1(ctx) {
	let div;
	let each_value = ensure_array_like_dev(/*_value*/ ctx[14].annotations);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "legend s-8MY3b4bvzdWs");
			add_location(div, file, 124, 4, 2590);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*color_map, _value, handle_mouseover, handle_mouseout, handle_click*/ 475648) {
				each_value = ensure_array_like_dev(/*_value*/ ctx[14].annotations);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(106:3) {#if show_legend && _value}",
		ctx
	});

	return block;
}

// (108:5) {#each _value.annotations as ann, i}
function create_each_block(ctx) {
	let div;
	let t0_value = /*ann*/ ctx[28].label + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function mouseover_handler() {
		return /*mouseover_handler*/ ctx[23](/*ann*/ ctx[28]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[24](/*ann*/ ctx[28]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[27](/*i*/ ctx[30], /*ann*/ ctx[28]);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "legend-item s-8MY3b4bvzdWs");

			set_style(div, "background-color", /*color_map*/ ctx[9] && /*ann*/ ctx[28].label in /*color_map*/ ctx[9]
			? /*color_map*/ ctx[9][/*ann*/ ctx[28].label] + '88'
			: `hsla(${Math.round(/*i*/ ctx[30] * 360 / /*_value*/ ctx[14].annotations.length)}, 100%, 50%, 0.3)`);

			add_location(div, file, 129, 6, 2812);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);

			if (!mounted) {
				dispose = [
					listen_dev(div, "mouseover", mouseover_handler, false, false, false, false),
					listen_dev(div, "focus", focus_handler, false, false, false, false),
					listen_dev(div, "mouseout", /*mouseout_handler*/ ctx[25], false, false, false, false),
					listen_dev(div, "blur", /*blur_handler*/ ctx[26], false, false, false, false),
					listen_dev(div, "click", click_handler, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*_value*/ 16384 && t0_value !== (t0_value = /*ann*/ ctx[28].label + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*color_map, _value*/ 16896) {
				set_style(div, "background-color", /*color_map*/ ctx[9] && /*ann*/ ctx[28].label in /*color_map*/ ctx[9]
				? /*color_map*/ ctx[9][/*ann*/ ctx[28].label] + '88'
				: `hsla(${Math.round(/*i*/ ctx[30] * 360 / /*_value*/ ctx[14].annotations.length)}, 100%, 50%, 0.3)`);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(108:5) {#each _value.annotations as ann, i}",
		ctx
	});

	return block;
}

// (82:3) <Empty size="large" unpadded_box={true}>
function create_default_slot_1(ctx) {
	let image;
	let current;
	image = new Image({ $$inline: true });

	const block = {
		c: function create() {
			create_component(image.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(image, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(image, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(82:3) <Empty size=\\\"large\\\" unpadded_box={true}>",
		ctx
	});

	return block;
}

// (57:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={false}  {height}  {width}  allow_overflow={false}  {container}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocklabel;
	let t1;
	let div;
	let current_block_type_index;
	let if_block;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[3].autoscroll },
		{ i18n: /*gradio*/ ctx[3].i18n },
		/*loading_status*/ ctx[13]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[5],
				Icon: Image,
				label: /*label*/ ctx[4] || /*gradio*/ ctx[3].i18n("image.image")
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*_value*/ ctx[14] == null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocklabel.$$.fragment);
			t1 = space();
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "container s-8MY3b4bvzdWs");
			add_location(div, file, 97, 1, 1759);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 8200)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 8 && { autoscroll: /*gradio*/ ctx[3].autoscroll },
					dirty[0] & /*gradio*/ 8 && { i18n: /*gradio*/ ctx[3].i18n },
					dirty[0] & /*loading_status*/ 8192 && get_spread_object(/*loading_status*/ ctx[13])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocklabel_changes = {};
			if (dirty[0] & /*show_label*/ 32) blocklabel_changes.show_label = /*show_label*/ ctx[5];
			if (dirty[0] & /*label, gradio*/ 24) blocklabel_changes.label = /*label*/ ctx[4] || /*gradio*/ ctx[3].i18n("image.image");
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(div);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocklabel, detaching);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(57:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={false}  {height}  {width}  allow_overflow={false}  {container}  {scale}  {min_width} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				padding: false,
				height: /*height*/ ctx[7],
				width: /*width*/ ctx[8],
				allow_overflow: false,
				container: /*container*/ ctx[10],
				scale: /*scale*/ ctx[11],
				min_width: /*min_width*/ ctx[12],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty[0] & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty[0] & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty[0] & /*height*/ 128) block_changes.height = /*height*/ ctx[7];
			if (dirty[0] & /*width*/ 256) block_changes.width = /*width*/ ctx[8];
			if (dirty[0] & /*container*/ 1024) block_changes.container = /*container*/ ctx[10];
			if (dirty[0] & /*scale*/ 2048) block_changes.scale = /*scale*/ ctx[11];
			if (dirty[0] & /*min_width*/ 4096) block_changes.min_width = /*min_width*/ ctx[12];

			if (dirty[0] & /*_value, color_map, show_legend, active, height, show_label, label, gradio, loading_status*/ 58104 | dirty[1] & /*$$scope*/ 2) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AnnotatedImage', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let old_value = null;
	let _value = null;
	let { gradio } = $$props;
	let { label = gradio.i18n("annotated_image.annotated_image") } = $$props;
	let { show_label = true } = $$props;
	let { show_legend = true } = $$props;
	let { height } = $$props;
	let { width } = $$props;
	let { color_map } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let active = null;
	let { loading_status } = $$props;

	function handle_mouseover(_label) {
		$$invalidate(15, active = _label);
	}

	function handle_mouseout() {
		$$invalidate(15, active = null);
	}

	function handle_click(i, value) {
		gradio.dispatch("select", { value, index: i });
	}

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'gradio'");
		}

		if (height === undefined && !('height' in $$props || $$self.$$.bound[$$self.$$.props['height']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'height'");
		}

		if (width === undefined && !('width' in $$props || $$self.$$.bound[$$self.$$.props['width']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'width'");
		}

		if (color_map === undefined && !('color_map' in $$props || $$self.$$.bound[$$self.$$.props['color_map']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'color_map'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'root_url'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<AnnotatedImage> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'gradio',
		'label',
		'show_label',
		'show_legend',
		'height',
		'width',
		'color_map',
		'container',
		'scale',
		'min_width',
		'root',
		'root_url',
		'loading_status'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnnotatedImage> was created with unknown prop '${key}'`);
	});

	const mouseover_handler = ann => handle_mouseover(ann.label);
	const focus_handler = ann => handle_mouseover(ann.label);
	const mouseout_handler = () => handle_mouseout();
	const blur_handler = () => handle_mouseout();
	const click_handler = (i, ann) => handle_click(i, ann.label);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(19, value = $$props.value);
		if ('gradio' in $$props) $$invalidate(3, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('show_legend' in $$props) $$invalidate(6, show_legend = $$props.show_legend);
		if ('height' in $$props) $$invalidate(7, height = $$props.height);
		if ('width' in $$props) $$invalidate(8, width = $$props.width);
		if ('color_map' in $$props) $$invalidate(9, color_map = $$props.color_map);
		if ('container' in $$props) $$invalidate(10, container = $$props.container);
		if ('scale' in $$props) $$invalidate(11, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(12, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(20, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(21, root_url = $$props.root_url);
		if ('loading_status' in $$props) $$invalidate(13, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		Block,
		BlockLabel,
		Empty,
		Image,
		StatusTracker: Static,
		normalise_file,
		elem_id,
		elem_classes,
		visible,
		value,
		old_value,
		_value,
		gradio,
		label,
		show_label,
		show_legend,
		height,
		width,
		color_map,
		container,
		scale,
		min_width,
		root,
		root_url,
		active,
		loading_status,
		handle_mouseover,
		handle_mouseout,
		handle_click
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(19, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(22, old_value = $$props.old_value);
		if ('_value' in $$props) $$invalidate(14, _value = $$props._value);
		if ('gradio' in $$props) $$invalidate(3, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('show_legend' in $$props) $$invalidate(6, show_legend = $$props.show_legend);
		if ('height' in $$props) $$invalidate(7, height = $$props.height);
		if ('width' in $$props) $$invalidate(8, width = $$props.width);
		if ('color_map' in $$props) $$invalidate(9, color_map = $$props.color_map);
		if ('container' in $$props) $$invalidate(10, container = $$props.container);
		if ('scale' in $$props) $$invalidate(11, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(12, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(20, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(21, root_url = $$props.root_url);
		if ('active' in $$props) $$invalidate(15, active = $$props.active);
		if ('loading_status' in $$props) $$invalidate(13, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, old_value, gradio, root, root_url*/ 7864328) {
			{
				if (value !== old_value) {
					$$invalidate(22, old_value = value);
					gradio.dispatch("change");
				}

				if (value !== null) {
					$$invalidate(14, _value = {
						image: normalise_file(value.image, root, root_url),
						annotations: value.annotations.map(ann => ({
							image: normalise_file(ann.image, root, root_url),
							label: ann.label
						}))
					});
				} else {
					$$invalidate(14, _value = null);
				}
			}
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		gradio,
		label,
		show_label,
		show_legend,
		height,
		width,
		color_map,
		container,
		scale,
		min_width,
		loading_status,
		_value,
		active,
		handle_mouseover,
		handle_mouseout,
		handle_click,
		value,
		root,
		root_url,
		old_value,
		mouseover_handler,
		focus_handler,
		mouseout_handler,
		blur_handler,
		click_handler
	];
}

class AnnotatedImage extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				elem_id: 0,
				elem_classes: 1,
				visible: 2,
				value: 19,
				gradio: 3,
				label: 4,
				show_label: 5,
				show_legend: 6,
				height: 7,
				width: 8,
				color_map: 9,
				container: 10,
				scale: 11,
				min_width: 12,
				root: 20,
				root_url: 21,
				loading_status: 13
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AnnotatedImage",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_legend() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_legend(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<AnnotatedImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<AnnotatedImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const AnnotatedImage$1 = AnnotatedImage;

export { AnnotatedImage$1 as default };
//# sourceMappingURL=index-0ea760b9.js.map
