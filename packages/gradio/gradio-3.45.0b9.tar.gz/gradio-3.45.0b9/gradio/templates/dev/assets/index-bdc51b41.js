import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, onMount, createEventDispatcher, tick, create_component, space, empty, mount_component, insert_dev, group_outros, transition_out, check_outros, transition_in, detach_dev, destroy_component, binding_callbacks, bind, create_slot, element, attr_dev, add_location, append_dev, add_flush_callback, update_slot_base, get_all_dirty_from_scope, get_slot_changes, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { B as Block, n as normalise_file } from './Button-40a1e1cf.js';
import { S as Static } from './index-bbf998f8.js';
import { U as UploadText } from './UploadText-8b60fa89.js';
import { U as Upload } from './Upload-648b9993.js';
import { M as ModifyUpload } from './ModifyUpload-2176b319.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { F as File } from './File-9ba21648.js';
import { b as babylonjs_loaders_minExports, c as add_new_model, r as reset_camera_position, B as BABYLON, d as BABYLON_LOADERS } from './babylonjs.loaders.min-5155cc12.js';
import './IconButton-33e572dc.js';
import './Undo-012722f8.js';

const Model3DUpload_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/model3D/interactive/Model3DUpload.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/model3D/interactive/Model3DUpload.svelte";

// (75:0) {:else}
function create_else_block(ctx) {
	let div;
	let modifyupload;
	let t;
	let canvas_1;
	let current;

	modifyupload = new ModifyUpload({
			props: {
				undoable: true,
				i18n: /*i18n*/ ctx[4],
				absolute: true
			},
			$$inline: true
		});

	modifyupload.$on("clear", /*handle_clear*/ ctx[8]);
	modifyupload.$on("undo", /*handle_undo*/ ctx[9]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(modifyupload.$$.fragment);
			t = space();
			canvas_1 = element("canvas");
			attr_dev(canvas_1, "class", "s-OeVoigrDFTtK");
			add_location(canvas_1, file, 115, 2, 2005);
			attr_dev(div, "class", "input-model s-OeVoigrDFTtK");
			add_location(div, file, 107, 1, 1870);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(modifyupload, div, null);
			append_dev(div, t);
			append_dev(div, canvas_1);
			/*canvas_1_binding*/ ctx[18](canvas_1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const modifyupload_changes = {};
			if (dirty & /*i18n*/ 16) modifyupload_changes.i18n = /*i18n*/ ctx[4];
			modifyupload.$set(modifyupload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modifyupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modifyupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(modifyupload);
			/*canvas_1_binding*/ ctx[18](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(75:0) {:else}",
		ctx
	});

	return block;
}

// (66:0) {#if value === null}
function create_if_block(ctx) {
	let upload;
	let updating_dragging;
	let current;

	function upload_dragging_binding(value) {
		/*upload_dragging_binding*/ ctx[17](value);
	}

	let upload_props = {
		root: /*root*/ ctx[3],
		filetype: ".obj, .gltf, .glb",
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	if (/*dragging*/ ctx[6] !== void 0) {
		upload_props.dragging = /*dragging*/ ctx[6];
	}

	upload = new Upload({ props: upload_props, $$inline: true });
	binding_callbacks.push(() => bind(upload, 'dragging', upload_dragging_binding));
	upload.$on("load", /*handle_upload*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(upload.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(upload, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const upload_changes = {};
			if (dirty & /*root*/ 8) upload_changes.root = /*root*/ ctx[3];

			if (dirty & /*$$scope*/ 524288) {
				upload_changes.$$scope = { dirty, ctx };
			}

			if (!updating_dragging && dirty & /*dragging*/ 64) {
				updating_dragging = true;
				upload_changes.dragging = /*dragging*/ ctx[6];
				add_flush_callback(() => updating_dragging = false);
			}

			upload.$set(upload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(upload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(upload, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(66:0) {#if value === null}",
		ctx
	});

	return block;
}

// (67:1) <Upload   on:load={handle_upload}   {root}   filetype=".obj, .gltf, .glb"   bind:dragging  >
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(67:1) <Upload   on:load={handle_upload}   {root}   filetype=\\\".obj, .gltf, .glb\\\"   bind:dragging  >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[2],
				Icon: File,
				label: /*label*/ ctx[1] || "3D Model"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 4) blocklabel_changes.show_label = /*show_label*/ ctx[2];
			if (dirty & /*label*/ 2) blocklabel_changes.label = /*label*/ ctx[1] || "3D Model";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let data;
	let is_file;
	let name;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Model3DUpload', slots, ['default']);
	let { value } = $$props;
	let { clear_color = [0, 0, 0, 0] } = $$props;
	let { label = "" } = $$props;
	let { show_label } = $$props;
	let { root } = $$props;
	let { i18n } = $$props;
	let { zoom_speed = 1 } = $$props;
	let { camera_position = [null, null, null] } = $$props;
	let mounted = false;
	let canvas;
	let scene;
	let engine;

	function reset_scene() {
		scene = add_new_model(canvas, scene, engine, value, clear_color, camera_position, zoom_speed);
	}

	onMount(() => {
		if (value != null) {
			reset_scene();
		}

		$$invalidate(13, mounted = true);
	});

	async function handle_upload({ detail }) {
		$$invalidate(0, value = detail);
		await tick();
		reset_scene();
		dispatch("change", value);
	}

	async function handle_clear() {
		if (scene && engine) {
			scene.dispose();
			engine.dispose();
		}

		$$invalidate(0, value = null);
		await tick();
		dispatch("clear");
	}

	async function handle_undo() {
		reset_camera_position(scene, camera_position, zoom_speed);
	}

	const dispatch = createEventDispatcher();
	let dragging = false;
	babylonjs_loaders_minExports.OBJFileLoader.IMPORT_VERTEX_COLORS = true;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Model3DUpload> was created without expected prop 'value'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<Model3DUpload> was created without expected prop 'show_label'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Model3DUpload> was created without expected prop 'root'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<Model3DUpload> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'value',
		'clear_color',
		'label',
		'show_label',
		'root',
		'i18n',
		'zoom_speed',
		'camera_position'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Model3DUpload> was created with unknown prop '${key}'`);
	});

	function upload_dragging_binding(value) {
		dragging = value;
		$$invalidate(6, dragging);
	}

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(5, canvas);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('clear_color' in $$props) $$invalidate(10, clear_color = $$props.clear_color);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('i18n' in $$props) $$invalidate(4, i18n = $$props.i18n);
		if ('zoom_speed' in $$props) $$invalidate(11, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(12, camera_position = $$props.camera_position);
		if ('$$scope' in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick,
		onMount,
		Upload,
		ModifyUpload,
		BlockLabel,
		File,
		add_new_model,
		reset_camera_position,
		value,
		clear_color,
		label,
		show_label,
		root,
		i18n,
		zoom_speed,
		camera_position,
		mounted,
		canvas,
		scene,
		engine,
		reset_scene,
		handle_upload,
		handle_clear,
		handle_undo,
		dispatch,
		dragging,
		BABYLON,
		BABYLON_LOADERS,
		is_file,
		data,
		name
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('clear_color' in $$props) $$invalidate(10, clear_color = $$props.clear_color);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('i18n' in $$props) $$invalidate(4, i18n = $$props.i18n);
		if ('zoom_speed' in $$props) $$invalidate(11, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(12, camera_position = $$props.camera_position);
		if ('mounted' in $$props) $$invalidate(13, mounted = $$props.mounted);
		if ('canvas' in $$props) $$invalidate(5, canvas = $$props.canvas);
		if ('scene' in $$props) scene = $$props.scene;
		if ('engine' in $$props) engine = $$props.engine;
		if ('dragging' in $$props) $$invalidate(6, dragging = $$props.dragging);
		if ('is_file' in $$props) $$invalidate(14, is_file = $$props.is_file);
		if ('data' in $$props) $$invalidate(15, data = $$props.data);
		if ('name' in $$props) name = $$props.name;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$$invalidate(
				15,
				{ data, is_file, name } = value || {
					data: undefined,
					is_file: undefined,
					name: undefined
				},
				data,
				($$invalidate(14, is_file), $$invalidate(0, value))
			);
		}

		if ($$self.$$.dirty & /*canvas, mounted, data, is_file*/ 57376) {
			canvas && mounted && data != null && is_file && reset_scene();
		}

		if ($$self.$$.dirty & /*dragging*/ 64) {
			dispatch("drag", dragging);
		}
	};

	return [
		value,
		label,
		show_label,
		root,
		i18n,
		canvas,
		dragging,
		handle_upload,
		handle_clear,
		handle_undo,
		clear_color,
		zoom_speed,
		camera_position,
		mounted,
		is_file,
		data,
		slots,
		upload_dragging_binding,
		canvas_1_binding,
		$$scope
	];
}

class Model3DUpload extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			clear_color: 10,
			label: 1,
			show_label: 2,
			root: 3,
			i18n: 4,
			zoom_speed: 11,
			camera_position: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Model3DUpload",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clear_color() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clear_color(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom_speed() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom_speed(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get camera_position() {
		throw new Error("<Model3DUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set camera_position(value) {
		throw new Error("<Model3DUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/model3D/interactive/InteractiveModel3d.svelte generated by Svelte v4.0.0 */

// (50:1) <Model3DUpload   {label}   {show_label}   {root}   {clear_color}   value={_value}   {camera_position}   {zoom_speed}   on:change={({ detail }) => (value = detail)}   on:drag={({ detail }) => (dragging = detail)}   on:change={({ detail }) => gradio.dispatch("change", detail)}   on:clear={() => gradio.dispatch("clear")}   i18n={gradio.i18n}  >
function create_default_slot_1(ctx) {
	let uploadtext;
	let current;

	uploadtext = new UploadText({
			props: {
				i18n: /*gradio*/ ctx[12].i18n,
				type: "file"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(uploadtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(uploadtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const uploadtext_changes = {};
			if (dirty & /*gradio*/ 4096) uploadtext_changes.i18n = /*gradio*/ ctx[12].i18n;
			uploadtext.$set(uploadtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(uploadtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(uploadtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(uploadtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(50:1) <Model3DUpload   {label}   {show_label}   {root}   {clear_color}   value={_value}   {camera_position}   {zoom_speed}   on:change={({ detail }) => (value = detail)}   on:drag={({ detail }) => (dragging = detail)}   on:change={({ detail }) => gradio.dispatch(\\\"change\\\", detail)}   on:clear={() => gradio.dispatch(\\\"clear\\\")}   i18n={gradio.i18n}  >",
		ctx
	});

	return block;
}

// (32:0) <Block  {visible}  variant={value === null ? "dashed" : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  {height} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let model3dupload;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[12].autoscroll
		},
		{ i18n: /*gradio*/ ctx[12].i18n },
		/*loading_status*/ ctx[6]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	model3dupload = new Model3DUpload({
			props: {
				label: /*label*/ ctx[7],
				show_label: /*show_label*/ ctx[8],
				root: /*root*/ ctx[4],
				clear_color: /*clear_color*/ ctx[5],
				value: /*_value*/ ctx[16],
				camera_position: /*camera_position*/ ctx[15],
				zoom_speed: /*zoom_speed*/ ctx[13],
				i18n: /*gradio*/ ctx[12].i18n,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	model3dupload.$on("change", /*change_handler*/ ctx[19]);
	model3dupload.$on("drag", /*drag_handler*/ ctx[20]);
	model3dupload.$on("change", /*change_handler_1*/ ctx[21]);
	model3dupload.$on("clear", /*clear_handler*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(model3dupload.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(model3dupload, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 4160)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4096 && {
						autoscroll: /*gradio*/ ctx[12].autoscroll
					},
					dirty & /*gradio*/ 4096 && { i18n: /*gradio*/ ctx[12].i18n },
					dirty & /*loading_status*/ 64 && get_spread_object(/*loading_status*/ ctx[6])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const model3dupload_changes = {};
			if (dirty & /*label*/ 128) model3dupload_changes.label = /*label*/ ctx[7];
			if (dirty & /*show_label*/ 256) model3dupload_changes.show_label = /*show_label*/ ctx[8];
			if (dirty & /*root*/ 16) model3dupload_changes.root = /*root*/ ctx[4];
			if (dirty & /*clear_color*/ 32) model3dupload_changes.clear_color = /*clear_color*/ ctx[5];
			if (dirty & /*_value*/ 65536) model3dupload_changes.value = /*_value*/ ctx[16];
			if (dirty & /*camera_position*/ 32768) model3dupload_changes.camera_position = /*camera_position*/ ctx[15];
			if (dirty & /*zoom_speed*/ 8192) model3dupload_changes.zoom_speed = /*zoom_speed*/ ctx[13];
			if (dirty & /*gradio*/ 4096) model3dupload_changes.i18n = /*gradio*/ ctx[12].i18n;

			if (dirty & /*$$scope, gradio*/ 8392704) {
				model3dupload_changes.$$scope = { dirty, ctx };
			}

			model3dupload.$set(model3dupload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(model3dupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(model3dupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(model3dupload, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(32:0) <Block  {visible}  variant={value === null ? \\\"dashed\\\" : \\\"solid\\\"}  border_mode={dragging ? \\\"focus\\\" : \\\"base\\\"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  {height} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[3],
				variant: /*value*/ ctx[0] === null ? "dashed" : "solid",
				border_mode: /*dragging*/ ctx[17] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				container: /*container*/ ctx[9],
				scale: /*scale*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				height: /*height*/ ctx[14],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*value*/ 1) block_changes.variant = /*value*/ ctx[0] === null ? "dashed" : "solid";
			if (dirty & /*dragging*/ 131072) block_changes.border_mode = /*dragging*/ ctx[17] ? "focus" : "base";
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*container*/ 512) block_changes.container = /*container*/ ctx[9];
			if (dirty & /*scale*/ 1024) block_changes.scale = /*scale*/ ctx[10];
			if (dirty & /*min_width*/ 2048) block_changes.min_width = /*min_width*/ ctx[11];
			if (dirty & /*height*/ 16384) block_changes.height = /*height*/ ctx[14];

			if (dirty & /*$$scope, label, show_label, root, clear_color, _value, camera_position, zoom_speed, gradio, value, dragging, loading_status*/ 8630769) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveModel3d', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let { clear_color } = $$props;
	let { loading_status } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let { zoom_speed = 1 } = $$props;
	let { height = undefined } = $$props;
	let { camera_position = [null, null, null] } = $$props;
	let _value;
	let dragging = false;

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'root_url'");
		}

		if (clear_color === undefined && !('clear_color' in $$props || $$self.$$.bound[$$self.$$.props['clear_color']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'clear_color'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'loading_status'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'label'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'show_label'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveModel3d> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'root',
		'root_url',
		'clear_color',
		'loading_status',
		'label',
		'show_label',
		'container',
		'scale',
		'min_width',
		'gradio',
		'zoom_speed',
		'height',
		'camera_position'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveModel3d> was created with unknown prop '${key}'`);
	});

	const change_handler = ({ detail }) => $$invalidate(0, value = detail);
	const drag_handler = ({ detail }) => $$invalidate(17, dragging = detail);
	const change_handler_1 = ({ detail }) => gradio.dispatch("change", detail);
	const clear_handler = () => gradio.dispatch("clear");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('root' in $$props) $$invalidate(4, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('clear_color' in $$props) $$invalidate(5, clear_color = $$props.clear_color);
		if ('loading_status' in $$props) $$invalidate(6, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(12, gradio = $$props.gradio);
		if ('zoom_speed' in $$props) $$invalidate(13, zoom_speed = $$props.zoom_speed);
		if ('height' in $$props) $$invalidate(14, height = $$props.height);
		if ('camera_position' in $$props) $$invalidate(15, camera_position = $$props.camera_position);
	};

	$$self.$capture_state = () => ({
		normalise_file,
		Model3DUpload,
		Block,
		UploadText,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		root,
		root_url,
		clear_color,
		loading_status,
		label,
		show_label,
		container,
		scale,
		min_width,
		gradio,
		zoom_speed,
		height,
		camera_position,
		_value,
		dragging
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('root' in $$props) $$invalidate(4, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('clear_color' in $$props) $$invalidate(5, clear_color = $$props.clear_color);
		if ('loading_status' in $$props) $$invalidate(6, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(12, gradio = $$props.gradio);
		if ('zoom_speed' in $$props) $$invalidate(13, zoom_speed = $$props.zoom_speed);
		if ('height' in $$props) $$invalidate(14, height = $$props.height);
		if ('camera_position' in $$props) $$invalidate(15, camera_position = $$props.camera_position);
		if ('_value' in $$props) $$invalidate(16, _value = $$props._value);
		if ('dragging' in $$props) $$invalidate(17, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, root, root_url*/ 262161) {
			$$invalidate(16, _value = normalise_file(value, root, root_url));
		}
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		root,
		clear_color,
		loading_status,
		label,
		show_label,
		container,
		scale,
		min_width,
		gradio,
		zoom_speed,
		height,
		camera_position,
		_value,
		dragging,
		root_url,
		change_handler,
		drag_handler,
		change_handler_1,
		clear_handler
	];
}

class InteractiveModel3d extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			value: 0,
			root: 4,
			root_url: 18,
			clear_color: 5,
			loading_status: 6,
			label: 7,
			show_label: 8,
			container: 9,
			scale: 10,
			min_width: 11,
			gradio: 12,
			zoom_speed: 13,
			height: 14,
			camera_position: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveModel3d",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clear_color() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clear_color(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom_speed() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom_speed(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get camera_position() {
		throw new Error("<InteractiveModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set camera_position(value) {
		throw new Error("<InteractiveModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const InteractiveModel3d$1 = InteractiveModel3d;

export { InteractiveModel3d$1 as default };
//# sourceMappingURL=index-bdc51b41.js.map
