import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, attr_dev, null_to_empty, toggle_class, add_location, insert_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev } from '../../../node/dev/svelte-internal.js';

const StaticRow_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/row/static/StaticRow.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/row/static/StaticRow.svelte";

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "id", /*elem_id*/ ctx[1]);
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*elem_classes*/ ctx[2].join(" ")) + " s-GK3BM4IiEd7I"));
			toggle_class(div, "compact", /*variant*/ ctx[4] === "compact");
			toggle_class(div, "panel", /*variant*/ ctx[4] === "panel");
			toggle_class(div, "unequal-height", /*equal_height*/ ctx[0] === false);
			toggle_class(div, "stretch", /*equal_height*/ ctx[0]);
			toggle_class(div, "hide", !/*visible*/ ctx[3]);
			add_location(div, file, 8, 0, 170);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*elem_id*/ 2) {
				attr_dev(div, "id", /*elem_id*/ ctx[1]);
			}

			if (!current || dirty & /*elem_classes*/ 4 && div_class_value !== (div_class_value = "" + (null_to_empty(/*elem_classes*/ ctx[2].join(" ")) + " s-GK3BM4IiEd7I"))) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*elem_classes, variant*/ 20) {
				toggle_class(div, "compact", /*variant*/ ctx[4] === "compact");
			}

			if (!current || dirty & /*elem_classes, variant*/ 20) {
				toggle_class(div, "panel", /*variant*/ ctx[4] === "panel");
			}

			if (!current || dirty & /*elem_classes, equal_height*/ 5) {
				toggle_class(div, "unequal-height", /*equal_height*/ ctx[0] === false);
			}

			if (!current || dirty & /*elem_classes, equal_height*/ 5) {
				toggle_class(div, "stretch", /*equal_height*/ ctx[0]);
			}

			if (!current || dirty & /*elem_classes, visible*/ 12) {
				toggle_class(div, "hide", !/*visible*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticRow', slots, ['default']);
	let { equal_height = true } = $$props;
	let { elem_id } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { variant = "default" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (elem_id === undefined && !('elem_id' in $$props || $$self.$$.bound[$$self.$$.props['elem_id']])) {
			console.warn("<StaticRow> was created without expected prop 'elem_id'");
		}
	});

	const writable_props = ['equal_height', 'elem_id', 'elem_classes', 'visible', 'variant'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticRow> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('equal_height' in $$props) $$invalidate(0, equal_height = $$props.equal_height);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		equal_height,
		elem_id,
		elem_classes,
		visible,
		variant
	});

	$$self.$inject_state = $$props => {
		if ('equal_height' in $$props) $$invalidate(0, equal_height = $$props.equal_height);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [equal_height, elem_id, elem_classes, visible, variant, $$scope, slots];
}

class StaticRow extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			equal_height: 0,
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			variant: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticRow",
			options,
			id: create_fragment.name
		});
	}

	get equal_height() {
		throw new Error("<StaticRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set equal_height(value) {
		throw new Error("<StaticRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<StaticRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<StaticRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticRow$1 = StaticRow;

export { StaticRow$1 as default };
//# sourceMappingURL=index-2fd456ca.js.map
