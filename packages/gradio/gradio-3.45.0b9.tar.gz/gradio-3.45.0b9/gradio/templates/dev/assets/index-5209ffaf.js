import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, assign, create_component, mount_component, transition_in, transition_out, destroy_component, space, empty, insert_dev, get_spread_update, get_spread_object, group_outros, check_outros, detach_dev, binding_callbacks, bind, add_flush_callback } from '../../../node/dev/svelte-internal.js';
import { D as Dropdown, M as Multiselect } from './Multiselect-47e66e1c.js';
import { B as Block } from './Button-40a1e1cf.js';
import { S as Static } from './index-bbf998f8.js';
import './BlockTitle-6a532e37.js';

/* home/runner/work/gradio/gradio/js/dropdown/interactive/InteractiveDropdown.svelte generated by Svelte v4.0.0 */

// (58:1) {:else}
function create_else_block(ctx) {
	let dropdown;
	let updating_value;
	let updating_value_is_output;
	let current;

	function dropdown_value_binding(value) {
		/*dropdown_value_binding*/ ctx[26](value);
	}

	function dropdown_value_is_output_binding(value) {
		/*dropdown_value_is_output_binding*/ ctx[27](value);
	}

	let dropdown_props = {
		choices: /*choices*/ ctx[10],
		label: /*label*/ ctx[3],
		info: /*info*/ ctx[4],
		show_label: /*show_label*/ ctx[11],
		allow_custom_value: /*allow_custom_value*/ ctx[17],
		container: /*container*/ ctx[13],
		filterable: /*filterable*/ ctx[12],
		i18n: /*i18n*/ ctx[18]
	};

	if (/*value*/ ctx[0] !== void 0) {
		dropdown_props.value = /*value*/ ctx[0];
	}

	if (/*value_is_output*/ ctx[1] !== void 0) {
		dropdown_props.value_is_output = /*value_is_output*/ ctx[1];
	}

	dropdown = new Dropdown({ props: dropdown_props, $$inline: true });
	binding_callbacks.push(() => bind(dropdown, 'value', dropdown_value_binding));
	binding_callbacks.push(() => bind(dropdown, 'value_is_output', dropdown_value_is_output_binding));
	dropdown.$on("change", /*change_handler_1*/ ctx[28]);
	dropdown.$on("input", /*input_handler_1*/ ctx[29]);
	dropdown.$on("select", /*select_handler_1*/ ctx[30]);
	dropdown.$on("blur", /*blur_handler_1*/ ctx[31]);
	dropdown.$on("focus", /*focus_handler_1*/ ctx[32]);

	const block = {
		c: function create() {
			create_component(dropdown.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(dropdown, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dropdown_changes = {};
			if (dirty[0] & /*choices*/ 1024) dropdown_changes.choices = /*choices*/ ctx[10];
			if (dirty[0] & /*label*/ 8) dropdown_changes.label = /*label*/ ctx[3];
			if (dirty[0] & /*info*/ 16) dropdown_changes.info = /*info*/ ctx[4];
			if (dirty[0] & /*show_label*/ 2048) dropdown_changes.show_label = /*show_label*/ ctx[11];
			if (dirty[0] & /*allow_custom_value*/ 131072) dropdown_changes.allow_custom_value = /*allow_custom_value*/ ctx[17];
			if (dirty[0] & /*container*/ 8192) dropdown_changes.container = /*container*/ ctx[13];
			if (dirty[0] & /*filterable*/ 4096) dropdown_changes.filterable = /*filterable*/ ctx[12];
			if (dirty[0] & /*i18n*/ 262144) dropdown_changes.i18n = /*i18n*/ ctx[18];

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				dropdown_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_value_is_output && dirty[0] & /*value_is_output*/ 2) {
				updating_value_is_output = true;
				dropdown_changes.value_is_output = /*value_is_output*/ ctx[1];
				add_flush_callback(() => updating_value_is_output = false);
			}

			dropdown.$set(dropdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dropdown, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(58:1) {:else}",
		ctx
	});

	return block;
}

// (40:1) {#if multiselect}
function create_if_block(ctx) {
	let multiselect_1;
	let updating_value;
	let updating_value_is_output;
	let current;

	function multiselect_1_value_binding(value) {
		/*multiselect_1_value_binding*/ ctx[19](value);
	}

	function multiselect_1_value_is_output_binding(value) {
		/*multiselect_1_value_is_output_binding*/ ctx[20](value);
	}

	let multiselect_1_props = {
		choices: /*choices*/ ctx[10],
		max_choices: /*max_choices*/ ctx[9],
		label: /*label*/ ctx[3],
		info: /*info*/ ctx[4],
		show_label: /*show_label*/ ctx[11],
		allow_custom_value: /*allow_custom_value*/ ctx[17],
		container: /*container*/ ctx[13],
		filterable: /*filterable*/ ctx[12]
	};

	if (/*value*/ ctx[0] !== void 0) {
		multiselect_1_props.value = /*value*/ ctx[0];
	}

	if (/*value_is_output*/ ctx[1] !== void 0) {
		multiselect_1_props.value_is_output = /*value_is_output*/ ctx[1];
	}

	multiselect_1 = new Multiselect({
			props: multiselect_1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(multiselect_1, 'value', multiselect_1_value_binding));
	binding_callbacks.push(() => bind(multiselect_1, 'value_is_output', multiselect_1_value_is_output_binding));
	multiselect_1.$on("change", /*change_handler*/ ctx[21]);
	multiselect_1.$on("input", /*input_handler*/ ctx[22]);
	multiselect_1.$on("select", /*select_handler*/ ctx[23]);
	multiselect_1.$on("blur", /*blur_handler*/ ctx[24]);
	multiselect_1.$on("focus", /*focus_handler*/ ctx[25]);

	const block = {
		c: function create() {
			create_component(multiselect_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(multiselect_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const multiselect_1_changes = {};
			if (dirty[0] & /*choices*/ 1024) multiselect_1_changes.choices = /*choices*/ ctx[10];
			if (dirty[0] & /*max_choices*/ 512) multiselect_1_changes.max_choices = /*max_choices*/ ctx[9];
			if (dirty[0] & /*label*/ 8) multiselect_1_changes.label = /*label*/ ctx[3];
			if (dirty[0] & /*info*/ 16) multiselect_1_changes.info = /*info*/ ctx[4];
			if (dirty[0] & /*show_label*/ 2048) multiselect_1_changes.show_label = /*show_label*/ ctx[11];
			if (dirty[0] & /*allow_custom_value*/ 131072) multiselect_1_changes.allow_custom_value = /*allow_custom_value*/ ctx[17];
			if (dirty[0] & /*container*/ 8192) multiselect_1_changes.container = /*container*/ ctx[13];
			if (dirty[0] & /*filterable*/ 4096) multiselect_1_changes.filterable = /*filterable*/ ctx[12];

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				multiselect_1_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_value_is_output && dirty[0] & /*value_is_output*/ 2) {
				updating_value_is_output = true;
				multiselect_1_changes.value_is_output = /*value_is_output*/ ctx[1];
				add_flush_callback(() => updating_value_is_output = false);
			}

			multiselect_1.$set(multiselect_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(multiselect_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(multiselect_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(multiselect_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(40:1) {#if multiselect}",
		ctx
	});

	return block;
}

// (25:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={container}  allow_overflow={false}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[2].autoscroll },
		{ i18n: /*gradio*/ ctx[2].i18n },
		/*loading_status*/ ctx[16]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*multiselect*/ ctx[8]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 65540)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 4 && { autoscroll: /*gradio*/ ctx[2].autoscroll },
					dirty[0] & /*gradio*/ 4 && { i18n: /*gradio*/ ctx[2].i18n },
					dirty[0] & /*loading_status*/ 65536 && get_spread_object(/*loading_status*/ ctx[16])
				])
			: {};

			statustracker.$set(statustracker_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(statustracker, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(25:0) <Block  {visible}  {elem_id}  {elem_classes}  padding={container}  allow_overflow={false}  {scale}  {min_width} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[7],
				elem_id: /*elem_id*/ ctx[5],
				elem_classes: /*elem_classes*/ ctx[6],
				padding: /*container*/ ctx[13],
				allow_overflow: false,
				scale: /*scale*/ ctx[14],
				min_width: /*min_width*/ ctx[15],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 128) block_changes.visible = /*visible*/ ctx[7];
			if (dirty[0] & /*elem_id*/ 32) block_changes.elem_id = /*elem_id*/ ctx[5];
			if (dirty[0] & /*elem_classes*/ 64) block_changes.elem_classes = /*elem_classes*/ ctx[6];
			if (dirty[0] & /*container*/ 8192) block_changes.padding = /*container*/ ctx[13];
			if (dirty[0] & /*scale*/ 16384) block_changes.scale = /*scale*/ ctx[14];
			if (dirty[0] & /*min_width*/ 32768) block_changes.min_width = /*min_width*/ ctx[15];

			if (dirty[0] & /*choices, max_choices, label, info, show_label, allow_custom_value, container, filterable, value, value_is_output, gradio, multiselect, i18n, loading_status*/ 474911 | dirty[1] & /*$$scope*/ 4) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveDropdown', slots, []);
	let { gradio } = $$props;
	let { label = gradio.i18n("dropdown.dropdown") } = $$props;
	let { info = undefined } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let { value_is_output = false } = $$props;
	let { multiselect = false } = $$props;
	let { max_choices = null } = $$props;
	let { choices } = $$props;
	let { show_label } = $$props;
	let { filterable } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { allow_custom_value = false } = $$props;
	let { i18n } = $$props;

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'gradio'");
		}

		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'value'");
		}

		if (choices === undefined && !('choices' in $$props || $$self.$$.bound[$$self.$$.props['choices']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'choices'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'show_label'");
		}

		if (filterable === undefined && !('filterable' in $$props || $$self.$$.bound[$$self.$$.props['filterable']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'filterable'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'loading_status'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<InteractiveDropdown> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'gradio',
		'label',
		'info',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'value_is_output',
		'multiselect',
		'max_choices',
		'choices',
		'show_label',
		'filterable',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'allow_custom_value',
		'i18n'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveDropdown> was created with unknown prop '${key}'`);
	});

	function multiselect_1_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function multiselect_1_value_is_output_binding(value) {
		value_is_output = value;
		$$invalidate(1, value_is_output);
	}

	const change_handler = () => gradio.dispatch("change");
	const input_handler = () => gradio.dispatch("input");
	const select_handler = e => gradio.dispatch("select", e.detail);
	const blur_handler = () => gradio.dispatch("blur");
	const focus_handler = () => gradio.dispatch("focus");

	function dropdown_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function dropdown_value_is_output_binding(value) {
		value_is_output = value;
		$$invalidate(1, value_is_output);
	}

	const change_handler_1 = () => gradio.dispatch("change");
	const input_handler_1 = () => gradio.dispatch("input");
	const select_handler_1 = e => gradio.dispatch("select", e.detail);
	const blur_handler_1 = () => gradio.dispatch("blur");
	const focus_handler_1 = () => gradio.dispatch("focus");

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('multiselect' in $$props) $$invalidate(8, multiselect = $$props.multiselect);
		if ('max_choices' in $$props) $$invalidate(9, max_choices = $$props.max_choices);
		if ('choices' in $$props) $$invalidate(10, choices = $$props.choices);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('filterable' in $$props) $$invalidate(12, filterable = $$props.filterable);
		if ('container' in $$props) $$invalidate(13, container = $$props.container);
		if ('scale' in $$props) $$invalidate(14, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(15, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(16, loading_status = $$props.loading_status);
		if ('allow_custom_value' in $$props) $$invalidate(17, allow_custom_value = $$props.allow_custom_value);
		if ('i18n' in $$props) $$invalidate(18, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		Dropdown,
		Multiselect,
		Block,
		StatusTracker: Static,
		gradio,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		value,
		value_is_output,
		multiselect,
		max_choices,
		choices,
		show_label,
		filterable,
		container,
		scale,
		min_width,
		loading_status,
		allow_custom_value,
		i18n
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('multiselect' in $$props) $$invalidate(8, multiselect = $$props.multiselect);
		if ('max_choices' in $$props) $$invalidate(9, max_choices = $$props.max_choices);
		if ('choices' in $$props) $$invalidate(10, choices = $$props.choices);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('filterable' in $$props) $$invalidate(12, filterable = $$props.filterable);
		if ('container' in $$props) $$invalidate(13, container = $$props.container);
		if ('scale' in $$props) $$invalidate(14, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(15, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(16, loading_status = $$props.loading_status);
		if ('allow_custom_value' in $$props) $$invalidate(17, allow_custom_value = $$props.allow_custom_value);
		if ('i18n' in $$props) $$invalidate(18, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		value_is_output,
		gradio,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		multiselect,
		max_choices,
		choices,
		show_label,
		filterable,
		container,
		scale,
		min_width,
		loading_status,
		allow_custom_value,
		i18n,
		multiselect_1_value_binding,
		multiselect_1_value_is_output_binding,
		change_handler,
		input_handler,
		select_handler,
		blur_handler,
		focus_handler,
		dropdown_value_binding,
		dropdown_value_is_output_binding,
		change_handler_1,
		input_handler_1,
		select_handler_1,
		blur_handler_1,
		focus_handler_1
	];
}

class InteractiveDropdown extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				gradio: 2,
				label: 3,
				info: 4,
				elem_id: 5,
				elem_classes: 6,
				visible: 7,
				value: 0,
				value_is_output: 1,
				multiselect: 8,
				max_choices: 9,
				choices: 10,
				show_label: 11,
				filterable: 12,
				container: 13,
				scale: 14,
				min_width: 15,
				loading_status: 16,
				allow_custom_value: 17,
				i18n: 18
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveDropdown",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get info() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set info(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiselect() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiselect(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max_choices() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max_choices(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get choices() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set choices(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get filterable() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set filterable(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get allow_custom_value() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allow_custom_value(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<InteractiveDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<InteractiveDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const InteractiveDropdown$1 = InteractiveDropdown;

export { InteractiveDropdown$1 as default };
//# sourceMappingURL=index-5209ffaf.js.map
