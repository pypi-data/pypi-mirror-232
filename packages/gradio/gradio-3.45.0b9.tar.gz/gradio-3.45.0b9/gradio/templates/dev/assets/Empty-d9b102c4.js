import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, attr_dev, add_location, toggle_class, insert_dev, append_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev, binding_callbacks } from '../../../node/dev/svelte-internal.js';
import './Button-40a1e1cf.js';

/* home/runner/work/gradio/gradio/js/atoms/src/Empty.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/atoms/src/Empty.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "icon s-gvulm_BvhUxq");
			add_location(div0, file, 26, 1, 584);
			attr_dev(div1, "class", "empty s-gvulm_BvhUxq");
			toggle_class(div1, "small", /*size*/ ctx[0] === "small");
			toggle_class(div1, "large", /*size*/ ctx[0] === "large");
			toggle_class(div1, "unpadded_box", /*unpadded_box*/ ctx[1]);
			toggle_class(div1, "small_parent", /*parent_height*/ ctx[3]);
			add_location(div1, file, 18, 0, 425);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[6](div1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*size*/ 1) {
				toggle_class(div1, "small", /*size*/ ctx[0] === "small");
			}

			if (!current || dirty & /*size*/ 1) {
				toggle_class(div1, "large", /*size*/ ctx[0] === "large");
			}

			if (!current || dirty & /*unpadded_box*/ 2) {
				toggle_class(div1, "unpadded_box", /*unpadded_box*/ ctx[1]);
			}

			if (!current || dirty & /*parent_height*/ 8) {
				toggle_class(div1, "small_parent", /*parent_height*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let parent_height;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Empty', slots, ['default']);
	let { size = "small" } = $$props;
	let { unpadded_box = false } = $$props;
	let el;

	function compare_el_to_parent(el) {
		if (!el) return false;
		const { height: el_height } = el.getBoundingClientRect();
		const { height: parent_height } = el.parentElement?.getBoundingClientRect() || { height: el_height };
		return el_height > parent_height + 2;
	}

	const writable_props = ['size', 'unpadded_box'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Empty> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$props => {
		if ('size' in $$props) $$invalidate(0, size = $$props.size);
		if ('unpadded_box' in $$props) $$invalidate(1, unpadded_box = $$props.unpadded_box);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		size,
		unpadded_box,
		el,
		compare_el_to_parent,
		parent_height
	});

	$$self.$inject_state = $$props => {
		if ('size' in $$props) $$invalidate(0, size = $$props.size);
		if ('unpadded_box' in $$props) $$invalidate(1, unpadded_box = $$props.unpadded_box);
		if ('el' in $$props) $$invalidate(2, el = $$props.el);
		if ('parent_height' in $$props) $$invalidate(3, parent_height = $$props.parent_height);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*el*/ 4) {
			$$invalidate(3, parent_height = compare_el_to_parent(el));
		}
	};

	return [size, unpadded_box, el, parent_height, $$scope, slots, div1_binding];
}

class Empty extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { size: 0, unpadded_box: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Empty",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<Empty>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Empty>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get unpadded_box() {
		throw new Error("<Empty>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set unpadded_box(value) {
		throw new Error("<Empty>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Empty as E };
//# sourceMappingURL=Empty-d9b102c4.js.map
