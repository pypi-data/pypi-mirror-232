import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, attr_dev, toggle_class, set_style, add_location, insert_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev } from '../../../node/dev/svelte-internal.js';

const StaticForm_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/form/static/StaticForm.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/form/static/StaticForm.svelte";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", "form s-8Q2Wsdr3v_2B");
			toggle_class(div, "hidden", !/*visible*/ ctx[0]);
			set_style(div, "flex-grow", /*scale*/ ctx[1]);
			set_style(div, "min-width", `calc(min(${/*min_width*/ ctx[2]}px, 100%))`);
			add_location(div, file, 6, 0, 107);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*visible*/ 1) {
				toggle_class(div, "hidden", !/*visible*/ ctx[0]);
			}

			if (dirty & /*scale*/ 2) {
				set_style(div, "flex-grow", /*scale*/ ctx[1]);
			}

			if (dirty & /*min_width*/ 4) {
				set_style(div, "min-width", `calc(min(${/*min_width*/ ctx[2]}px, 100%))`);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticForm', slots, ['default']);
	let { visible = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = 0 } = $$props;
	const writable_props = ['visible', 'scale', 'min_width'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticForm> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
		if ('scale' in $$props) $$invalidate(1, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(2, min_width = $$props.min_width);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ visible, scale, min_width });

	$$self.$inject_state = $$props => {
		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
		if ('scale' in $$props) $$invalidate(1, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(2, min_width = $$props.min_width);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [visible, scale, min_width, $$scope, slots];
}

class StaticForm extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { visible: 0, scale: 1, min_width: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticForm",
			options,
			id: create_fragment.name
		});
	}

	get visible() {
		throw new Error("<StaticForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { StaticForm as default };
//# sourceMappingURL=index-3147bd44.js.map
