import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, onMount, empty, insert_dev, noop, detach_dev, binding_callbacks, element, src_url_equal, attr_dev, toggle_class, add_location, listen_dev, is_function, run_all } from '../../../node/dev/svelte-internal.js';
import { p as playable } from './Player.svelte_svelte_type_style_lang-27651c97.js';
import './index-bbf998f8.js';

const Video_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/example/Video.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/video/example/Video.svelte";

// (21:0) {#if playable()}
function create_if_block(ctx) {
	let video_1;
	let video_1_src_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			video_1 = element("video");
			video_1.muted = true;
			video_1.playsInline = true;
			if (!src_url_equal(video_1.src, video_1_src_value = /*samples_dir*/ ctx[3] + /*value*/ ctx[2])) attr_dev(video_1, "src", video_1_src_value);
			attr_dev(video_1, "class", "s-quA23eGTYYET");
			toggle_class(video_1, "table", /*type*/ ctx[0] === "table");
			toggle_class(video_1, "gallery", /*type*/ ctx[0] === "gallery");
			toggle_class(video_1, "selected", /*selected*/ ctx[1]);
			add_location(video_1, file, 26, 1, 438);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video_1, anchor);
			/*video_1_binding*/ ctx[5](video_1);

			if (!mounted) {
				dispose = [
					listen_dev(
						video_1,
						"mouseover",
						function () {
							if (is_function(/*video*/ ctx[4].play)) /*video*/ ctx[4].play.apply(this, arguments);
						},
						false,
						false,
						false,
						false
					),
					listen_dev(
						video_1,
						"mouseout",
						function () {
							if (is_function(/*video*/ ctx[4].pause)) /*video*/ ctx[4].pause.apply(this, arguments);
						},
						false,
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*samples_dir, value*/ 12 && !src_url_equal(video_1.src, video_1_src_value = /*samples_dir*/ ctx[3] + /*value*/ ctx[2])) {
				attr_dev(video_1, "src", video_1_src_value);
			}

			if (dirty & /*type*/ 1) {
				toggle_class(video_1, "table", /*type*/ ctx[0] === "table");
			}

			if (dirty & /*type*/ 1) {
				toggle_class(video_1, "gallery", /*type*/ ctx[0] === "gallery");
			}

			if (dirty & /*selected*/ 2) {
				toggle_class(video_1, "selected", /*selected*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(video_1);
			}

			/*video_1_binding*/ ctx[5](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(21:0) {#if playable()}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		return create_if_block;
	}

	let current_block_type = select_block_type();
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, []);
	let { type } = $$props;
	let { selected = false } = $$props;
	let { value } = $$props;
	let { samples_dir } = $$props;
	let video;

	async function init() {
		$$invalidate(4, video.muted = true, video);
		$$invalidate(4, video.playsInline = true, video);
		$$invalidate(4, video.controls = false, video);
		video.setAttribute("muted", "");
		await video.play();
		video.pause();
	}

	onMount(() => {
		init();
	});

	$$self.$$.on_mount.push(function () {
		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
			console.warn("<Video> was created without expected prop 'type'");
		}

		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Video> was created without expected prop 'value'");
		}

		if (samples_dir === undefined && !('samples_dir' in $$props || $$self.$$.bound[$$self.$$.props['samples_dir']])) {
			console.warn("<Video> was created without expected prop 'samples_dir'");
		}
	});

	const writable_props = ['type', 'selected', 'value', 'samples_dir'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			video = $$value;
			$$invalidate(4, video);
		});
	}

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('samples_dir' in $$props) $$invalidate(3, samples_dir = $$props.samples_dir);
	};

	$$self.$capture_state = () => ({
		playable,
		onMount,
		type,
		selected,
		value,
		samples_dir,
		video,
		init
	});

	$$self.$inject_state = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('samples_dir' in $$props) $$invalidate(3, samples_dir = $$props.samples_dir);
		if ('video' in $$props) $$invalidate(4, video = $$props.video);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [type, selected, value, samples_dir, video, video_1_binding];
}

class Video extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			selected: 1,
			value: 2,
			samples_dir: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video",
			options,
			id: create_fragment.name
		});
	}

	get type() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get samples_dir() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set samples_dir(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Video$1 = Video;

export { Video$1 as default };
//# sourceMappingURL=index-249911a3.js.map
