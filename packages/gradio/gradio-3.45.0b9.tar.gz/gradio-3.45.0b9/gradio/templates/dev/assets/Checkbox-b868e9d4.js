import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, afterUpdate, element, space, text, attr_dev, add_location, toggle_class, insert_dev, append_dev, listen_dev, prop_dev, set_data_dev, noop, detach_dev, run_all } from '../../../node/dev/svelte-internal.js';

const Checkbox_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/checkbox/shared/Checkbox.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/checkbox/shared/Checkbox.svelte";

function create_fragment(ctx) {
	let label_1;
	let input;
	let t0;
	let span;
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label_1 = element("label");
			input = element("input");
			t0 = space();
			span = element("span");
			t1 = text(/*label*/ ctx[2]);
			input.disabled = /*disabled*/ ctx[1];
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "name", "test");
			attr_dev(input, "data-testid", "checkbox");
			attr_dev(input, "class", "s-0iT1X2CjhFg2");
			add_location(input, file, 28, 1, 458);
			attr_dev(span, "class", "ml-2 s-0iT1X2CjhFg2");
			add_location(span, file, 43, 1, 732);
			attr_dev(label_1, "class", "s-0iT1X2CjhFg2");
			toggle_class(label_1, "disabled", /*disabled*/ ctx[1]);
			add_location(label_1, file, 27, 0, 434);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, input);
			input.checked = /*value*/ ctx[0];
			append_dev(label_1, t0);
			append_dev(label_1, span);
			append_dev(span, t1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[5]),
					listen_dev(input, "input", /*input_handler*/ ctx[6], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*disabled*/ 2) {
				prop_dev(input, "disabled", /*disabled*/ ctx[1]);
			}

			if (dirty & /*value*/ 1) {
				input.checked = /*value*/ ctx[0];
			}

			if (dirty & /*label*/ 4) set_data_dev(t1, /*label*/ ctx[2]);

			if (dirty & /*disabled*/ 2) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(label_1);
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Checkbox', slots, []);
	let { value } = $$props;
	let { value_is_output = false } = $$props;
	let { disabled = false } = $$props;
	let { label } = $$props;
	const dispatch = createEventDispatcher();

	function handle_change() {
		dispatch("change", value);

		if (!value_is_output) {
			dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(4, value_is_output = false);
	});

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Checkbox> was created without expected prop 'value'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<Checkbox> was created without expected prop 'label'");
		}
	});

	const writable_props = ['value', 'value_is_output', 'disabled', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Checkbox> was created with unknown prop '${key}'`);
	});

	function input_change_handler() {
		value = this.checked;
		$$invalidate(0, value);
	}

	const input_handler = evt => {
		$$invalidate(0, value = evt.currentTarget.checked);

		dispatch("select", {
			index: 0,
			value: label,
			selected: evt.currentTarget.checked
		});
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(4, value_is_output = $$props.value_is_output);
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		afterUpdate,
		value,
		value_is_output,
		disabled,
		label,
		dispatch,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(4, value_is_output = $$props.value_is_output);
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			(handle_change());
		}
	};

	return [
		value,
		disabled,
		label,
		dispatch,
		value_is_output,
		input_change_handler,
		input_handler
	];
}

class Checkbox extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			value: 0,
			value_is_output: 4,
			disabled: 1,
			label: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox",
			options,
			id: create_fragment.name
		});
	}

	get value() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Checkbox as C };
//# sourceMappingURL=Checkbox-b868e9d4.js.map
