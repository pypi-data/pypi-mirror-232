import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, afterUpdate, assign, binding_callbacks, bind, create_component, mount_component, transition_in, transition_out, destroy_component, space, insert_dev, get_spread_update, get_spread_object, add_flush_callback, detach_dev } from '../../../node/dev/svelte-internal.js';
import { C as Code, a as Code$1 } from './Widgets.svelte_svelte_type_style_lang-9a117cea.js';
import { S as Static } from './index-bbf998f8.js';
import { B as Block } from './Button-40a1e1cf.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';

/* home/runner/work/gradio/gradio/js/code/interactive/InteractiveCode.svelte generated by Svelte v4.0.0 */

// (31:0) <Block variant={"solid"} padding={false} {elem_id} {elem_classes} {visible}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocklabel;
	let t1;
	let code;
	let updating_value;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[1].autoscroll },
		{ i18n: /*gradio*/ ctx[1].i18n },
		/*loading_status*/ ctx[9]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	blocklabel = new BlockLabel({
			props: {
				Icon: Code$1,
				show_label: /*show_label*/ ctx[8],
				label: /*label*/ ctx[7],
				float: false
			},
			$$inline: true
		});

	function code_value_binding(value) {
		/*code_value_binding*/ ctx[13](value);
	}

	let code_props = {
		language: /*language*/ ctx[2],
		lines: /*lines*/ ctx[3],
		dark_mode: /*dark_mode*/ ctx[10]
	};

	if (/*value*/ ctx[0] !== void 0) {
		code_props.value = /*value*/ ctx[0];
	}

	code = new Code({ props: code_props, $$inline: true });
	binding_callbacks.push(() => bind(code, 'value', code_value_binding));

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocklabel.$$.fragment);
			t1 = space();
			create_component(code.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(code, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 514)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 2 && { autoscroll: /*gradio*/ ctx[1].autoscroll },
					dirty & /*gradio*/ 2 && { i18n: /*gradio*/ ctx[1].i18n },
					dirty & /*loading_status*/ 512 && get_spread_object(/*loading_status*/ ctx[9])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 256) blocklabel_changes.show_label = /*show_label*/ ctx[8];
			if (dirty & /*label*/ 128) blocklabel_changes.label = /*label*/ ctx[7];
			blocklabel.$set(blocklabel_changes);
			const code_changes = {};
			if (dirty & /*language*/ 4) code_changes.language = /*language*/ ctx[2];
			if (dirty & /*lines*/ 8) code_changes.lines = /*lines*/ ctx[3];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				code_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			code.$set(code_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocklabel.$$.fragment, local);
			transition_in(code.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocklabel.$$.fragment, local);
			transition_out(code.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocklabel, detaching);
			destroy_component(code, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(31:0) <Block variant={\\\"solid\\\"} padding={false} {elem_id} {elem_classes} {visible}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: "solid",
				padding: false,
				elem_id: /*elem_id*/ ctx[4],
				elem_classes: /*elem_classes*/ ctx[5],
				visible: /*visible*/ ctx[6],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 16) block_changes.elem_id = /*elem_id*/ ctx[4];
			if (dirty & /*elem_classes*/ 32) block_changes.elem_classes = /*elem_classes*/ ctx[5];
			if (dirty & /*visible*/ 64) block_changes.visible = /*visible*/ ctx[6];

			if (dirty & /*$$scope, language, lines, value, show_label, label, gradio, loading_status*/ 33679) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveCode', slots, []);
	let { gradio } = $$props;
	let { value = "" } = $$props;
	let { value_is_output = false } = $$props;
	let { language = "" } = $$props;
	let { lines = 5 } = $$props;
	let { target } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { label = gradio.i18n("code.code") } = $$props;
	let { show_label = true } = $$props;
	let { loading_status } = $$props;
	let dark_mode = target.classList.contains("dark");

	function handle_change() {
		gradio.dispatch("change", value);

		if (!value_is_output) {
			gradio.dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(11, value_is_output = false);
	});

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveCode> was created without expected prop 'gradio'");
		}

		if (target === undefined && !('target' in $$props || $$self.$$.bound[$$self.$$.props['target']])) {
			console.warn("<InteractiveCode> was created without expected prop 'target'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveCode> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'gradio',
		'value',
		'value_is_output',
		'language',
		'lines',
		'target',
		'elem_id',
		'elem_classes',
		'visible',
		'label',
		'show_label',
		'loading_status'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveCode> was created with unknown prop '${key}'`);
	});

	function code_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(11, value_is_output = $$props.value_is_output);
		if ('language' in $$props) $$invalidate(2, language = $$props.language);
		if ('lines' in $$props) $$invalidate(3, lines = $$props.lines);
		if ('target' in $$props) $$invalidate(12, target = $$props.target);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(9, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		Code,
		StatusTracker: Static,
		Block,
		BlockLabel,
		CodeIcon: Code$1,
		gradio,
		value,
		value_is_output,
		language,
		lines,
		target,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		loading_status,
		dark_mode,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(11, value_is_output = $$props.value_is_output);
		if ('language' in $$props) $$invalidate(2, language = $$props.language);
		if ('lines' in $$props) $$invalidate(3, lines = $$props.lines);
		if ('target' in $$props) $$invalidate(12, target = $$props.target);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(9, loading_status = $$props.loading_status);
		if ('dark_mode' in $$props) $$invalidate(10, dark_mode = $$props.dark_mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			(handle_change());
		}
	};

	return [
		value,
		gradio,
		language,
		lines,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		loading_status,
		dark_mode,
		value_is_output,
		target,
		code_value_binding
	];
}

class InteractiveCode extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 1,
			value: 0,
			value_is_output: 11,
			language: 2,
			lines: 3,
			target: 12,
			elem_id: 4,
			elem_classes: 5,
			visible: 6,
			label: 7,
			show_label: 8,
			loading_status: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveCode",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get language() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set language(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lines() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lines(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<InteractiveCode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<InteractiveCode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const InteractiveCode$1 = InteractiveCode;

export { InteractiveCode$1 as default };
//# sourceMappingURL=index-16819a8f.js.map
