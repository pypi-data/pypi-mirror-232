import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, globals, element, attr_dev, add_location, insert_dev, noop, detach_dev, ensure_array_like_dev, space, destroy_each, append_dev, text, set_data_dev, listen_dev, run_all, empty, toggle_class, set_style, assign, create_component, mount_component, transition_in, transition_out, destroy_component, get_spread_update, get_spread_object, group_outros, check_outros } from '../../../node/dev/svelte-internal.js';
import { g as get_next_color } from './color-b6d07fb8.js';
import { B as Block } from './Button-40a1e1cf.js';
import { c as correct_color_map, T as TextHighlight, m as merge_elements } from './utils-d697b04c.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { E as Empty } from './Empty-d9b102c4.js';
import { S as Static } from './index-bbf998f8.js';

const Highlightedtext_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/highlightedtext/static/Highlightedtext.svelte generated by Svelte v4.0.0 */

const { Object: Object_1$1 } = globals;
const file = "home/runner/work/gradio/gradio/js/highlightedtext/static/Highlightedtext.svelte";

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];

	const constants_0 = typeof /*v*/ child_ctx[17].class_or_confidence === "string"
	? parseInt(/*v*/ child_ctx[17].class_or_confidence)
	: /*v*/ child_ctx[17].class_or_confidence;

	child_ctx[26] = constants_0;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	child_ctx[19] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i][0];
	child_ctx[24] = list[i][1];
	child_ctx[19] = i;
	return child_ctx;
}

// (131:1) {:else}
function create_else_block$1(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_5(ctx);
	let each_value_3 = ensure_array_like_dev(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "textfield s-o3E8m639j0zF");
			attr_dev(div, "data-testid", "highlighted-text:textfield");
			add_location(div, file, 152, 2, 4004);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, parseInt*/ 1) {
				each_value_3 = ensure_array_like_dev(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(131:1) {:else}",
		ctx
	});

	return block;
}

// (60:1) {#if mode === "categories"}
function create_if_block$1(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_4(ctx);
	let each_value = ensure_array_like_dev(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "textfield s-o3E8m639j0zF");
			add_location(div, file, 95, 2, 2316);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*splitTextByNewline, value, active, selectable, _color_map, dispatch, show_legend*/ 111) {
				each_value = ensure_array_like_dev(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(60:1) {#if mode === \\\"categories\\\"}",
		ctx
	});

	return block;
}

// (132:2) {#if show_legend}
function create_if_block_5(ctx) {
	let div;
	let span0;
	let t1;
	let span1;
	let t3;
	let span2;

	const block = {
		c: function create() {
			div = element("div");
			span0 = element("span");
			span0.textContent = "-1";
			t1 = space();
			span1 = element("span");
			span1.textContent = "0";
			t3 = space();
			span2 = element("span");
			span2.textContent = "+1";
			add_location(span0, file, 147, 4, 3929);
			add_location(span1, file, 148, 4, 3949);
			add_location(span2, file, 149, 4, 3968);
			attr_dev(div, "class", "color-legend s-o3E8m639j0zF");
			attr_dev(div, "data-testid", "highlighted-text:color-legend");
			add_location(div, file, 146, 3, 3854);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span0);
			append_dev(div, t1);
			append_dev(div, span1);
			append_dev(div, t3);
			append_dev(div, span2);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(132:2) {#if show_legend}",
		ctx
	});

	return block;
}

// (140:3) {#each value as v}
function create_each_block_3(ctx) {
	let span1;
	let span0;
	let t0_value = /*v*/ ctx[17].token + "";
	let t0;
	let t1;
	let span1_style_value;

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(span0, "class", "text s-o3E8m639j0zF");
			add_location(span0, file, 166, 5, 4429);
			attr_dev(span1, "class", "textspan score-text s-o3E8m639j0zF");

			attr_dev(span1, "style", span1_style_value = "background-color: rgba(" + (/*score*/ ctx[26] && /*score*/ ctx[26] < 0
			? "128, 90, 213," + -/*score*/ ctx[26]
			: "239, 68, 60," + /*score*/ ctx[26]) + ")");

			add_location(span1, file, 158, 4, 4233);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*v*/ ctx[17].token + "")) set_data_dev(t0, t0_value);

			if (dirty & /*value*/ 1 && span1_style_value !== (span1_style_value = "background-color: rgba(" + (/*score*/ ctx[26] && /*score*/ ctx[26] < 0
			? "128, 90, 213," + -/*score*/ ctx[26]
			: "239, 68, 60," + /*score*/ ctx[26]) + ")")) {
				attr_dev(span1, "style", span1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(140:3) {#each value as v}",
		ctx
	});

	return block;
}

// (61:2) {#if show_legend}
function create_if_block_4(ctx) {
	let div;
	let each_value_2 = ensure_array_like_dev(Object.entries(/*_color_map*/ ctx[5]));
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "category-legend s-o3E8m639j0zF");
			attr_dev(div, "data-testid", "highlighted-text:category-legend");
			add_location(div, file, 75, 3, 1729);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*Object, _color_map, handle_mouseover, handle_mouseout*/ 416) {
				each_value_2 = ensure_array_like_dev(Object.entries(/*_color_map*/ ctx[5]));
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(61:2) {#if show_legend}",
		ctx
	});

	return block;
}

// (66:4) {#each Object.entries(_color_map) as [category, color], i}
function create_each_block_2(ctx) {
	let div;
	let t0_value = /*category*/ ctx[23] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function mouseover_handler() {
		return /*mouseover_handler*/ ctx[10](/*category*/ ctx[23]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[11](/*category*/ ctx[23]);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "category-label s-o3E8m639j0zF");
			attr_dev(div, "style", "background-color:" + /*color*/ ctx[24].secondary);
			add_location(div, file, 82, 5, 1974);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);

			if (!mounted) {
				dispose = [
					listen_dev(div, "mouseover", mouseover_handler, false, false, false, false),
					listen_dev(div, "focus", focus_handler, false, false, false, false),
					listen_dev(div, "mouseout", /*mouseout_handler*/ ctx[12], false, false, false, false),
					listen_dev(div, "blur", /*blur_handler*/ ctx[13], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(66:4) {#each Object.entries(_color_map) as [category, color], i}",
		ctx
	});

	return block;
}

// (85:5) {#if line.trim() !== ""}
function create_if_block_2(ctx) {
	let span1;
	let span0;
	let t0_value = /*line*/ ctx[20] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;
	let if_block = !/*show_legend*/ ctx[1] && /*v*/ ctx[17].class_or_confidence !== null && create_if_block_3(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[14](/*i*/ ctx[19], /*v*/ ctx[17]);
	}

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr_dev(span0, "class", "text s-o3E8m639j0zF");
			toggle_class(span0, "no-label", /*v*/ ctx[17].class_or_confidence === null || !/*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence]);
			add_location(span0, file, 119, 7, 3160);
			attr_dev(span1, "class", "textspan s-o3E8m639j0zF");
			toggle_class(span1, "no-cat", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence);
			toggle_class(span1, "hl", /*v*/ ctx[17].class_or_confidence !== null);
			toggle_class(span1, "selectable", /*selectable*/ ctx[2]);

			set_style(span1, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
			? ""
			: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].secondary);

			add_location(span1, file, 102, 6, 2604);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
			if (if_block) if_block.m(span1, null);

			if (!mounted) {
				dispose = listen_dev(span1, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*line*/ ctx[20] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*value, _color_map*/ 33) {
				toggle_class(span0, "no-label", /*v*/ ctx[17].class_or_confidence === null || !/*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence]);
			}

			if (!/*show_legend*/ ctx[1] && /*v*/ ctx[17].class_or_confidence !== null) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, active*/ 9) {
				toggle_class(span1, "no-cat", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence);
			}

			if (dirty & /*value*/ 1) {
				toggle_class(span1, "hl", /*v*/ ctx[17].class_or_confidence !== null);
			}

			if (dirty & /*selectable*/ 4) {
				toggle_class(span1, "selectable", /*selectable*/ ctx[2]);
			}

			if (dirty & /*value, active*/ 9) {
				set_style(span1, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
				? ""
				: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].secondary);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span1);
			}

			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(85:5) {#if line.trim() !== \\\"\\\"}",
		ctx
	});

	return block;
}

// (111:7) {#if !show_legend && v.class_or_confidence !== null}
function create_if_block_3(ctx) {
	let t0;
	let span;
	let t1_value = /*v*/ ctx[17].class_or_confidence + "";
	let t1;

	const block = {
		c: function create() {
			t0 = text(" \n\t\t\t\t\t\t\t\t");
			span = element("span");
			t1 = text(t1_value);
			attr_dev(span, "class", "label s-o3E8m639j0zF");

			set_style(span, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
			? ""
			: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].primary);

			add_location(span, file, 126, 8, 3395);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, span, anchor);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t1_value !== (t1_value = /*v*/ ctx[17].class_or_confidence + "")) set_data_dev(t1, t1_value);

			if (dirty & /*value, active*/ 9) {
				set_style(span, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
				? ""
				: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].primary);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(111:7) {#if !show_legend && v.class_or_confidence !== null}",
		ctx
	});

	return block;
}

// (125:5) {#if j < splitTextByNewline(v.token).length - 1}
function create_if_block_1$1(ctx) {
	let br;

	const block = {
		c: function create() {
			br = element("br");
			add_location(br, file, 139, 6, 3772);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(br);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(125:5) {#if j < splitTextByNewline(v.token).length - 1}",
		ctx
	});

	return block;
}

// (84:4) {#each splitTextByNewline(v.token) as line, j}
function create_each_block_1(ctx) {
	let show_if_1 = /*line*/ ctx[20].trim() !== "";
	let t;
	let show_if = /*j*/ ctx[22] < splitTextByNewline(/*v*/ ctx[17].token).length - 1;
	let if_block1_anchor;
	let if_block0 = show_if_1 && create_if_block_2(ctx);
	let if_block1 = show_if && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) show_if_1 = /*line*/ ctx[20].trim() !== "";

			if (show_if_1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*value*/ 1) show_if = /*j*/ ctx[22] < splitTextByNewline(/*v*/ ctx[17].token).length - 1;

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block1_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(84:4) {#each splitTextByNewline(v.token) as line, j}",
		ctx
	});

	return block;
}

// (83:3) {#each value as v, i}
function create_each_block(ctx) {
	let each_1_anchor;
	let each_value_1 = ensure_array_like_dev(splitTextByNewline(/*v*/ ctx[17].token));
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*splitTextByNewline, value, active, selectable, _color_map, dispatch, show_legend*/ 111) {
				each_value_1 = ensure_array_like_dev(splitTextByNewline(/*v*/ ctx[17].token));
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(each_1_anchor);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(83:3) {#each value as v, i}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[4] === "categories") return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "container s-o3E8m639j0zF");
			add_location(div, file, 72, 0, 1653);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function splitTextByNewline(text) {
	return text.split("\n");
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Highlightedtext', slots, []);
	const browser = typeof document !== "undefined";
	let { value = [] } = $$props;
	let { show_legend = false } = $$props;
	let { color_map = {} } = $$props;
	let { selectable = false } = $$props;
	let ctx;
	let _color_map = {};
	let active = "";
	const dispatch = createEventDispatcher();
	let mode;

	function handle_mouseover(label) {
		$$invalidate(3, active = label);
	}

	function handle_mouseout() {
		$$invalidate(3, active = "");
	}

	const writable_props = ['value', 'show_legend', 'color_map', 'selectable'];

	Object_1$1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Highlightedtext> was created with unknown prop '${key}'`);
	});

	const mouseover_handler = category => handle_mouseover(category);
	const focus_handler = category => handle_mouseover(category);
	const mouseout_handler = () => handle_mouseout();
	const blur_handler = () => handle_mouseout();

	const click_handler = (i, v) => {
		dispatch("select", {
			index: i,
			value: [v.token, v.class_or_confidence]
		});
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(9, color_map = $$props.color_map);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
	};

	$$self.$capture_state = () => ({
		browser,
		get_next_color,
		createEventDispatcher,
		correct_color_map,
		value,
		show_legend,
		color_map,
		selectable,
		ctx,
		_color_map,
		active,
		splitTextByNewline,
		dispatch,
		mode,
		handle_mouseover,
		handle_mouseout
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(9, color_map = $$props.color_map);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
		if ('ctx' in $$props) $$invalidate(16, ctx = $$props.ctx);
		if ('_color_map' in $$props) $$invalidate(5, _color_map = $$props._color_map);
		if ('active' in $$props) $$invalidate(3, active = $$props.active);
		if ('mode' in $$props) $$invalidate(4, mode = $$props.mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color_map, value*/ 513) {
			{
				if (!color_map) {
					$$invalidate(9, color_map = {});
				}

				if (value.length > 0) {
					for (let entry of value) {
						if (entry.class_or_confidence !== null) {
							if (typeof entry.class_or_confidence === "string") {
								$$invalidate(4, mode = "categories");

								if (!(entry.class_or_confidence in color_map)) {
									let color = get_next_color(Object.keys(color_map).length);
									$$invalidate(9, color_map[entry.class_or_confidence] = color, color_map);
								}
							} else {
								$$invalidate(4, mode = "scores");
							}
						}
					}
				}

				correct_color_map(color_map, _color_map, browser, ctx);
			}
		}
	};

	return [
		value,
		show_legend,
		selectable,
		active,
		mode,
		_color_map,
		dispatch,
		handle_mouseover,
		handle_mouseout,
		color_map,
		mouseover_handler,
		focus_handler,
		mouseout_handler,
		blur_handler,
		click_handler
	];
}

class Highlightedtext extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			show_legend: 1,
			color_map: 9,
			selectable: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Highlightedtext",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Highlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Highlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_legend() {
		throw new Error("<Highlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_legend(value) {
		throw new Error("<Highlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<Highlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<Highlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<Highlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<Highlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/highlightedtext/static/StaticHighlightedtext.svelte generated by Svelte v4.0.0 */

const { Object: Object_1 } = globals;

// (52:1) {#if label}
function create_if_block_1(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: TextHighlight,
				label: /*label*/ ctx[7],
				float: false,
				disable: /*container*/ ctx[8] === false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 128) blocklabel_changes.label = /*label*/ ctx[7];
			if (dirty & /*container*/ 256) blocklabel_changes.disable = /*container*/ ctx[8] === false;
			blocklabel.$set(blocklabel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(52:1) {#if label}",
		ctx
	});

	return block;
}

// (69:1) {:else}
function create_else_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(69:1) {:else}",
		ctx
	});

	return block;
}

// (61:1) {#if value}
function create_if_block(ctx) {
	let highlightedtext;
	let current;

	highlightedtext = new Highlightedtext({
			props: {
				selectable: /*selectable*/ ctx[11],
				value: /*value*/ ctx[0],
				show_legend: /*show_legend*/ ctx[6],
				color_map: /*color_map*/ ctx[1]
			},
			$$inline: true
		});

	highlightedtext.$on("select", /*select_handler*/ ctx[16]);

	const block = {
		c: function create() {
			create_component(highlightedtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(highlightedtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const highlightedtext_changes = {};
			if (dirty & /*selectable*/ 2048) highlightedtext_changes.selectable = /*selectable*/ ctx[11];
			if (dirty & /*value*/ 1) highlightedtext_changes.value = /*value*/ ctx[0];
			if (dirty & /*show_legend*/ 64) highlightedtext_changes.show_legend = /*show_legend*/ ctx[6];
			if (dirty & /*color_map*/ 2) highlightedtext_changes.color_map = /*color_map*/ ctx[1];
			highlightedtext.$set(highlightedtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(highlightedtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(highlightedtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(highlightedtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(61:1) {#if value}",
		ctx
	});

	return block;
}

// (70:2) <Empty>
function create_default_slot_1(ctx) {
	let texthighlight;
	let current;
	texthighlight = new TextHighlight({ $$inline: true });

	const block = {
		c: function create() {
			create_component(texthighlight.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(texthighlight, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(texthighlight.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(texthighlight.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(texthighlight, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(70:2) <Empty>",
		ctx
	});

	return block;
}

// (36:0) <Block  variant={mode === "interactive" ? "dashed" : "solid"}  test_id="highlighted-text"  {visible}  {elem_id}  {elem_classes}  padding={false}  {container}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[2].autoscroll },
		{ i18n: /*gradio*/ ctx[2].i18n },
		/*loading_status*/ ctx[13]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	let if_block0 = /*label*/ ctx[7] && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 8196)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4 && { autoscroll: /*gradio*/ ctx[2].autoscroll },
					dirty & /*gradio*/ 4 && { i18n: /*gradio*/ ctx[2].i18n },
					dirty & /*loading_status*/ 8192 && get_spread_object(/*loading_status*/ ctx[13])
				])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*label*/ ctx[7]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(if_block1_anchor);
			}

			destroy_component(statustracker, detaching);
			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(36:0) <Block  variant={mode === \\\"interactive\\\" ? \\\"dashed\\\" : \\\"solid\\\"}  test_id=\\\"highlighted-text\\\"  {visible}  {elem_id}  {elem_classes}  padding={false}  {container}  {scale}  {min_width} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: /*mode*/ ctx[12] === "interactive" ? "dashed" : "solid",
				test_id: "highlighted-text",
				visible: /*visible*/ ctx[5],
				elem_id: /*elem_id*/ ctx[3],
				elem_classes: /*elem_classes*/ ctx[4],
				padding: false,
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*mode*/ 4096) block_changes.variant = /*mode*/ ctx[12] === "interactive" ? "dashed" : "solid";
			if (dirty & /*visible*/ 32) block_changes.visible = /*visible*/ ctx[5];
			if (dirty & /*elem_id*/ 8) block_changes.elem_id = /*elem_id*/ ctx[3];
			if (dirty & /*elem_classes*/ 16) block_changes.elem_classes = /*elem_classes*/ ctx[4];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, selectable, value, show_legend, color_map, gradio, label, container, loading_status*/ 141767) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticHighlightedtext', slots, []);
	let { gradio } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let old_value;
	let { show_legend } = $$props;
	let { color_map = {} } = $$props;
	let { label = gradio.i18n("highlighted_text.highlighted_text") } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { selectable = false } = $$props;
	let { combine_adjacent = false } = $$props;
	let { mode } = $$props;
	let { loading_status } = $$props;

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticHighlightedtext> was created without expected prop 'gradio'");
		}

		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<StaticHighlightedtext> was created without expected prop 'value'");
		}

		if (show_legend === undefined && !('show_legend' in $$props || $$self.$$.bound[$$self.$$.props['show_legend']])) {
			console.warn("<StaticHighlightedtext> was created without expected prop 'show_legend'");
		}

		if (mode === undefined && !('mode' in $$props || $$self.$$.bound[$$self.$$.props['mode']])) {
			console.warn("<StaticHighlightedtext> was created without expected prop 'mode'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticHighlightedtext> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'gradio',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'show_legend',
		'color_map',
		'label',
		'container',
		'scale',
		'min_width',
		'selectable',
		'combine_adjacent',
		'mode',
		'loading_status'
	];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticHighlightedtext> was created with unknown prop '${key}'`);
	});

	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(3, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(4, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(6, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(1, color_map = $$props.color_map);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('selectable' in $$props) $$invalidate(11, selectable = $$props.selectable);
		if ('combine_adjacent' in $$props) $$invalidate(14, combine_adjacent = $$props.combine_adjacent);
		if ('mode' in $$props) $$invalidate(12, mode = $$props.mode);
		if ('loading_status' in $$props) $$invalidate(13, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		HighlightedText: Highlightedtext,
		Block,
		BlockLabel,
		Empty,
		TextHighlight,
		StatusTracker: Static,
		merge_elements,
		gradio,
		elem_id,
		elem_classes,
		visible,
		value,
		old_value,
		show_legend,
		color_map,
		label,
		container,
		scale,
		min_width,
		selectable,
		combine_adjacent,
		mode,
		loading_status
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(3, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(4, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(15, old_value = $$props.old_value);
		if ('show_legend' in $$props) $$invalidate(6, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(1, color_map = $$props.color_map);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('selectable' in $$props) $$invalidate(11, selectable = $$props.selectable);
		if ('combine_adjacent' in $$props) $$invalidate(14, combine_adjacent = $$props.combine_adjacent);
		if ('mode' in $$props) $$invalidate(12, mode = $$props.mode);
		if ('loading_status' in $$props) $$invalidate(13, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color_map*/ 2) {
			if (!color_map && Object.keys(color_map).length) {
				$$invalidate(1, color_map);
			}
		}

		if ($$self.$$.dirty & /*value, combine_adjacent*/ 16385) {
			if (value && combine_adjacent) {
				$$invalidate(0, value = merge_elements(value, "equal"));
			}
		}

		if ($$self.$$.dirty & /*value, old_value, gradio*/ 32773) {
			{
				if (value !== old_value) {
					$$invalidate(15, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		value,
		color_map,
		gradio,
		elem_id,
		elem_classes,
		visible,
		show_legend,
		label,
		container,
		scale,
		min_width,
		selectable,
		mode,
		loading_status,
		combine_adjacent,
		old_value,
		select_handler
	];
}

class StaticHighlightedtext extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 2,
			elem_id: 3,
			elem_classes: 4,
			visible: 5,
			value: 0,
			show_legend: 6,
			color_map: 1,
			label: 7,
			container: 8,
			scale: 9,
			min_width: 10,
			selectable: 11,
			combine_adjacent: 14,
			mode: 12,
			loading_status: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticHighlightedtext",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_legend() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_legend(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get combine_adjacent() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set combine_adjacent(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mode() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mode(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticHighlightedtext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticHighlightedtext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticHighlightedtext$1 = StaticHighlightedtext;

export { StaticHighlightedtext$1 as default };
//# sourceMappingURL=index-ca75edb4.js.map
