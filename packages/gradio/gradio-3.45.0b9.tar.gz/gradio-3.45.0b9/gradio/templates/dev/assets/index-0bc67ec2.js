import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, create_component, space, empty, mount_component, insert_dev, group_outros, transition_out, check_outros, transition_in, detach_dev, destroy_component, bubble, binding_callbacks, bind, create_slot, element, text, attr_dev, add_location, append_dev, set_data_dev, noop, add_flush_callback, update_slot_base, get_all_dirty_from_scope, get_slot_changes, flush, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { B as Block, n as normalise_file } from './Button-40a1e1cf.js';
import { S as Static } from './index-bbf998f8.js';
import { U as UploadText } from './UploadText-8b60fa89.js';
import { U as Upload } from './Upload-648b9993.js';
import { M as ModifyUpload } from './ModifyUpload-2176b319.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { V as Video, P as Player } from './Player-ac19223d.js';
import { W as Webcam } from './InteractiveImage-52c39d9e.js';
import { a as prettyBytes, p as playable } from './Player.svelte_svelte_type_style_lang-27651c97.js';
import './IconButton-33e572dc.js';
import './Undo-012722f8.js';
import './Image-ca58ca37.js';
import './utils-fe21d2ec.js';

const Video_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/interactive/Video.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/video/interactive/Video.svelte";

// (56:0) {:else}
function create_else_block(ctx) {
	let modifyupload;
	let t;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	modifyupload = new ModifyUpload({
			props: { i18n: /*i18n*/ ctx[9] },
			$$inline: true
		});

	modifyupload.$on("clear", /*handle_clear*/ ctx[13]);
	const if_block_creators = [create_if_block_3, create_if_block_4];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (show_if == null) show_if = !!playable();
		if (show_if) return 0;
		if (/*value*/ ctx[0].size) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_2(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			create_component(modifyupload.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(modifyupload, target, anchor);
			insert_dev(target, t, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const modifyupload_changes = {};
			if (dirty & /*i18n*/ 512) modifyupload_changes.i18n = /*i18n*/ ctx[9];
			modifyupload.$set(modifyupload_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modifyupload.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(modifyupload.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(modifyupload, detaching);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(56:0) {:else}",
		ctx
	});

	return block;
}

// (34:0) {#if value === null}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*source*/ ctx[2] === "upload") return 0;
		if (/*source*/ ctx[2] === "webcam") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(34:0) {#if value === null}",
		ctx
	});

	return block;
}

// (72:22) 
function create_if_block_4(ctx) {
	let div0;
	let t0_value = /*value*/ ctx[0].name + "";
	let t0;
	let t1;
	let div1;
	let t2_value = prettyBytes(/*value*/ ctx[0].size) + "";
	let t2;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			attr_dev(div0, "class", "file-name s-9bJuy1TfE0s1");
			add_location(div0, file, 92, 2, 1737);
			attr_dev(div1, "class", "file-size s-9bJuy1TfE0s1");
			add_location(div1, file, 93, 2, 1781);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*value*/ 1 && t2_value !== (t2_value = prettyBytes(/*value*/ ctx[0].size) + "")) set_data_dev(t2, t2_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t1);
				detach_dev(div1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(72:22) ",
		ctx
	});

	return block;
}

// (58:1) {#if playable()}
function create_if_block_3(ctx) {
	let previous_key = /*value*/ ctx[0]?.data;
	let key_block_anchor;
	let current;
	let key_block = create_key_block(ctx);

	const block = {
		c: function create() {
			key_block.c();
			key_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			key_block.m(target, anchor);
			insert_dev(target, key_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && safe_not_equal(previous_key, previous_key = /*value*/ ctx[0]?.data)) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in(key_block, 1);
				key_block.m(key_block_anchor.parentNode, key_block_anchor);
			} else {
				key_block.p(ctx, dirty);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(key_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(key_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(key_block_anchor);
			}

			key_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(58:1) {#if playable()}",
		ctx
	});

	return block;
}

// (59:2) {#key value?.data}
function create_key_block(ctx) {
	let player;
	let current;

	player = new Player({
			props: {
				autoplay: /*autoplay*/ ctx[7],
				src: /*value*/ ctx[0].data,
				subtitle: /*subtitle*/ ctx[1]?.data,
				mirror: /*mirror_webcam*/ ctx[5] && /*source*/ ctx[2] === "webcam",
				label: /*label*/ ctx[3]
			},
			$$inline: true
		});

	player.$on("play", /*play_handler*/ ctx[20]);
	player.$on("pause", /*pause_handler*/ ctx[21]);
	player.$on("stop", /*stop_handler*/ ctx[22]);
	player.$on("end", /*end_handler*/ ctx[23]);

	const block = {
		c: function create() {
			create_component(player.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(player, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const player_changes = {};
			if (dirty & /*autoplay*/ 128) player_changes.autoplay = /*autoplay*/ ctx[7];
			if (dirty & /*value*/ 1) player_changes.src = /*value*/ ctx[0].data;
			if (dirty & /*subtitle*/ 2) player_changes.subtitle = /*subtitle*/ ctx[1]?.data;
			if (dirty & /*mirror_webcam, source*/ 36) player_changes.mirror = /*mirror_webcam*/ ctx[5] && /*source*/ ctx[2] === "webcam";
			if (dirty & /*label*/ 8) player_changes.label = /*label*/ ctx[3];
			player.$set(player_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(player.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(player.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(player, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_key_block.name,
		type: "key",
		source: "(59:2) {#key value?.data}",
		ctx
	});

	return block;
}

// (44:31) 
function create_if_block_2(ctx) {
	let webcam;
	let current;

	webcam = new Webcam({
			props: {
				mirror_webcam: /*mirror_webcam*/ ctx[5],
				include_audio: /*include_audio*/ ctx[6],
				mode: "video",
				i18n: /*i18n*/ ctx[9]
			},
			$$inline: true
		});

	webcam.$on("error", /*error_handler*/ ctx[16]);
	webcam.$on("capture", /*capture_handler*/ ctx[17]);
	webcam.$on("start_recording", /*start_recording_handler*/ ctx[18]);
	webcam.$on("stop_recording", /*stop_recording_handler*/ ctx[19]);

	const block = {
		c: function create() {
			create_component(webcam.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(webcam, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const webcam_changes = {};
			if (dirty & /*mirror_webcam*/ 32) webcam_changes.mirror_webcam = /*mirror_webcam*/ ctx[5];
			if (dirty & /*include_audio*/ 64) webcam_changes.include_audio = /*include_audio*/ ctx[6];
			if (dirty & /*i18n*/ 512) webcam_changes.i18n = /*i18n*/ ctx[9];
			webcam.$set(webcam_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(webcam.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(webcam.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(webcam, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(44:31) ",
		ctx
	});

	return block;
}

// (35:1) {#if source === "upload"}
function create_if_block_1(ctx) {
	let upload;
	let updating_dragging;
	let current;

	function upload_dragging_binding(value) {
		/*upload_dragging_binding*/ ctx[15](value);
	}

	let upload_props = {
		filetype: "video/x-m4v,video/*",
		root: /*root*/ ctx[8],
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	if (/*dragging*/ ctx[10] !== void 0) {
		upload_props.dragging = /*dragging*/ ctx[10];
	}

	upload = new Upload({ props: upload_props, $$inline: true });
	binding_callbacks.push(() => bind(upload, 'dragging', upload_dragging_binding));
	upload.$on("load", /*handle_load*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(upload.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(upload, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const upload_changes = {};
			if (dirty & /*root*/ 256) upload_changes.root = /*root*/ ctx[8];

			if (dirty & /*$$scope*/ 16777216) {
				upload_changes.$$scope = { dirty, ctx };
			}

			if (!updating_dragging && dirty & /*dragging*/ 1024) {
				updating_dragging = true;
				upload_changes.dragging = /*dragging*/ ctx[10];
				add_flush_callback(() => updating_dragging = false);
			}

			upload.$set(upload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(upload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(upload, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(35:1) {#if source === \\\"upload\\\"}",
		ctx
	});

	return block;
}

// (36:2) <Upload    bind:dragging    filetype="video/x-m4v,video/*"    on:load={handle_load}    {root}   >
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[24], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16777216)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[24],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[24])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[24], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(36:2) <Upload    bind:dragging    filetype=\\\"video/x-m4v,video/*\\\"    on:load={handle_load}    {root}   >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[4],
				Icon: Video,
				label: /*label*/ ctx[3] || "Video"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 16) blocklabel_changes.show_label = /*show_label*/ ctx[4];
			if (dirty & /*label*/ 8) blocklabel_changes.label = /*label*/ ctx[3] || "Video";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, ['default']);
	let { value = null } = $$props;
	let { subtitle = null } = $$props;
	let { source } = $$props;
	let { label = undefined } = $$props;
	let { show_label = true } = $$props;
	let { mirror_webcam = false } = $$props;
	let { include_audio } = $$props;
	let { autoplay } = $$props;
	let { root } = $$props;
	let { i18n } = $$props;
	const dispatch = createEventDispatcher();

	function handle_load({ detail }) {
		$$invalidate(0, value = detail);
		dispatch("change", detail);
		dispatch("upload", detail);
	}

	function handle_clear({ detail }) {
		$$invalidate(0, value = null);
		dispatch("change", detail);
		dispatch("clear");
	}

	let dragging = false;

	$$self.$$.on_mount.push(function () {
		if (source === undefined && !('source' in $$props || $$self.$$.bound[$$self.$$.props['source']])) {
			console.warn("<Video> was created without expected prop 'source'");
		}

		if (include_audio === undefined && !('include_audio' in $$props || $$self.$$.bound[$$self.$$.props['include_audio']])) {
			console.warn("<Video> was created without expected prop 'include_audio'");
		}

		if (autoplay === undefined && !('autoplay' in $$props || $$self.$$.bound[$$self.$$.props['autoplay']])) {
			console.warn("<Video> was created without expected prop 'autoplay'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Video> was created without expected prop 'root'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<Video> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'value',
		'subtitle',
		'source',
		'label',
		'show_label',
		'mirror_webcam',
		'include_audio',
		'autoplay',
		'root',
		'i18n'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	function upload_dragging_binding(value) {
		dragging = value;
		$$invalidate(10, dragging);
	}

	function error_handler(event) {
		bubble.call(this, $$self, event);
	}

	const capture_handler = ({ detail }) => dispatch("change", detail);

	function start_recording_handler(event) {
		bubble.call(this, $$self, event);
	}

	function stop_recording_handler(event) {
		bubble.call(this, $$self, event);
	}

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	function stop_handler(event) {
		bubble.call(this, $$self, event);
	}

	function end_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('source' in $$props) $$invalidate(2, source = $$props.source);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
		if ('mirror_webcam' in $$props) $$invalidate(5, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(6, include_audio = $$props.include_audio);
		if ('autoplay' in $$props) $$invalidate(7, autoplay = $$props.autoplay);
		if ('root' in $$props) $$invalidate(8, root = $$props.root);
		if ('i18n' in $$props) $$invalidate(9, i18n = $$props.i18n);
		if ('$$scope' in $$props) $$invalidate(24, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Upload,
		ModifyUpload,
		BlockLabel,
		Webcam,
		Video,
		prettyBytes,
		playable,
		Player,
		value,
		subtitle,
		source,
		label,
		show_label,
		mirror_webcam,
		include_audio,
		autoplay,
		root,
		i18n,
		dispatch,
		handle_load,
		handle_clear,
		dragging
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('source' in $$props) $$invalidate(2, source = $$props.source);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
		if ('mirror_webcam' in $$props) $$invalidate(5, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(6, include_audio = $$props.include_audio);
		if ('autoplay' in $$props) $$invalidate(7, autoplay = $$props.autoplay);
		if ('root' in $$props) $$invalidate(8, root = $$props.root);
		if ('i18n' in $$props) $$invalidate(9, i18n = $$props.i18n);
		if ('dragging' in $$props) $$invalidate(10, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dragging*/ 1024) {
			dispatch("drag", dragging);
		}
	};

	return [
		value,
		subtitle,
		source,
		label,
		show_label,
		mirror_webcam,
		include_audio,
		autoplay,
		root,
		i18n,
		dragging,
		dispatch,
		handle_load,
		handle_clear,
		slots,
		upload_dragging_binding,
		error_handler,
		capture_handler,
		start_recording_handler,
		stop_recording_handler,
		play_handler,
		pause_handler,
		stop_handler,
		end_handler,
		$$scope
	];
}

class Video_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			subtitle: 1,
			source: 2,
			label: 3,
			show_label: 4,
			mirror_webcam: 5,
			include_audio: 6,
			autoplay: 7,
			root: 8,
			i18n: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video_1",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subtitle() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtitle(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get source() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set source(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mirror_webcam() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mirror_webcam(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get include_audio() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set include_audio(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoplay() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoplay(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/video/interactive/InteractiveVideo.svelte generated by Svelte v4.0.0 */

// (77:1) <Video   value={_video}   subtitle={_subtitle}   on:change={handle_change}   on:drag={({ detail }) => (dragging = detail)}   on:error={({ detail }) => {    loading_status = loading_status || {};    loading_status.status = "error";    loading_status.message = detail;   }}   {label}   {show_label}   {source}   {mirror_webcam}   {include_audio}   {autoplay}   {root}   on:clear={() => gradio.dispatch("clear")}   on:play={() => gradio.dispatch("play")}   on:pause={() => gradio.dispatch("pause")}   on:upload={() => gradio.dispatch("upload")}   on:stop={() => gradio.dispatch("stop")}   on:end={() => gradio.dispatch("end")}   on:start_recording={() => gradio.dispatch("start_recording")}   on:stop_recording={() => gradio.dispatch("stop_recording")}   i18n={gradio.i18n}  >
function create_default_slot_1(ctx) {
	let uploadtext;
	let current;

	uploadtext = new UploadText({
			props: {
				i18n: /*gradio*/ ctx[17].i18n,
				type: "video"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(uploadtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(uploadtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const uploadtext_changes = {};
			if (dirty[0] & /*gradio*/ 131072) uploadtext_changes.i18n = /*gradio*/ ctx[17].i18n;
			uploadtext.$set(uploadtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(uploadtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(uploadtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(uploadtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(77:1) <Video   value={_video}   subtitle={_subtitle}   on:change={handle_change}   on:drag={({ detail }) => (dragging = detail)}   on:error={({ detail }) => {    loading_status = loading_status || {};    loading_status.status = \\\"error\\\";    loading_status.message = detail;   }}   {label}   {show_label}   {source}   {mirror_webcam}   {include_audio}   {autoplay}   {root}   on:clear={() => gradio.dispatch(\\\"clear\\\")}   on:play={() => gradio.dispatch(\\\"play\\\")}   on:pause={() => gradio.dispatch(\\\"pause\\\")}   on:upload={() => gradio.dispatch(\\\"upload\\\")}   on:stop={() => gradio.dispatch(\\\"stop\\\")}   on:end={() => gradio.dispatch(\\\"end\\\")}   on:start_recording={() => gradio.dispatch(\\\"start_recording\\\")}   on:stop_recording={() => gradio.dispatch(\\\"stop_recording\\\")}   i18n={gradio.i18n}  >",
		ctx
	});

	return block;
}

// (57:0) <Block  {visible}  variant={value === null && source === "upload" ? "dashed" : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {height}  {width}  {container}  {scale}  {min_width}  allow_overflow={false} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let video;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[17].autoscroll
		},
		{ i18n: /*gradio*/ ctx[17].i18n },
		/*loading_status*/ ctx[1]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	video = new Video_1({
			props: {
				value: /*_video*/ ctx[18],
				subtitle: /*_subtitle*/ ctx[19],
				label: /*label*/ ctx[5],
				show_label: /*show_label*/ ctx[8],
				source: /*source*/ ctx[6],
				mirror_webcam: /*mirror_webcam*/ ctx[11],
				include_audio: /*include_audio*/ ctx[12],
				autoplay: /*autoplay*/ ctx[16],
				root: /*root*/ ctx[7],
				i18n: /*gradio*/ ctx[17].i18n,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	video.$on("change", /*handle_change*/ ctx[21]);
	video.$on("drag", /*drag_handler*/ ctx[24]);
	video.$on("error", /*error_handler*/ ctx[25]);
	video.$on("clear", /*clear_handler*/ ctx[26]);
	video.$on("play", /*play_handler*/ ctx[27]);
	video.$on("pause", /*pause_handler*/ ctx[28]);
	video.$on("upload", /*upload_handler*/ ctx[29]);
	video.$on("stop", /*stop_handler*/ ctx[30]);
	video.$on("end", /*end_handler*/ ctx[31]);
	video.$on("start_recording", /*start_recording_handler*/ ctx[32]);
	video.$on("stop_recording", /*stop_recording_handler*/ ctx[33]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(video.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(video, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 131074)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 131072 && {
						autoscroll: /*gradio*/ ctx[17].autoscroll
					},
					dirty[0] & /*gradio*/ 131072 && { i18n: /*gradio*/ ctx[17].i18n },
					dirty[0] & /*loading_status*/ 2 && get_spread_object(/*loading_status*/ ctx[1])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const video_changes = {};
			if (dirty[0] & /*_video*/ 262144) video_changes.value = /*_video*/ ctx[18];
			if (dirty[0] & /*_subtitle*/ 524288) video_changes.subtitle = /*_subtitle*/ ctx[19];
			if (dirty[0] & /*label*/ 32) video_changes.label = /*label*/ ctx[5];
			if (dirty[0] & /*show_label*/ 256) video_changes.show_label = /*show_label*/ ctx[8];
			if (dirty[0] & /*source*/ 64) video_changes.source = /*source*/ ctx[6];
			if (dirty[0] & /*mirror_webcam*/ 2048) video_changes.mirror_webcam = /*mirror_webcam*/ ctx[11];
			if (dirty[0] & /*include_audio*/ 4096) video_changes.include_audio = /*include_audio*/ ctx[12];
			if (dirty[0] & /*autoplay*/ 65536) video_changes.autoplay = /*autoplay*/ ctx[16];
			if (dirty[0] & /*root*/ 128) video_changes.root = /*root*/ ctx[7];
			if (dirty[0] & /*gradio*/ 131072) video_changes.i18n = /*gradio*/ ctx[17].i18n;

			if (dirty[0] & /*gradio*/ 131072 | dirty[1] & /*$$scope*/ 8) {
				video_changes.$$scope = { dirty, ctx };
			}

			video.$set(video_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(video.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(video.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(video, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(57:0) <Block  {visible}  variant={value === null && source === \\\"upload\\\" ? \\\"dashed\\\" : \\\"solid\\\"}  border_mode={dragging ? \\\"focus\\\" : \\\"base\\\"}  padding={false}  {elem_id}  {elem_classes}  {height}  {width}  {container}  {scale}  {min_width}  allow_overflow={false} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				variant: /*value*/ ctx[0] === null && /*source*/ ctx[6] === "upload"
				? "dashed"
				: "solid",
				border_mode: /*dragging*/ ctx[20] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				height: /*height*/ ctx[9],
				width: /*width*/ ctx[10],
				container: /*container*/ ctx[13],
				scale: /*scale*/ ctx[14],
				min_width: /*min_width*/ ctx[15],
				allow_overflow: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];

			if (dirty[0] & /*value, source*/ 65) block_changes.variant = /*value*/ ctx[0] === null && /*source*/ ctx[6] === "upload"
			? "dashed"
			: "solid";

			if (dirty[0] & /*dragging*/ 1048576) block_changes.border_mode = /*dragging*/ ctx[20] ? "focus" : "base";
			if (dirty[0] & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty[0] & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty[0] & /*height*/ 512) block_changes.height = /*height*/ ctx[9];
			if (dirty[0] & /*width*/ 1024) block_changes.width = /*width*/ ctx[10];
			if (dirty[0] & /*container*/ 8192) block_changes.container = /*container*/ ctx[13];
			if (dirty[0] & /*scale*/ 16384) block_changes.scale = /*scale*/ ctx[14];
			if (dirty[0] & /*min_width*/ 32768) block_changes.min_width = /*min_width*/ ctx[15];

			if (dirty[0] & /*_video, _subtitle, label, show_label, source, mirror_webcam, include_audio, autoplay, root, gradio, dragging, loading_status*/ 2038242 | dirty[1] & /*$$scope*/ 8) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InteractiveVideo', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let old_value = null;
	let { label } = $$props;
	let { source } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let { show_label } = $$props;
	let { loading_status } = $$props;
	let { height } = $$props;
	let { width } = $$props;
	let { mirror_webcam } = $$props;
	let { include_audio } = $$props;
	let { container = false } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { autoplay = false } = $$props;
	let { gradio } = $$props;
	let _video = null;
	let _subtitle = null;
	let dragging = false;

	function handle_change({ detail }) {
		if (detail != null) {
			$$invalidate(0, value = { video: detail, subtitles: null });
		} else {
			$$invalidate(0, value = null);
		}
	}

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'label'");
		}

		if (source === undefined && !('source' in $$props || $$self.$$.bound[$$self.$$.props['source']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'source'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'root_url'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'show_label'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'loading_status'");
		}

		if (height === undefined && !('height' in $$props || $$self.$$.bound[$$self.$$.props['height']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'height'");
		}

		if (width === undefined && !('width' in $$props || $$self.$$.bound[$$self.$$.props['width']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'width'");
		}

		if (mirror_webcam === undefined && !('mirror_webcam' in $$props || $$self.$$.bound[$$self.$$.props['mirror_webcam']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'mirror_webcam'");
		}

		if (include_audio === undefined && !('include_audio' in $$props || $$self.$$.bound[$$self.$$.props['include_audio']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'include_audio'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<InteractiveVideo> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'label',
		'source',
		'root',
		'root_url',
		'show_label',
		'loading_status',
		'height',
		'width',
		'mirror_webcam',
		'include_audio',
		'container',
		'scale',
		'min_width',
		'autoplay',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InteractiveVideo> was created with unknown prop '${key}'`);
	});

	const drag_handler = ({ detail }) => $$invalidate(20, dragging = detail);

	const error_handler = ({ detail }) => {
		$$invalidate(1, loading_status = loading_status || {});
		$$invalidate(1, loading_status.status = "error", loading_status);
		$$invalidate(1, loading_status.message = detail, loading_status);
	};

	const clear_handler = () => gradio.dispatch("clear");
	const play_handler = () => gradio.dispatch("play");
	const pause_handler = () => gradio.dispatch("pause");
	const upload_handler = () => gradio.dispatch("upload");
	const stop_handler = () => gradio.dispatch("stop");
	const end_handler = () => gradio.dispatch("end");
	const start_recording_handler = () => gradio.dispatch("start_recording");
	const stop_recording_handler = () => gradio.dispatch("stop_recording");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('source' in $$props) $$invalidate(6, source = $$props.source);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(22, root_url = $$props.root_url);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
		if ('height' in $$props) $$invalidate(9, height = $$props.height);
		if ('width' in $$props) $$invalidate(10, width = $$props.width);
		if ('mirror_webcam' in $$props) $$invalidate(11, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(12, include_audio = $$props.include_audio);
		if ('container' in $$props) $$invalidate(13, container = $$props.container);
		if ('scale' in $$props) $$invalidate(14, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(15, min_width = $$props.min_width);
		if ('autoplay' in $$props) $$invalidate(16, autoplay = $$props.autoplay);
		if ('gradio' in $$props) $$invalidate(17, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		normalise_file,
		Block,
		Video: Video_1,
		UploadText,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		old_value,
		label,
		source,
		root,
		root_url,
		show_label,
		loading_status,
		height,
		width,
		mirror_webcam,
		include_audio,
		container,
		scale,
		min_width,
		autoplay,
		gradio,
		_video,
		_subtitle,
		dragging,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(23, old_value = $$props.old_value);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('source' in $$props) $$invalidate(6, source = $$props.source);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(22, root_url = $$props.root_url);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
		if ('height' in $$props) $$invalidate(9, height = $$props.height);
		if ('width' in $$props) $$invalidate(10, width = $$props.width);
		if ('mirror_webcam' in $$props) $$invalidate(11, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(12, include_audio = $$props.include_audio);
		if ('container' in $$props) $$invalidate(13, container = $$props.container);
		if ('scale' in $$props) $$invalidate(14, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(15, min_width = $$props.min_width);
		if ('autoplay' in $$props) $$invalidate(16, autoplay = $$props.autoplay);
		if ('gradio' in $$props) $$invalidate(17, gradio = $$props.gradio);
		if ('_video' in $$props) $$invalidate(18, _video = $$props._video);
		if ('_subtitle' in $$props) $$invalidate(19, _subtitle = $$props._subtitle);
		if ('dragging' in $$props) $$invalidate(20, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, root, root_url*/ 4194433) {
			{
				if (value != null) {
					$$invalidate(18, _video = normalise_file(value.video, root, root_url));
					$$invalidate(19, _subtitle = normalise_file(value.subtitles, root, root_url));
				} else {
					$$invalidate(18, _video = null);
					$$invalidate(19, _subtitle = null);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*value, old_value, gradio*/ 8519681) {
			{
				if (JSON.stringify(value) !== JSON.stringify(old_value)) {
					$$invalidate(23, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		value,
		loading_status,
		elem_id,
		elem_classes,
		visible,
		label,
		source,
		root,
		show_label,
		height,
		width,
		mirror_webcam,
		include_audio,
		container,
		scale,
		min_width,
		autoplay,
		gradio,
		_video,
		_subtitle,
		dragging,
		handle_change,
		root_url,
		old_value,
		drag_handler,
		error_handler,
		clear_handler,
		play_handler,
		pause_handler,
		upload_handler,
		stop_handler,
		end_handler,
		start_recording_handler,
		stop_recording_handler
	];
}

class InteractiveVideo extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				elem_id: 2,
				elem_classes: 3,
				visible: 4,
				value: 0,
				label: 5,
				source: 6,
				root: 7,
				root_url: 22,
				show_label: 8,
				loading_status: 1,
				height: 9,
				width: 10,
				mirror_webcam: 11,
				include_audio: 12,
				container: 13,
				scale: 14,
				min_width: 15,
				autoplay: 16,
				gradio: 17
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InteractiveVideo",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		return this.$$.ctx[2];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[3];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[4];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[5];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get source() {
		return this.$$.ctx[6];
	}

	set source(source) {
		this.$$set({ source });
		flush();
	}

	get root() {
		return this.$$.ctx[7];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get root_url() {
		return this.$$.ctx[22];
	}

	set root_url(root_url) {
		this.$$set({ root_url });
		flush();
	}

	get show_label() {
		return this.$$.ctx[8];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[1];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get height() {
		return this.$$.ctx[9];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get width() {
		return this.$$.ctx[10];
	}

	set width(width) {
		this.$$set({ width });
		flush();
	}

	get mirror_webcam() {
		return this.$$.ctx[11];
	}

	set mirror_webcam(mirror_webcam) {
		this.$$set({ mirror_webcam });
		flush();
	}

	get include_audio() {
		return this.$$.ctx[12];
	}

	set include_audio(include_audio) {
		this.$$set({ include_audio });
		flush();
	}

	get container() {
		return this.$$.ctx[13];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[14];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[15];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get autoplay() {
		return this.$$.ctx[16];
	}

	set autoplay(autoplay) {
		this.$$set({ autoplay });
		flush();
	}

	get gradio() {
		return this.$$.ctx[17];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}
}

const InteractiveVideo$1 = InteractiveVideo;

export { InteractiveVideo$1 as default };
//# sourceMappingURL=index-0bc67ec2.js.map
