import { i as identity, a as split_css_unit, d as derived, w as writable, t, I as IntlMessageFormat, b as get_store_value } from './index-bbf998f8.js';
import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_dynamic_element, validate_void_dynamic_element, validate_slots, create_slot, assign, transition_in, transition_out, element, set_dynamic_element_data, toggle_class, set_style, add_location, insert_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, detach_dev, attr_dev, empty, group_outros, check_outros, bubble, space, append_dev, listen_dev, prop_dev, src_url_equal } from '../../../node/dev/svelte-internal.js';

/*
Adapted from https://github.com/mattdesl
Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
*/

/**
 * https://svelte.dev/docs/svelte-easing
 * @param {number} t
 * @returns {number}
 */
function cubicOut(t) {
	const f = t - 1.0;
	return f * f * f + 1.0;
}

/**
 * Animates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.
 *
 * https://svelte.dev/docs/svelte-transition#fade
 * @param {Element} node
 * @param {import('./public').FadeParams} [params]
 * @returns {import('./public').TransitionConfig}
 */
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
	const o = +getComputedStyle(node).opacity;
	return {
		delay,
		duration,
		easing,
		css: (t) => `opacity: ${t * o}`
	};
}

/**
 * Animates the x and y positions and the opacity of an element. `in` transitions animate from the provided values, passed as parameters to the element's default values. `out` transitions animate from the element's default values to the provided values.
 *
 * https://svelte.dev/docs/svelte-transition#fly
 * @param {Element} node
 * @param {import('./public').FlyParams} [params]
 * @returns {import('./public').TransitionConfig}
 */
function fly(
	node,
	{ delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}
) {
	const style = getComputedStyle(node);
	const target_opacity = +style.opacity;
	const transform = style.transform === 'none' ? '' : style.transform;
	const od = target_opacity * (1 - opacity);
	const [xValue, xUnit] = split_css_unit(x);
	const [yValue, yUnit] = split_css_unit(y);
	return {
		delay,
		duration,
		easing,
		css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});
			opacity: ${target_opacity - od * u}`
	};
}

const Block_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/atoms/src/Block.svelte generated by Svelte v4.0.0 */

const file$2 = "home/runner/work/gradio/gradio/js/atoms/src/Block.svelte";

// (19:0) <svelte:element  this={tag}  data-testid={test_id}  id={elem_id}  class:hidden={visible === false}  class="block {elem_classes.join(' ')}"  class:padded={padding}  class:border_focus={border_mode === "focus"}  class:hide-container={!explicit_call && !container}  style:height={typeof height === "number" ? height + "px" : undefined}  style:width={typeof width === "number"   ? `calc(min(${width}px, 100%))`   : undefined}  style:border-style={variant}  style:overflow={allow_overflow ? "visible" : "hidden"}  style:flex-grow={scale}  style:min-width={`calc(min(${min_width}px, 100%))`}  style:border-width="var(--block-border-width)" >
function create_dynamic_element(ctx) {
	let svelte_element;
	let svelte_element_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	let svelte_element_levels = [
		{ "data-testid": /*test_id*/ ctx[7] },
		{ id: /*elem_id*/ ctx[2] },
		{
			class: svelte_element_class_value = "block " + /*elem_classes*/ ctx[3].join(' ') + " s-jodadsQmDruG"
		}
	];

	let svelte_element_data = {};

	for (let i = 0; i < svelte_element_levels.length; i += 1) {
		svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
	}

	const block = {
		c: function create() {
			svelte_element = element(/*tag*/ ctx[14]);
			if (default_slot) default_slot.c();
			set_dynamic_element_data(/*tag*/ ctx[14])(svelte_element, svelte_element_data);
			toggle_class(svelte_element, "hidden", /*visible*/ ctx[10] === false);
			toggle_class(svelte_element, "padded", /*padding*/ ctx[6]);
			toggle_class(svelte_element, "border_focus", /*border_mode*/ ctx[5] === "focus");
			toggle_class(svelte_element, "hide-container", !/*explicit_call*/ ctx[8] && !/*container*/ ctx[9]);

			set_style(svelte_element, "height", typeof /*height*/ ctx[0] === "number"
			? /*height*/ ctx[0] + "px"
			: undefined);

			set_style(svelte_element, "width", typeof /*width*/ ctx[1] === "number"
			? `calc(min(${/*width*/ ctx[1]}px, 100%))`
			: undefined);

			set_style(svelte_element, "border-style", /*variant*/ ctx[4]);
			set_style(svelte_element, "overflow", /*allow_overflow*/ ctx[11] ? "visible" : "hidden");
			set_style(svelte_element, "flex-grow", /*scale*/ ctx[12]);
			set_style(svelte_element, "min-width", `calc(min(${/*min_width*/ ctx[13]}px, 100%))`);
			set_style(svelte_element, "border-width", `var(--block-border-width)`);
			add_location(svelte_element, file$2, 20, 0, 522);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svelte_element, anchor);

			if (default_slot) {
				default_slot.m(svelte_element, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
						null
					);
				}
			}

			set_dynamic_element_data(/*tag*/ ctx[14])(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
				(!current || dirty & /*test_id*/ 128) && { "data-testid": /*test_id*/ ctx[7] },
				(!current || dirty & /*elem_id*/ 4) && { id: /*elem_id*/ ctx[2] },
				(!current || dirty & /*elem_classes*/ 8 && svelte_element_class_value !== (svelte_element_class_value = "block " + /*elem_classes*/ ctx[3].join(' ') + " s-jodadsQmDruG")) && { class: svelte_element_class_value }
			]));

			toggle_class(svelte_element, "hidden", /*visible*/ ctx[10] === false);
			toggle_class(svelte_element, "padded", /*padding*/ ctx[6]);
			toggle_class(svelte_element, "border_focus", /*border_mode*/ ctx[5] === "focus");
			toggle_class(svelte_element, "hide-container", !/*explicit_call*/ ctx[8] && !/*container*/ ctx[9]);

			if (dirty & /*height*/ 1) {
				set_style(svelte_element, "height", typeof /*height*/ ctx[0] === "number"
				? /*height*/ ctx[0] + "px"
				: undefined);
			}

			if (dirty & /*width*/ 2) {
				set_style(svelte_element, "width", typeof /*width*/ ctx[1] === "number"
				? `calc(min(${/*width*/ ctx[1]}px, 100%))`
				: undefined);
			}

			if (dirty & /*variant*/ 16) {
				set_style(svelte_element, "border-style", /*variant*/ ctx[4]);
			}

			if (dirty & /*allow_overflow*/ 2048) {
				set_style(svelte_element, "overflow", /*allow_overflow*/ ctx[11] ? "visible" : "hidden");
			}

			if (dirty & /*scale*/ 4096) {
				set_style(svelte_element, "flex-grow", /*scale*/ ctx[12]);
			}

			if (dirty & /*min_width*/ 8192) {
				set_style(svelte_element, "min-width", `calc(min(${/*min_width*/ ctx[13]}px, 100%))`);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svelte_element);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_dynamic_element.name,
		type: "child_dynamic_element",
		source: "(19:0) <svelte:element  this={tag}  data-testid={test_id}  id={elem_id}  class:hidden={visible === false}  class=\\\"block {elem_classes.join(' ')}\\\"  class:padded={padding}  class:border_focus={border_mode === \\\"focus\\\"}  class:hide-container={!explicit_call && !container}  style:height={typeof height === \\\"number\\\" ? height + \\\"px\\\" : undefined}  style:width={typeof width === \\\"number\\\"   ? `calc(min(${width}px, 100%))`   : undefined}  style:border-style={variant}  style:overflow={allow_overflow ? \\\"visible\\\" : \\\"hidden\\\"}  style:flex-grow={scale}  style:min-width={`calc(min(${min_width}px, 100%))`}  style:border-width=\\\"var(--block-border-width)\\\" >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let current;
	validate_dynamic_element(/*tag*/ ctx[14]);
	validate_void_dynamic_element(/*tag*/ ctx[14]);
	let svelte_element = /*tag*/ ctx[14] && create_dynamic_element(ctx);

	const block = {
		c: function create() {
			if (svelte_element) svelte_element.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*tag*/ ctx[14]) {
				svelte_element.p(ctx, dirty);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svelte_element, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(svelte_element, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (svelte_element) svelte_element.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Block', slots, ['default']);
	let { height = undefined } = $$props;
	let { width = undefined } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { variant = "solid" } = $$props;
	let { border_mode = "base" } = $$props;
	let { padding = true } = $$props;
	let { type = "normal" } = $$props;
	let { test_id = undefined } = $$props;
	let { explicit_call = false } = $$props;
	let { container = true } = $$props;
	let { visible = true } = $$props;
	let { allow_overflow = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = 0 } = $$props;
	let tag = type === "fieldset" ? "fieldset" : "div";

	const writable_props = [
		'height',
		'width',
		'elem_id',
		'elem_classes',
		'variant',
		'border_mode',
		'padding',
		'type',
		'test_id',
		'explicit_call',
		'container',
		'visible',
		'allow_overflow',
		'scale',
		'min_width'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Block> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('height' in $$props) $$invalidate(0, height = $$props.height);
		if ('width' in $$props) $$invalidate(1, width = $$props.width);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('border_mode' in $$props) $$invalidate(5, border_mode = $$props.border_mode);
		if ('padding' in $$props) $$invalidate(6, padding = $$props.padding);
		if ('type' in $$props) $$invalidate(15, type = $$props.type);
		if ('test_id' in $$props) $$invalidate(7, test_id = $$props.test_id);
		if ('explicit_call' in $$props) $$invalidate(8, explicit_call = $$props.explicit_call);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('visible' in $$props) $$invalidate(10, visible = $$props.visible);
		if ('allow_overflow' in $$props) $$invalidate(11, allow_overflow = $$props.allow_overflow);
		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(13, min_width = $$props.min_width);
		if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		height,
		width,
		elem_id,
		elem_classes,
		variant,
		border_mode,
		padding,
		type,
		test_id,
		explicit_call,
		container,
		visible,
		allow_overflow,
		scale,
		min_width,
		tag
	});

	$$self.$inject_state = $$props => {
		if ('height' in $$props) $$invalidate(0, height = $$props.height);
		if ('width' in $$props) $$invalidate(1, width = $$props.width);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('border_mode' in $$props) $$invalidate(5, border_mode = $$props.border_mode);
		if ('padding' in $$props) $$invalidate(6, padding = $$props.padding);
		if ('type' in $$props) $$invalidate(15, type = $$props.type);
		if ('test_id' in $$props) $$invalidate(7, test_id = $$props.test_id);
		if ('explicit_call' in $$props) $$invalidate(8, explicit_call = $$props.explicit_call);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('visible' in $$props) $$invalidate(10, visible = $$props.visible);
		if ('allow_overflow' in $$props) $$invalidate(11, allow_overflow = $$props.allow_overflow);
		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(13, min_width = $$props.min_width);
		if ('tag' in $$props) $$invalidate(14, tag = $$props.tag);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		height,
		width,
		elem_id,
		elem_classes,
		variant,
		border_mode,
		padding,
		test_id,
		explicit_call,
		container,
		visible,
		allow_overflow,
		scale,
		min_width,
		tag,
		type,
		$$scope,
		slots
	];
}

class Block extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			height: 0,
			width: 1,
			elem_id: 2,
			elem_classes: 3,
			variant: 4,
			border_mode: 5,
			padding: 6,
			type: 15,
			test_id: 7,
			explicit_call: 8,
			container: 9,
			visible: 10,
			allow_overflow: 11,
			scale: 12,
			min_width: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Block",
			options,
			id: create_fragment$2.name
		});
	}

	get height() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get border_mode() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set border_mode(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get test_id() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set test_id(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get explicit_call() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set explicit_call(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get allow_overflow() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allow_overflow(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Info_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/atoms/src/Info.svelte generated by Svelte v4.0.0 */

const file$1 = "home/runner/work/gradio/gradio/js/atoms/src/Info.svelte";

function create_fragment$1(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", "s-VkFq9hsha-Vs");
			add_location(div, file$1, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Info', slots, ['default']);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Info> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class Info extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Info",
			options,
			id: create_fragment$1.name
		});
	}
}

const BlockTitle_svelte_svelte_type_style_lang = '';

const BlockLabel_svelte_svelte_type_style_lang = '';

const IconButton_svelte_svelte_type_style_lang = '';

const Empty_svelte_svelte_type_style_lang = '';

const ordered_colors = [
  "red",
  "green",
  "blue",
  "yellow",
  "purple",
  "teal",
  "orange",
  "cyan",
  "lime",
  "pink"
];
const color_values = [
  { color: "red", primary: 600, secondary: 100 },
  { color: "green", primary: 600, secondary: 100 },
  { color: "blue", primary: 600, secondary: 100 },
  { color: "yellow", primary: 500, secondary: 100 },
  { color: "purple", primary: 600, secondary: 100 },
  { color: "teal", primary: 600, secondary: 100 },
  { color: "orange", primary: 600, secondary: 100 },
  { color: "cyan", primary: 600, secondary: 100 },
  { color: "lime", primary: 500, secondary: 100 },
  { color: "pink", primary: 600, secondary: 100 }
];
const tw_colors = {
  inherit: "inherit",
  current: "currentColor",
  transparent: "transparent",
  black: "#000",
  white: "#fff",
  slate: {
    50: "#f8fafc",
    100: "#f1f5f9",
    200: "#e2e8f0",
    300: "#cbd5e1",
    400: "#94a3b8",
    500: "#64748b",
    600: "#475569",
    700: "#334155",
    800: "#1e293b",
    900: "#0f172a",
    950: "#020617"
  },
  gray: {
    50: "#f9fafb",
    100: "#f3f4f6",
    200: "#e5e7eb",
    300: "#d1d5db",
    400: "#9ca3af",
    500: "#6b7280",
    600: "#4b5563",
    700: "#374151",
    800: "#1f2937",
    900: "#111827",
    950: "#030712"
  },
  zinc: {
    50: "#fafafa",
    100: "#f4f4f5",
    200: "#e4e4e7",
    300: "#d4d4d8",
    400: "#a1a1aa",
    500: "#71717a",
    600: "#52525b",
    700: "#3f3f46",
    800: "#27272a",
    900: "#18181b",
    950: "#09090b"
  },
  neutral: {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#e5e5e5",
    300: "#d4d4d4",
    400: "#a3a3a3",
    500: "#737373",
    600: "#525252",
    700: "#404040",
    800: "#262626",
    900: "#171717",
    950: "#0a0a0a"
  },
  stone: {
    50: "#fafaf9",
    100: "#f5f5f4",
    200: "#e7e5e4",
    300: "#d6d3d1",
    400: "#a8a29e",
    500: "#78716c",
    600: "#57534e",
    700: "#44403c",
    800: "#292524",
    900: "#1c1917",
    950: "#0c0a09"
  },
  red: {
    50: "#fef2f2",
    100: "#fee2e2",
    200: "#fecaca",
    300: "#fca5a5",
    400: "#f87171",
    500: "#ef4444",
    600: "#dc2626",
    700: "#b91c1c",
    800: "#991b1b",
    900: "#7f1d1d",
    950: "#450a0a"
  },
  orange: {
    50: "#fff7ed",
    100: "#ffedd5",
    200: "#fed7aa",
    300: "#fdba74",
    400: "#fb923c",
    500: "#f97316",
    600: "#ea580c",
    700: "#c2410c",
    800: "#9a3412",
    900: "#7c2d12",
    950: "#431407"
  },
  amber: {
    50: "#fffbeb",
    100: "#fef3c7",
    200: "#fde68a",
    300: "#fcd34d",
    400: "#fbbf24",
    500: "#f59e0b",
    600: "#d97706",
    700: "#b45309",
    800: "#92400e",
    900: "#78350f",
    950: "#451a03"
  },
  yellow: {
    50: "#fefce8",
    100: "#fef9c3",
    200: "#fef08a",
    300: "#fde047",
    400: "#facc15",
    500: "#eab308",
    600: "#ca8a04",
    700: "#a16207",
    800: "#854d0e",
    900: "#713f12",
    950: "#422006"
  },
  lime: {
    50: "#f7fee7",
    100: "#ecfccb",
    200: "#d9f99d",
    300: "#bef264",
    400: "#a3e635",
    500: "#84cc16",
    600: "#65a30d",
    700: "#4d7c0f",
    800: "#3f6212",
    900: "#365314",
    950: "#1a2e05"
  },
  green: {
    50: "#f0fdf4",
    100: "#dcfce7",
    200: "#bbf7d0",
    300: "#86efac",
    400: "#4ade80",
    500: "#22c55e",
    600: "#16a34a",
    700: "#15803d",
    800: "#166534",
    900: "#14532d",
    950: "#052e16"
  },
  emerald: {
    50: "#ecfdf5",
    100: "#d1fae5",
    200: "#a7f3d0",
    300: "#6ee7b7",
    400: "#34d399",
    500: "#10b981",
    600: "#059669",
    700: "#047857",
    800: "#065f46",
    900: "#064e3b",
    950: "#022c22"
  },
  teal: {
    50: "#f0fdfa",
    100: "#ccfbf1",
    200: "#99f6e4",
    300: "#5eead4",
    400: "#2dd4bf",
    500: "#14b8a6",
    600: "#0d9488",
    700: "#0f766e",
    800: "#115e59",
    900: "#134e4a",
    950: "#042f2e"
  },
  cyan: {
    50: "#ecfeff",
    100: "#cffafe",
    200: "#a5f3fc",
    300: "#67e8f9",
    400: "#22d3ee",
    500: "#06b6d4",
    600: "#0891b2",
    700: "#0e7490",
    800: "#155e75",
    900: "#164e63",
    950: "#083344"
  },
  sky: {
    50: "#f0f9ff",
    100: "#e0f2fe",
    200: "#bae6fd",
    300: "#7dd3fc",
    400: "#38bdf8",
    500: "#0ea5e9",
    600: "#0284c7",
    700: "#0369a1",
    800: "#075985",
    900: "#0c4a6e",
    950: "#082f49"
  },
  blue: {
    50: "#eff6ff",
    100: "#dbeafe",
    200: "#bfdbfe",
    300: "#93c5fd",
    400: "#60a5fa",
    500: "#3b82f6",
    600: "#2563eb",
    700: "#1d4ed8",
    800: "#1e40af",
    900: "#1e3a8a",
    950: "#172554"
  },
  indigo: {
    50: "#eef2ff",
    100: "#e0e7ff",
    200: "#c7d2fe",
    300: "#a5b4fc",
    400: "#818cf8",
    500: "#6366f1",
    600: "#4f46e5",
    700: "#4338ca",
    800: "#3730a3",
    900: "#312e81",
    950: "#1e1b4b"
  },
  violet: {
    50: "#f5f3ff",
    100: "#ede9fe",
    200: "#ddd6fe",
    300: "#c4b5fd",
    400: "#a78bfa",
    500: "#8b5cf6",
    600: "#7c3aed",
    700: "#6d28d9",
    800: "#5b21b6",
    900: "#4c1d95",
    950: "#2e1065"
  },
  purple: {
    50: "#faf5ff",
    100: "#f3e8ff",
    200: "#e9d5ff",
    300: "#d8b4fe",
    400: "#c084fc",
    500: "#a855f7",
    600: "#9333ea",
    700: "#7e22ce",
    800: "#6b21a8",
    900: "#581c87",
    950: "#3b0764"
  },
  fuchsia: {
    50: "#fdf4ff",
    100: "#fae8ff",
    200: "#f5d0fe",
    300: "#f0abfc",
    400: "#e879f9",
    500: "#d946ef",
    600: "#c026d3",
    700: "#a21caf",
    800: "#86198f",
    900: "#701a75",
    950: "#4a044e"
  },
  pink: {
    50: "#fdf2f8",
    100: "#fce7f3",
    200: "#fbcfe8",
    300: "#f9a8d4",
    400: "#f472b6",
    500: "#ec4899",
    600: "#db2777",
    700: "#be185d",
    800: "#9d174d",
    900: "#831843",
    950: "#500724"
  },
  rose: {
    50: "#fff1f2",
    100: "#ffe4e6",
    200: "#fecdd3",
    300: "#fda4af",
    400: "#fb7185",
    500: "#f43f5e",
    600: "#e11d48",
    700: "#be123c",
    800: "#9f1239",
    900: "#881337",
    950: "#4c0519"
  }
};
const colors = color_values.reduce(
  (acc, { color, primary, secondary }) => ({
    ...acc,
    [color]: {
      primary: tw_colors[color][primary],
      secondary: tw_colors[color][secondary]
    }
  }),
  {}
);

const i={},r=(e,n,t)=>t?(n in i||(i[n]={}),e in i[n]||(i[n][e]=t),t):t,s=(e,n)=>{if(null==n)return;if(n in i&&e in i[n])return i[n][e];const t=E(n);for(let o=0;o<t.length;o++){const i=c(t[o],e);if(i)return r(e,n,i)}};let l;const a=writable({});function u(e){return e in l}function c(e,n){if(!u(e))return null;const t=function(e){return l[e]||null}(e);return function(e,n){if(null==n)return;if(n in e)return e[n];const t=n.split(".");let o=e;for(let e=0;e<t.length;e++)if("object"==typeof o){if(e>0){const n=t.slice(e,t.length).join(".");if(n in o){o=o[n];break}}o=o[t[e]];}else o=void 0;return o}(t,n)}function m(e,...n){delete i[e],a.update((o=>(o[e]=t.all([o[e]||{},...n]),o)));}derived([a],(([e])=>Object.keys(e)));a.subscribe((e=>l=e));const d={};function g(e){return d[e]}function h(e){return null!=e&&E(e).some((e=>{var n;return null===(n=g(e))||void 0===n?void 0:n.size}))}function w(e,n){const t=Promise.all(n.map((n=>(function(e,n){d[e].delete(n),0===d[e].size&&delete d[e];}(e,n),n().then((e=>e.default||e))))));return t.then((n=>m(e,...n)))}const p={};function b(e){if(!h(e))return e in p?p[e]:Promise.resolve();const n=function(e){return E(e).map((e=>{const n=g(e);return [e,n?[...n]:[]]})).filter((([,e])=>e.length>0))}(e);return p[e]=Promise.all(n.map((([e,n])=>w(e,n)))).then((()=>{if(h(e))return b(e);delete p[e];})),p[e]}const M={fallbackLocale:null,loadingDelay:200,formats:{number:{scientific:{notation:"scientific"},engineering:{notation:"engineering"},compactLong:{notation:"compact",compactDisplay:"long"},compactShort:{notation:"compact",compactDisplay:"short"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},warnOnMissingMessages:!0,handleMissingMessage:void 0,ignoreTag:!0};function j(){return M}const $=writable(!1);let k;const T=writable(null);function L(e){return e.split("-").map(((e,n,t)=>t.slice(0,n+1).join("-"))).reverse()}function E(e,n=j().fallbackLocale){const t=L(e);return n?[...new Set([...t,...L(n)])]:t}function D(){return null!=k?k:void 0}T.subscribe((e=>{k=null!=e?e:void 0,"undefined"!=typeof window&&null!=e&&document.documentElement.setAttribute("lang",e);}));const x={...T,set:e=>{if(e&&function(e){if(null==e)return;const n=E(e);for(let e=0;e<n.length;e++){const t=n[e];if(u(t))return t}}(e)&&h(e)){const{loadingDelay:n}=j();let t;return "undefined"!=typeof window&&null!=D()&&n?t=window.setTimeout((()=>$.set(!0)),n):$.set(!0),b(e).then((()=>{T.set(e);})).finally((()=>{clearTimeout(t),$.set(!1);}))}return T.set(e)}},Z=e=>{const n=Object.create(null);return t=>{const o=JSON.stringify(t);return o in n?n[o]:n[o]=e(t)}},C=(e,n)=>{const{formats:t}=j();if(e in t&&n in t[e])return t[e][n];throw new Error(`[svelte-i18n] Unknown "${n}" ${e} format.`)},G=Z((({locale:e,format:n,...t})=>{if(null==e)throw new Error('[svelte-i18n] A "locale" must be set to format numbers');return n&&(t=C("number",n)),new Intl.NumberFormat(e,t)})),J=Z((({locale:e,format:n,...t})=>{if(null==e)throw new Error('[svelte-i18n] A "locale" must be set to format dates');return n?t=C("date",n):0===Object.keys(t).length&&(t=C("date","short")),new Intl.DateTimeFormat(e,t)})),U=Z((({locale:e,format:n,...t})=>{if(null==e)throw new Error('[svelte-i18n] A "locale" must be set to format time values');return n?t=C("time",n):0===Object.keys(t).length&&(t=C("time","short")),new Intl.DateTimeFormat(e,t)})),V=({locale:e=D(),...n}={})=>G({locale:e,...n}),_=({locale:e=D(),...n}={})=>J({locale:e,...n}),q=({locale:e=D(),...n}={})=>U({locale:e,...n}),B=Z(((e,n=D())=>new IntlMessageFormat(e,n,j().formats,{ignoreTag:j().ignoreTag}))),H=(e,n={})=>{var t,o,i,r;let l=n;"object"==typeof e&&(l=e,e=l.id);const{values:a,locale:u=D(),default:c}=l;if(null==u)throw new Error("[svelte-i18n] Cannot format a message without first setting the initial locale.");let m=s(e,u);if(m){if("string"!=typeof m)return console.warn(`[svelte-i18n] Message with id "${e}" must be of type "string", found: "${typeof m}". Gettin its value through the "$format" method is deprecated; use the "json" method instead.`),m}else m=null!==(r=null!==(i=null===(o=(t=j()).handleMissingMessage)||void 0===o?void 0:o.call(t,{locale:u,id:e,defaultValue:c}))&&void 0!==i?i:c)&&void 0!==r?r:e;if(!a)return m;let f=m;try{f=B(m,u).format(a);}catch(n){n instanceof Error&&console.warn(`[svelte-i18n] Message "${e}" has syntax error:`,n.message);}return f},K=(e,n)=>q(n).format(e),Q=(e,n)=>_(n).format(e),R=(e,n)=>V(n).format(e),W=(e,n=D())=>s(e,n),X=derived([x,a],(()=>H));derived([x],(()=>K));derived([x],(()=>Q));derived([x],(()=>R));derived([x,a],(()=>W));

class ShareError extends Error {
  constructor(message) {
    super(message);
    this.name = "ShareError";
  }
}
async function uploadToHuggingFace(data, type) {
  if (window.__gradio_space__ == null) {
    throw new ShareError("Must be on Spaces to share.");
  }
  let blob;
  let contentType;
  let filename;
  if (type === "url") {
    const response = await fetch(data);
    blob = await response.blob();
    contentType = response.headers.get("content-type") || "";
    filename = response.headers.get("content-disposition") || "";
  } else {
    blob = dataURLtoBlob(data);
    contentType = data.split(";")[0].split(":")[1];
    filename = "file" + contentType.split("/")[1];
  }
  const file = new File([blob], filename, { type: contentType });
  const uploadResponse = await fetch("https://huggingface.co/uploads", {
    method: "POST",
    body: file,
    headers: {
      "Content-Type": file.type,
      "X-Requested-With": "XMLHttpRequest"
    }
  });
  if (!uploadResponse.ok) {
    if (uploadResponse.headers.get("content-type")?.includes("application/json")) {
      const error = await uploadResponse.json();
      throw new ShareError(`Upload failed: ${error.error}`);
    }
    throw new ShareError(`Upload failed.`);
  }
  const result = await uploadResponse.text();
  return result;
}
function dataURLtoBlob(dataurl) {
  var arr = dataurl.split(","), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
}
function copy(node) {
  node.addEventListener("click", handle_copy);
  async function handle_copy(event) {
    const path = event.composedPath();
    const [copy_button] = path.filter(
      (e) => e?.tagName === "BUTTON" && e.classList.contains("copy_code_button")
    );
    if (copy_button) {
      let copy_feedback = function(_copy_sucess_button) {
        _copy_sucess_button.style.opacity = "1";
        setTimeout(() => {
          _copy_sucess_button.style.opacity = "0";
        }, 2e3);
      };
      event.stopImmediatePropagation();
      const copy_text = copy_button.parentElement.innerText.trim();
      const copy_sucess_button = Array.from(
        copy_button.children
      )[1];
      const copied = await copy_to_clipboard(copy_text);
      if (copied)
        copy_feedback(copy_sucess_button);
    }
  }
  return {
    destroy() {
      node.removeEventListener("click", handle_copy);
    }
  };
}
async function copy_to_clipboard(value) {
  let copied = false;
  if ("clipboard" in navigator) {
    await navigator.clipboard.writeText(value);
    copied = true;
  } else {
    const textArea = document.createElement("textarea");
    textArea.value = value;
    textArea.style.position = "absolute";
    textArea.style.left = "-999999px";
    document.body.prepend(textArea);
    textArea.select();
    try {
      document.execCommand("copy");
      copied = true;
    } catch (error) {
      console.error(error);
      copied = false;
    } finally {
      textArea.remove();
    }
  }
  return copied;
}
get_store_value(X);

const UploadText_svelte_svelte_type_style_lang = '';

function normalise_file(file, root, root_url) {
  if (file == null)
    return null;
  if (typeof file === "string") {
    return {
      name: "file_data",
      data: file
    };
  } else if (Array.isArray(file)) {
    const normalized_file = [];
    for (const x of file) {
      if (x === null) {
        normalized_file.push(null);
      } else {
        normalized_file.push(normalise_file(x, root, root_url));
      }
    }
    return normalized_file;
  } else if (file.is_file) {
    file.data = get_fetchable_url_or_file(file.name, root, root_url);
  } else if (file.is_stream) {
    if (root_url == null) {
      file.data = root + "/stream/" + file.name;
    } else {
      file.data = "/proxy=" + root_url + "stream/" + file.name;
    }
  }
  return file;
}
function is_url(str) {
  try {
    const url = new URL(str);
    return url.protocol === "http:" || url.protocol === "https:";
  } catch {
    return false;
  }
}
function get_fetchable_url_or_file(path, root, root_url) {
  if (path == null) {
    return root_url ? `/proxy=${root_url}file=` : `${root}/file=`;
  }
  if (is_url(path)) {
    return path;
  }
  return root_url ? `/proxy=${root_url}file=${path}` : `${root}/file=${path}`;
}
const blobToBase64 = (blob) => {
  const reader = new FileReader();
  reader.readAsDataURL(blob);
  return new Promise((resolve) => {
    reader.onloadend = () => {
      resolve(reader.result);
    };
  });
};

const Upload_svelte_svelte_type_style_lang = '';

const ModifyUpload_svelte_svelte_type_style_lang = '';

const Button_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/button/static/Button.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/button/static/Button.svelte";

// (39:0) {:else}
function create_else_block(ctx) {
	let button;
	let t;
	let button_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[7] && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	const block = {
		c: function create() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			attr_dev(button, "class", button_class_value = "" + (/*size*/ ctx[4] + " " + /*variant*/ ctx[3] + " " + /*elem_classes*/ ctx[1].join(' ') + " s-n0P_6RGHYIkh"));
			attr_dev(button, "id", /*elem_id*/ ctx[0]);
			button.disabled = /*disabled*/ ctx[8];
			toggle_class(button, "hidden", !/*visible*/ ctx[2]);
			set_style(button, "flex-grow", /*scale*/ ctx[9]);
			set_style(button, "width", /*scale*/ ctx[9] === 0 ? "fit-content" : null);

			set_style(button, "min-width", typeof /*min_width*/ ctx[10] === "number"
			? `calc(min(${/*min_width*/ ctx[10]}px, 100%))`
			: null);

			add_location(button, file, 41, 1, 1062);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append_dev(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[16], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*size, variant, elem_classes*/ 26 && button_class_value !== (button_class_value = "" + (/*size*/ ctx[4] + " " + /*variant*/ ctx[3] + " " + /*elem_classes*/ ctx[1].join(' ') + " s-n0P_6RGHYIkh"))) {
				attr_dev(button, "class", button_class_value);
			}

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(button, "id", /*elem_id*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 256) {
				prop_dev(button, "disabled", /*disabled*/ ctx[8]);
			}

			if (!current || dirty & /*size, variant, elem_classes, visible*/ 30) {
				toggle_class(button, "hidden", !/*visible*/ ctx[2]);
			}

			if (dirty & /*scale*/ 512) {
				set_style(button, "flex-grow", /*scale*/ ctx[9]);
			}

			if (dirty & /*scale*/ 512) {
				set_style(button, "width", /*scale*/ ctx[9] === 0 ? "fit-content" : null);
			}

			if (dirty & /*min_width*/ 1024) {
				set_style(button, "min-width", typeof /*min_width*/ ctx[10] === "number"
				? `calc(min(${/*min_width*/ ctx[10]}px, 100%))`
				: null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(39:0) {:else}",
		ctx
	});

	return block;
}

// (18:0) {#if link && link.length > 0}
function create_if_block(ctx) {
	let a;
	let t;
	let a_class_value;
	let current;
	let if_block = /*icon*/ ctx[7] && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	const block = {
		c: function create() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			attr_dev(a, "href", /*link*/ ctx[6]);
			attr_dev(a, "rel", "noopener noreferrer");
			attr_dev(a, "aria-disabled", /*disabled*/ ctx[8]);
			attr_dev(a, "class", a_class_value = "" + (/*size*/ ctx[4] + " " + /*variant*/ ctx[3] + " " + /*elem_classes*/ ctx[1].join(' ') + " s-n0P_6RGHYIkh"));
			attr_dev(a, "id", /*elem_id*/ ctx[0]);
			toggle_class(a, "hidden", !/*visible*/ ctx[2]);
			toggle_class(a, "disabled", /*disabled*/ ctx[8]);
			set_style(a, "flex-grow", /*scale*/ ctx[9]);
			set_style(a, "pointer-events", /*disabled*/ ctx[8] ? "none" : null);
			set_style(a, "width", /*scale*/ ctx[9] === 0 ? "fit-content" : null);

			set_style(a, "min-width", typeof /*min_width*/ ctx[10] === "number"
			? `calc(min(${/*min_width*/ ctx[10]}px, 100%))`
			: null);

			add_location(a, file, 20, 1, 535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append_dev(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*link*/ 64) {
				attr_dev(a, "href", /*link*/ ctx[6]);
			}

			if (!current || dirty & /*disabled*/ 256) {
				attr_dev(a, "aria-disabled", /*disabled*/ ctx[8]);
			}

			if (!current || dirty & /*size, variant, elem_classes*/ 26 && a_class_value !== (a_class_value = "" + (/*size*/ ctx[4] + " " + /*variant*/ ctx[3] + " " + /*elem_classes*/ ctx[1].join(' ') + " s-n0P_6RGHYIkh"))) {
				attr_dev(a, "class", a_class_value);
			}

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(a, "id", /*elem_id*/ ctx[0]);
			}

			if (!current || dirty & /*size, variant, elem_classes, visible*/ 30) {
				toggle_class(a, "hidden", !/*visible*/ ctx[2]);
			}

			if (!current || dirty & /*size, variant, elem_classes, disabled*/ 282) {
				toggle_class(a, "disabled", /*disabled*/ ctx[8]);
			}

			if (dirty & /*scale*/ 512) {
				set_style(a, "flex-grow", /*scale*/ ctx[9]);
			}

			if (dirty & /*disabled*/ 256) {
				set_style(a, "pointer-events", /*disabled*/ ctx[8] ? "none" : null);
			}

			if (dirty & /*scale*/ 512) {
				set_style(a, "width", /*scale*/ ctx[9] === 0 ? "fit-content" : null);
			}

			if (dirty & /*min_width*/ 1024) {
				set_style(a, "min-width", typeof /*min_width*/ ctx[10] === "number"
				? `calc(min(${/*min_width*/ ctx[10]}px, 100%))`
				: null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}

			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(18:0) {#if link && link.length > 0}",
		ctx
	});

	return block;
}

// (52:2) {#if icon}
function create_if_block_2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "button-icon s-n0P_6RGHYIkh");
			if (!src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[11])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = `${/*value*/ ctx[5]}-icon`);
			add_location(img, file, 54, 3, 1382);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon_path*/ 2048 && !src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[11])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*value*/ 32 && img_alt_value !== (img_alt_value = `${/*value*/ ctx[5]}-icon`)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(img);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(52:2) {#if icon}",
		ctx
	});

	return block;
}

// (34:2) {#if icon}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "button-icon s-n0P_6RGHYIkh");
			if (!src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[11])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = `${/*value*/ ctx[5]}-icon`);
			add_location(img, file, 36, 3, 962);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon_path*/ 2048 && !src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[11])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*value*/ 32 && img_alt_value !== (img_alt_value = `${/*value*/ ctx[5]}-icon`)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(img);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(34:2) {#if icon}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*link*/ ctx[6] && /*link*/ ctx[6].length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let icon_path;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Button', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { variant = "secondary" } = $$props;
	let { size = "lg" } = $$props;
	let { value = null } = $$props;
	let { link = null } = $$props;
	let { icon = null } = $$props;
	let { disabled = false } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { root = "" } = $$props;
	let { root_url = null } = $$props;

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'variant',
		'size',
		'value',
		'link',
		'icon',
		'disabled',
		'scale',
		'min_width',
		'root',
		'root_url'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('link' in $$props) $$invalidate(6, link = $$props.link);
		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(13, root_url = $$props.root_url);
		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_fetchable_url_or_file,
		elem_id,
		elem_classes,
		visible,
		variant,
		size,
		value,
		link,
		icon,
		disabled,
		scale,
		min_width,
		root,
		root_url,
		icon_path
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('link' in $$props) $$invalidate(6, link = $$props.link);
		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
		if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(13, root_url = $$props.root_url);
		if ('icon_path' in $$props) $$invalidate(11, icon_path = $$props.icon_path);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*icon, root, root_url*/ 12416) {
			$$invalidate(11, icon_path = get_fetchable_url_or_file(icon, root, root_url));
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		variant,
		size,
		value,
		link,
		icon,
		disabled,
		scale,
		min_width,
		icon_path,
		root,
		root_url,
		$$scope,
		slots,
		click_handler
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			variant: 3,
			size: 4,
			value: 5,
			link: 6,
			icon: 7,
			disabled: 8,
			scale: 9,
			min_width: 10,
			root: 12,
			root_url: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get link() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set link(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Block as B, Info as I, ShareError as S, Button as a, blobToBase64 as b, colors as c, copy as d, fly as e, fade as f, get_fetchable_url_or_file as g, cubicOut as h, normalise_file as n, ordered_colors as o, uploadToHuggingFace as u };
//# sourceMappingURL=Button-40a1e1cf.js.map
