import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, create_component, mount_component, transition_in, transition_out, destroy_component, text, insert_dev, set_data_dev, detach_dev } from '../../../node/dev/svelte-internal.js';
import { a as Button } from './Button-40a1e1cf.js';
import './index-bbf998f8.js';

/* home/runner/work/gradio/gradio/js/button/static/StaticButton.svelte generated by Svelte v4.0.0 */

// (18:0) <Button  {value}  {variant}  {elem_id}  {elem_classes}  {size}  {scale}  {link}  {icon}  {min_width}  {visible}  {root}  {root_url}  disabled={mode === "static"}  on:click={() => gradio.dispatch("click")} >
function create_default_slot(ctx) {
	let t_value = /*gradio*/ ctx[11].i18n(/*value*/ ctx[3]) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*gradio, value*/ 2056 && t_value !== (t_value = /*gradio*/ ctx[11].i18n(/*value*/ ctx[3]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(18:0) <Button  {value}  {variant}  {elem_id}  {elem_classes}  {size}  {scale}  {link}  {icon}  {min_width}  {visible}  {root}  {root_url}  disabled={mode === \\\"static\\\"}  on:click={() => gradio.dispatch(\\\"click\\\")} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				value: /*value*/ ctx[3],
				variant: /*variant*/ ctx[4],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				size: /*size*/ ctx[6],
				scale: /*scale*/ ctx[7],
				link: /*link*/ ctx[9],
				icon: /*icon*/ ctx[8],
				min_width: /*min_width*/ ctx[10],
				visible: /*visible*/ ctx[2],
				root: /*root*/ ctx[12],
				root_url: /*root_url*/ ctx[13],
				disabled: /*mode*/ ctx[5] === "static",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[14]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button_changes = {};
			if (dirty & /*value*/ 8) button_changes.value = /*value*/ ctx[3];
			if (dirty & /*variant*/ 16) button_changes.variant = /*variant*/ ctx[4];
			if (dirty & /*elem_id*/ 1) button_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) button_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*size*/ 64) button_changes.size = /*size*/ ctx[6];
			if (dirty & /*scale*/ 128) button_changes.scale = /*scale*/ ctx[7];
			if (dirty & /*link*/ 512) button_changes.link = /*link*/ ctx[9];
			if (dirty & /*icon*/ 256) button_changes.icon = /*icon*/ ctx[8];
			if (dirty & /*min_width*/ 1024) button_changes.min_width = /*min_width*/ ctx[10];
			if (dirty & /*visible*/ 4) button_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*root*/ 4096) button_changes.root = /*root*/ ctx[12];
			if (dirty & /*root_url*/ 8192) button_changes.root_url = /*root_url*/ ctx[13];
			if (dirty & /*mode*/ 32) button_changes.disabled = /*mode*/ ctx[5] === "static";

			if (dirty & /*$$scope, gradio, value*/ 34824) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticButton', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let { variant = "secondary" } = $$props;
	let { mode = "dynamic" } = $$props;
	let { size = "lg" } = $$props;
	let { scale = null } = $$props;
	let { icon = null } = $$props;
	let { link = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let { root = "" } = $$props;
	let { root_url = null } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<StaticButton> was created without expected prop 'value'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticButton> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'variant',
		'mode',
		'size',
		'scale',
		'icon',
		'link',
		'min_width',
		'gradio',
		'root',
		'root_url'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticButton> was created with unknown prop '${key}'`);
	});

	const click_handler = () => gradio.dispatch("click");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('mode' in $$props) $$invalidate(5, mode = $$props.mode);
		if ('size' in $$props) $$invalidate(6, size = $$props.size);
		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
		if ('icon' in $$props) $$invalidate(8, icon = $$props.icon);
		if ('link' in $$props) $$invalidate(9, link = $$props.link);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(13, root_url = $$props.root_url);
	};

	$$self.$capture_state = () => ({
		Button,
		elem_id,
		elem_classes,
		visible,
		value,
		variant,
		mode,
		size,
		scale,
		icon,
		link,
		min_width,
		gradio,
		root,
		root_url
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('mode' in $$props) $$invalidate(5, mode = $$props.mode);
		if ('size' in $$props) $$invalidate(6, size = $$props.size);
		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
		if ('icon' in $$props) $$invalidate(8, icon = $$props.icon);
		if ('link' in $$props) $$invalidate(9, link = $$props.link);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(13, root_url = $$props.root_url);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		variant,
		mode,
		size,
		scale,
		icon,
		link,
		min_width,
		gradio,
		root,
		root_url,
		click_handler
	];
}

class StaticButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			variant: 4,
			mode: 5,
			size: 6,
			scale: 7,
			icon: 8,
			link: 9,
			min_width: 10,
			gradio: 11,
			root: 12,
			root_url: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticButton",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mode() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mode(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get link() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set link(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<StaticButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<StaticButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Button as BaseButton, StaticButton as default };
//# sourceMappingURL=index-75c1c1fc.js.map
