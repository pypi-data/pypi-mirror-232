import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, ensure_array_like_dev, validate_each_keys, create_slot, validate_slots, validate_store, component_subscribe, createEventDispatcher, setContext, tick, element, space, attr_dev, add_location, toggle_class, insert_dev, append_dev, update_keyed_each, destroy_block, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev, set_store_value, empty, text, listen_dev, set_data_dev, binding_callbacks, bind, create_component, mount_component, add_flush_callback, destroy_component } from '../../../node/dev/svelte-internal.js';
import { w as writable } from './index-bbf998f8.js';

const Tabs_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/tabs/static/Tabs.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/tabs/static/Tabs.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

// (46:3) {:else}
function create_else_block(ctx) {
	let button;
	let t0_value = /*t*/ ctx[14].name + "";
	let t0;
	let t1;
	let button_id_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[12](/*t*/ ctx[14], /*i*/ ctx[16]);
	}

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();

			attr_dev(button, "id", button_id_value = /*t*/ ctx[14].elem_id
			? /*t*/ ctx[14].elem_id + "-button"
			: null);

			attr_dev(button, "class", "s-md7TpBhKJKxX");
			add_location(button, file, 65, 4, 1461);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*tabs*/ 8 && t0_value !== (t0_value = /*t*/ ctx[14].name + "")) set_data_dev(t0, t0_value);

			if (dirty & /*tabs*/ 8 && button_id_value !== (button_id_value = /*t*/ ctx[14].elem_id
			? /*t*/ ctx[14].elem_id + "-button"
			: null)) {
				attr_dev(button, "id", button_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(46:3) {:else}",
		ctx
	});

	return block;
}

// (42:3) {#if t.id === $selected_tab}
function create_if_block(ctx) {
	let button;
	let t0_value = /*t*/ ctx[14].name + "";
	let t0;
	let t1;
	let button_id_value;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(button, "class", "selected s-md7TpBhKJKxX");

			attr_dev(button, "id", button_id_value = /*t*/ ctx[14].elem_id
			? /*t*/ ctx[14].elem_id + "-button"
			: null);

			add_location(button, file, 61, 4, 1346);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tabs*/ 8 && t0_value !== (t0_value = /*t*/ ctx[14].name + "")) set_data_dev(t0, t0_value);

			if (dirty & /*tabs*/ 8 && button_id_value !== (button_id_value = /*t*/ ctx[14].elem_id
			? /*t*/ ctx[14].elem_id + "-button"
			: null)) {
				attr_dev(button, "id", button_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(42:3) {#if t.id === $selected_tab}",
		ctx
	});

	return block;
}

// (41:2) {#each tabs as t, i (t.id)}
function create_each_block(key_1, ctx) {
	let first;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*t*/ ctx[14].id === /*$selected_tab*/ ctx[4]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
				detach_dev(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(41:2) {#each tabs as t, i (t.id)}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let div1_class_value;
	let current;
	let each_value = ensure_array_like_dev(/*tabs*/ ctx[3]);
	const get_key = ctx => /*t*/ ctx[14].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "tab-nav scroll-hide s-md7TpBhKJKxX");
			add_location(div0, file, 58, 1, 1246);
			attr_dev(div1, "class", div1_class_value = "tabs " + /*elem_classes*/ ctx[2].join(' ') + " s-md7TpBhKJKxX");
			attr_dev(div1, "id", /*elem_id*/ ctx[1]);
			toggle_class(div1, "hide", !/*visible*/ ctx[0]);
			add_location(div1, file, 57, 0, 1166);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			append_dev(div1, t);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*tabs, $selected_tab, change_tab, dispatch*/ 408) {
				each_value = ensure_array_like_dev(/*tabs*/ ctx[3]);
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block, null, get_each_context);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*elem_classes*/ 4 && div1_class_value !== (div1_class_value = "tabs " + /*elem_classes*/ ctx[2].join(' ') + " s-md7TpBhKJKxX")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*elem_id*/ 2) {
				attr_dev(div1, "id", /*elem_id*/ ctx[1]);
			}

			if (!current || dirty & /*elem_classes, visible*/ 5) {
				toggle_class(div1, "hide", !/*visible*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const TABS = {};

function instance$1($$self, $$props, $$invalidate) {
	let $selected_tab_index;
	let $selected_tab;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Tabs', slots, ['default']);
	let { visible = true } = $$props;
	let { elem_id = "id" } = $$props;
	let { elem_classes = [] } = $$props;
	let { selected } = $$props;
	let tabs = [];
	const selected_tab = writable(false);
	validate_store(selected_tab, 'selected_tab');
	component_subscribe($$self, selected_tab, value => $$invalidate(4, $selected_tab = value));
	const selected_tab_index = writable(0);
	validate_store(selected_tab_index, 'selected_tab_index');
	component_subscribe($$self, selected_tab_index, value => $$invalidate(13, $selected_tab_index = value));
	const dispatch = createEventDispatcher();

	setContext(TABS, {
		register_tab: tab => {
			tabs.push({
				name: tab.name,
				id: tab.id,
				elem_id: tab.elem_id
			});

			selected_tab.update(current => current ?? tab.id);
			$$invalidate(3, tabs);
			return tabs.length - 1;
		},
		unregister_tab: tab => {
			const i = tabs.findIndex(t => t.id === tab.id);
			tabs.splice(i, 1);

			selected_tab.update(current => current === tab.id
			? tabs[i]?.id || tabs[tabs.length - 1]?.id
			: current);
		},
		selected_tab,
		selected_tab_index
	});

	function change_tab(id) {
		$$invalidate(9, selected = id);
		set_store_value(selected_tab, $selected_tab = id, $selected_tab);
		set_store_value(selected_tab_index, $selected_tab_index = tabs.findIndex(t => t.id === id), $selected_tab_index);
		dispatch("change");
	}

	$$self.$$.on_mount.push(function () {
		if (selected === undefined && !('selected' in $$props || $$self.$$.bound[$$self.$$.props['selected']])) {
			console.warn("<Tabs> was created without expected prop 'selected'");
		}
	});

	const writable_props = ['visible', 'elem_id', 'elem_classes', 'selected'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
	});

	const click_handler = (t, i) => {
		change_tab(t.id);
		dispatch("select", { value: t.name, index: i });
	};

	$$self.$$set = $$props => {
		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('selected' in $$props) $$invalidate(9, selected = $$props.selected);
		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		TABS,
		setContext,
		createEventDispatcher,
		tick,
		writable,
		visible,
		elem_id,
		elem_classes,
		selected,
		tabs,
		selected_tab,
		selected_tab_index,
		dispatch,
		change_tab,
		$selected_tab_index,
		$selected_tab
	});

	$$self.$inject_state = $$props => {
		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('selected' in $$props) $$invalidate(9, selected = $$props.selected);
		if ('tabs' in $$props) $$invalidate(3, tabs = $$props.tabs);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 512) {
			selected !== null && change_tab(selected);
		}
	};

	return [
		visible,
		elem_id,
		elem_classes,
		tabs,
		$selected_tab,
		selected_tab,
		selected_tab_index,
		dispatch,
		change_tab,
		selected,
		$$scope,
		slots,
		click_handler
	];
}

class Tabs extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			visible: 0,
			elem_id: 1,
			elem_classes: 2,
			selected: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tabs",
			options,
			id: create_fragment$1.name
		});
	}

	get visible() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/tabs/static/StaticTabs.svelte generated by Svelte v4.0.0 */

// (12:0) <Tabs  {visible}  {elem_id}  {elem_classes}  bind:selected  on:change={() => gradio.dispatch("change")}  on:select={(e) => gradio.dispatch("select", e.detail)} >
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(12:0) <Tabs  {visible}  {elem_id}  {elem_classes}  bind:selected  on:change={() => gradio.dispatch(\\\"change\\\")}  on:select={(e) => gradio.dispatch(\\\"select\\\", e.detail)} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let tabs;
	let updating_selected;
	let current;

	function tabs_selected_binding(value) {
		/*tabs_selected_binding*/ ctx[6](value);
	}

	let tabs_props = {
		visible: /*visible*/ ctx[1],
		elem_id: /*elem_id*/ ctx[2],
		elem_classes: /*elem_classes*/ ctx[3],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*selected*/ ctx[0] !== void 0) {
		tabs_props.selected = /*selected*/ ctx[0];
	}

	tabs = new Tabs({ props: tabs_props, $$inline: true });
	binding_callbacks.push(() => bind(tabs, 'selected', tabs_selected_binding));
	tabs.$on("change", /*change_handler*/ ctx[7]);
	tabs.$on("select", /*select_handler*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(tabs.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(tabs, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const tabs_changes = {};
			if (dirty & /*visible*/ 2) tabs_changes.visible = /*visible*/ ctx[1];
			if (dirty & /*elem_id*/ 4) tabs_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty & /*elem_classes*/ 8) tabs_changes.elem_classes = /*elem_classes*/ ctx[3];

			if (dirty & /*$$scope*/ 512) {
				tabs_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				tabs_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			tabs.$set(tabs_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tabs, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticTabs', slots, ['default']);
	const dispatch = createEventDispatcher();
	let { visible = true } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { selected } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (selected === undefined && !('selected' in $$props || $$self.$$.bound[$$self.$$.props['selected']])) {
			console.warn("<StaticTabs> was created without expected prop 'selected'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticTabs> was created without expected prop 'gradio'");
		}
	});

	const writable_props = ['visible', 'elem_id', 'elem_classes', 'selected', 'gradio'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticTabs> was created with unknown prop '${key}'`);
	});

	function tabs_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	const change_handler = () => gradio.dispatch("change");
	const select_handler = e => gradio.dispatch("select", e.detail);

	$$self.$$set = $$props => {
		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
		if ('gradio' in $$props) $$invalidate(4, gradio = $$props.gradio);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Tabs,
		dispatch,
		visible,
		elem_id,
		elem_classes,
		selected,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
		if ('gradio' in $$props) $$invalidate(4, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 1) {
			dispatch("prop_change", { selected });
		}
	};

	return [
		selected,
		visible,
		elem_id,
		elem_classes,
		gradio,
		slots,
		tabs_selected_binding,
		change_handler,
		select_handler,
		$$scope
	];
}

class StaticTabs extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			visible: 1,
			elem_id: 2,
			elem_classes: 3,
			selected: 0,
			gradio: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticTabs",
			options,
			id: create_fragment.name
		});
	}

	get visible() {
		throw new Error("<StaticTabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticTabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticTabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticTabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticTabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticTabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<StaticTabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<StaticTabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticTabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticTabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticTabs$1 = StaticTabs;

export { StaticTabs$1 as S, TABS as T };
//# sourceMappingURL=StaticTabs-902f56ec.js.map
