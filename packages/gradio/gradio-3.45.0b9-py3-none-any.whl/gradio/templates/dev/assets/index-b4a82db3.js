import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, onMount, element, text, attr_dev, add_render_callback, toggle_class, add_location, insert_dev, append_dev, add_iframe_resize_listener, set_data_dev, noop, detach_dev, binding_callbacks } from '../../../node/dev/svelte-internal.js';

const Textbox_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/textbox/example/Textbox.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/textbox/example/Textbox.svelte";

function create_fragment(ctx) {
	let div;
	let t;
	let div_resize_listener;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*value*/ ctx[0]);
			attr_dev(div, "class", "s-7X9hieAYYkmh");
			add_render_callback(() => /*div_elementresize_handler*/ ctx[5].call(div));
			toggle_class(div, "table", /*type*/ ctx[1] === "table");
			toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			toggle_class(div, "selected", /*selected*/ ctx[2]);
			add_location(div, file, 24, 0, 404);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			div_resize_listener = add_iframe_resize_listener(div, /*div_elementresize_handler*/ ctx[5].bind(div));
			/*div_binding*/ ctx[6](div);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);

			if (dirty & /*type*/ 2) {
				toggle_class(div, "table", /*type*/ ctx[1] === "table");
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(div, "selected", /*selected*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			div_resize_listener();
			/*div_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Textbox', slots, []);
	let { value } = $$props;
	let { type } = $$props;
	let { selected = false } = $$props;
	let size;
	let el;

	function set_styles(element, el_width) {
		if (!element || !el_width) return;
		el.style.setProperty("--local-text-width", `${el_width < 150 ? el_width : 200}px`);
		$$invalidate(4, el.style.whiteSpace = "unset", el);
	}

	onMount(() => {
		set_styles(el, size);
	});

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Textbox> was created without expected prop 'value'");
		}

		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
			console.warn("<Textbox> was created without expected prop 'type'");
		}
	});

	const writable_props = ['value', 'type', 'selected'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Textbox> was created with unknown prop '${key}'`);
	});

	function div_elementresize_handler() {
		size = this.clientWidth;
		$$invalidate(3, size);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(4, el);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
	};

	$$self.$capture_state = () => ({
		onMount,
		value,
		type,
		selected,
		size,
		el,
		set_styles
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
		if ('el' in $$props) $$invalidate(4, el = $$props.el);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, type, selected, size, el, div_elementresize_handler, div_binding];
}

class Textbox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0, type: 1, selected: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Textbox",
			options,
			id: create_fragment.name
		});
	}

	get value() {
		throw new Error("<Textbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Textbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Textbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Textbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Textbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Textbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Textbox$1 = Textbox;

export { Textbox$1 as default };
//# sourceMappingURL=index-b4a82db3.js.map
