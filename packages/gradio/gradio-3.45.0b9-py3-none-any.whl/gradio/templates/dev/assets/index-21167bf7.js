import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, onMount, create_component, space, empty, mount_component, insert_dev, transition_in, group_outros, transition_out, check_outros, detach_dev, destroy_component, binding_callbacks, element, attr_dev, add_location, append_dev, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { B as Block, n as normalise_file } from './Button-40a1e1cf.js';
import { S as Static } from './index-bbf998f8.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { E as Empty } from './Empty-d9b102c4.js';
import { F as File } from './File-9ba21648.js';
import { I as IconButton } from './IconButton-33e572dc.js';
import { D as Download } from './Download-b7009333.js';
import { U as Undo } from './Undo-012722f8.js';
import { b as babylonjs_loaders_minExports, a as babylonExports, c as add_new_model, r as reset_camera_position, B as BABYLON, d as BABYLON_LOADERS } from './babylonjs.loaders.min-5155cc12.js';

const Model3D_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/model3D/static/Model3D.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/model3D/static/Model3D.svelte";

// (61:0) {#if value}
function create_if_block$1(ctx) {
	let div1;
	let div0;
	let iconbutton0;
	let t0;
	let a;
	let iconbutton1;
	let a_href_value;
	let a_download_value;
	let t1;
	let canvas_1;
	let current;

	iconbutton0 = new IconButton({
			props: { Icon: Undo, label: "Undo" },
			$$inline: true
		});

	iconbutton0.$on("click", /*click_handler*/ ctx[12]);

	iconbutton1 = new IconButton({
			props: {
				Icon: Download,
				label: /*i18n*/ ctx[3]("common.download")
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			a = element("a");
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			canvas_1 = element("canvas");
			attr_dev(a, "href", a_href_value = /*value*/ ctx[0].data);
			attr_dev(a, "target", window.__is_colab__ ? "_blank" : null);

			attr_dev(a, "download", a_download_value = window.__is_colab__
			? null
			: /*value*/ ctx[0].orig_name || /*value*/ ctx[0].name);

			add_location(a, file, 84, 3, 1755);
			attr_dev(div0, "class", "buttons s-Qz-mMY2rWWU3");
			add_location(div0, file, 82, 2, 1656);
			attr_dev(canvas_1, "class", "s-Qz-mMY2rWWU3");
			add_location(canvas_1, file, 93, 2, 1997);
			attr_dev(div1, "class", "model3D s-Qz-mMY2rWWU3");
			add_location(div1, file, 81, 1, 1632);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(iconbutton0, div0, null);
			append_dev(div0, t0);
			append_dev(div0, a);
			mount_component(iconbutton1, a, null);
			append_dev(div1, t1);
			append_dev(div1, canvas_1);
			/*canvas_1_binding*/ ctx[13](canvas_1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton1_changes = {};
			if (dirty & /*i18n*/ 8) iconbutton1_changes.label = /*i18n*/ ctx[3]("common.download");
			iconbutton1.$set(iconbutton1_changes);

			if (!current || dirty & /*value*/ 1 && a_href_value !== (a_href_value = /*value*/ ctx[0].data)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*value*/ 1 && a_download_value !== (a_download_value = window.__is_colab__
			? null
			: /*value*/ ctx[0].orig_name || /*value*/ ctx[0].name)) {
				attr_dev(a, "download", a_download_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			destroy_component(iconbutton0);
			destroy_component(iconbutton1);
			/*canvas_1_binding*/ ctx[13](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(61:0) {#if value}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[2],
				Icon: File,
				label: /*label*/ ctx[1] || /*i18n*/ ctx[3]("3D_model.3d_model")
			},
			$$inline: true
		});

	let if_block = /*value*/ ctx[0] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 4) blocklabel_changes.show_label = /*show_label*/ ctx[2];
			if (dirty & /*label, i18n*/ 10) blocklabel_changes.label = /*label*/ ctx[1] || /*i18n*/ ctx[3]("3D_model.3d_model");
			blocklabel.$set(blocklabel_changes);

			if (/*value*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*value*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(blocklabel, detaching);
			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let data;
	let name;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Model3D', slots, []);
	let { value } = $$props;
	let { clear_color = [0, 0, 0, 0] } = $$props;
	let { label = "" } = $$props;
	let { show_label } = $$props;
	let { i18n } = $$props;
	let { zoom_speed = 1 } = $$props;
	let { camera_position = [null, null, null] } = $$props;
	babylonjs_loaders_minExports.OBJFileLoader.IMPORT_VERTEX_COLORS = true;
	let canvas;
	let scene;
	let engine;
	let mounted = false;

	onMount(() => {
		engine = new babylonExports.Engine(canvas, true);

		window.addEventListener("resize", () => {
			engine?.resize();
		});

		$$invalidate(9, mounted = true);
	});

	function dispose() {
		if (scene && !scene.isDisposed) {
			scene.dispose();
			engine?.stopRenderLoop();
			engine?.dispose();
			engine = null;
			engine = new babylonExports.Engine(canvas, true);

			window.addEventListener("resize", () => {
				engine?.resize();
			});
		}

		if (engine !== null) {
			scene = add_new_model(canvas, scene, engine, value, clear_color, camera_position, zoom_speed);
		}
	}

	function handle_undo() {
		reset_camera_position(scene, camera_position, zoom_speed);
	}

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Model3D> was created without expected prop 'value'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<Model3D> was created without expected prop 'show_label'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<Model3D> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'value',
		'clear_color',
		'label',
		'show_label',
		'i18n',
		'zoom_speed',
		'camera_position'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Model3D> was created with unknown prop '${key}'`);
	});

	const click_handler = () => handle_undo();

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(4, canvas);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('clear_color' in $$props) $$invalidate(6, clear_color = $$props.clear_color);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('i18n' in $$props) $$invalidate(3, i18n = $$props.i18n);
		if ('zoom_speed' in $$props) $$invalidate(7, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(8, camera_position = $$props.camera_position);
	};

	$$self.$capture_state = () => ({
		BlockLabel,
		IconButton,
		File,
		Download,
		Undo,
		add_new_model,
		reset_camera_position,
		onMount,
		BABYLON,
		BABYLON_LOADERS,
		value,
		clear_color,
		label,
		show_label,
		i18n,
		zoom_speed,
		camera_position,
		canvas,
		scene,
		engine,
		mounted,
		dispose,
		handle_undo,
		name,
		data
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('clear_color' in $$props) $$invalidate(6, clear_color = $$props.clear_color);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('i18n' in $$props) $$invalidate(3, i18n = $$props.i18n);
		if ('zoom_speed' in $$props) $$invalidate(7, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(8, camera_position = $$props.camera_position);
		if ('canvas' in $$props) $$invalidate(4, canvas = $$props.canvas);
		if ('scene' in $$props) scene = $$props.scene;
		if ('engine' in $$props) engine = $$props.engine;
		if ('mounted' in $$props) $$invalidate(9, mounted = $$props.mounted);
		if ('name' in $$props) $$invalidate(10, name = $$props.name);
		if ('data' in $$props) $$invalidate(11, data = $$props.data);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$$invalidate(11, { data, name } = value || { data: undefined, name: undefined }, data, ($$invalidate(10, name), $$invalidate(0, value)));
		}

		if ($$self.$$.dirty & /*canvas, mounted, data, name*/ 3600) {
			canvas && mounted && data != null && name && dispose();
		}
	};

	return [
		value,
		label,
		show_label,
		i18n,
		canvas,
		handle_undo,
		clear_color,
		zoom_speed,
		camera_position,
		mounted,
		name,
		data,
		click_handler,
		canvas_1_binding
	];
}

class Model3D extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			clear_color: 6,
			label: 1,
			show_label: 2,
			i18n: 3,
			zoom_speed: 7,
			camera_position: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Model3D",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clear_color() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clear_color(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom_speed() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom_speed(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get camera_position() {
		throw new Error("<Model3D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set camera_position(value) {
		throw new Error("<Model3D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/model3D/static/StaticModel3d.svelte generated by Svelte v4.0.0 */

// (61:1) {:else}
function create_else_block(ctx) {
	let blocklabel;
	let t;
	let empty_1;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[7],
				Icon: File,
				label: /*label*/ ctx[6] || "3D Model"
			},
			$$inline: true
		});

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 128) blocklabel_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*label*/ 64) blocklabel_changes.label = /*label*/ ctx[6] || "3D Model";
			blocklabel.$set(blocklabel_changes);
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 524288) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(blocklabel, detaching);
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(61:1) {:else}",
		ctx
	});

	return block;
}

// (51:1) {#if value}
function create_if_block(ctx) {
	let model3d;
	let current;

	model3d = new Model3D({
			props: {
				value: /*_value*/ ctx[15],
				i18n: /*gradio*/ ctx[11].i18n,
				clear_color: /*clear_color*/ ctx[4],
				label: /*label*/ ctx[6],
				show_label: /*show_label*/ ctx[7],
				camera_position: /*camera_position*/ ctx[14],
				zoom_speed: /*zoom_speed*/ ctx[13]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(model3d.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(model3d, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const model3d_changes = {};
			if (dirty & /*_value*/ 32768) model3d_changes.value = /*_value*/ ctx[15];
			if (dirty & /*gradio*/ 2048) model3d_changes.i18n = /*gradio*/ ctx[11].i18n;
			if (dirty & /*clear_color*/ 16) model3d_changes.clear_color = /*clear_color*/ ctx[4];
			if (dirty & /*label*/ 64) model3d_changes.label = /*label*/ ctx[6];
			if (dirty & /*show_label*/ 128) model3d_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*camera_position*/ 16384) model3d_changes.camera_position = /*camera_position*/ ctx[14];
			if (dirty & /*zoom_speed*/ 8192) model3d_changes.zoom_speed = /*zoom_speed*/ ctx[13];
			model3d.$set(model3d_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(model3d.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(model3d.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(model3d, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(51:1) {#if value}",
		ctx
	});

	return block;
}

// (67:2) <Empty unpadded_box={true} size="large">
function create_default_slot_1(ctx) {
	let file_1;
	let current;
	file_1 = new File({ $$inline: true });

	const block = {
		c: function create() {
			create_component(file_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(file_1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(file_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(file_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(file_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(67:2) <Empty unpadded_box={true} size=\\\"large\\\">",
		ctx
	});

	return block;
}

// (33:0) <Block  {visible}  variant={value === null ? "dashed" : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  {height} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[11].autoscroll
		},
		{ i18n: /*gradio*/ ctx[11].i18n },
		/*loading_status*/ ctx[5]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 2080)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 2048 && {
						autoscroll: /*gradio*/ ctx[11].autoscroll
					},
					dirty & /*gradio*/ 2048 && { i18n: /*gradio*/ ctx[11].i18n },
					dirty & /*loading_status*/ 32 && get_spread_object(/*loading_status*/ ctx[5])
				])
			: {};

			statustracker.$set(statustracker_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(statustracker, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(33:0) <Block  {visible}  variant={value === null ? \\\"dashed\\\" : \\\"solid\\\"}  border_mode={dragging ? \\\"focus\\\" : \\\"base\\\"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  {height} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				variant: /*value*/ ctx[3] === null ? "dashed" : "solid",
				border_mode: /*dragging*/ ctx[16] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				height: /*height*/ ctx[12],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*value*/ 8) block_changes.variant = /*value*/ ctx[3] === null ? "dashed" : "solid";
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];
			if (dirty & /*height*/ 4096) block_changes.height = /*height*/ ctx[12];

			if (dirty & /*$$scope, _value, gradio, clear_color, label, show_label, camera_position, zoom_speed, value, loading_status*/ 583928) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticModel3d', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let { clear_color } = $$props;
	let { loading_status } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let { height = undefined } = $$props;
	let { zoom_speed = 1 } = $$props;
	let { camera_position = [null, null, null] } = $$props;
	let _value;
	let dragging = false;

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<StaticModel3d> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<StaticModel3d> was created without expected prop 'root_url'");
		}

		if (clear_color === undefined && !('clear_color' in $$props || $$self.$$.bound[$$self.$$.props['clear_color']])) {
			console.warn("<StaticModel3d> was created without expected prop 'clear_color'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticModel3d> was created without expected prop 'loading_status'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticModel3d> was created without expected prop 'label'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<StaticModel3d> was created without expected prop 'show_label'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticModel3d> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'root',
		'root_url',
		'clear_color',
		'loading_status',
		'label',
		'show_label',
		'container',
		'scale',
		'min_width',
		'gradio',
		'height',
		'zoom_speed',
		'camera_position'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticModel3d> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('root' in $$props) $$invalidate(17, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('clear_color' in $$props) $$invalidate(4, clear_color = $$props.clear_color);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
		if ('height' in $$props) $$invalidate(12, height = $$props.height);
		if ('zoom_speed' in $$props) $$invalidate(13, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(14, camera_position = $$props.camera_position);
	};

	$$self.$capture_state = () => ({
		normalise_file,
		Model3D,
		BlockLabel,
		Block,
		Empty,
		File,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		root,
		root_url,
		clear_color,
		loading_status,
		label,
		show_label,
		container,
		scale,
		min_width,
		gradio,
		height,
		zoom_speed,
		camera_position,
		_value,
		dragging
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('root' in $$props) $$invalidate(17, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('clear_color' in $$props) $$invalidate(4, clear_color = $$props.clear_color);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
		if ('height' in $$props) $$invalidate(12, height = $$props.height);
		if ('zoom_speed' in $$props) $$invalidate(13, zoom_speed = $$props.zoom_speed);
		if ('camera_position' in $$props) $$invalidate(14, camera_position = $$props.camera_position);
		if ('_value' in $$props) $$invalidate(15, _value = $$props._value);
		if ('dragging' in $$props) $$invalidate(16, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, root, root_url*/ 393224) {
			$$invalidate(15, _value = normalise_file(value, root, root_url));
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		clear_color,
		loading_status,
		label,
		show_label,
		container,
		scale,
		min_width,
		gradio,
		height,
		zoom_speed,
		camera_position,
		_value,
		dragging,
		root,
		root_url
	];
}

class StaticModel3d extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			root: 17,
			root_url: 18,
			clear_color: 4,
			loading_status: 5,
			label: 6,
			show_label: 7,
			container: 8,
			scale: 9,
			min_width: 10,
			gradio: 11,
			height: 12,
			zoom_speed: 13,
			camera_position: 14
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticModel3d",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clear_color() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clear_color(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom_speed() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom_speed(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get camera_position() {
		throw new Error("<StaticModel3d>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set camera_position(value) {
		throw new Error("<StaticModel3d>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticModel3d$1 = StaticModel3d;

export { StaticModel3d$1 as default };
//# sourceMappingURL=index-21167bf7.js.map
