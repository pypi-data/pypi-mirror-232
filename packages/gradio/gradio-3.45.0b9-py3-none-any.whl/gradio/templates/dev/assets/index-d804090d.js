import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, add_render_callback, validate_slots, createEventDispatcher, tick, space, empty, insert_dev, listen_dev, transition_in, group_outros, transition_out, check_outros, detach_dev, binding_callbacks, bubble, globals, create_component, mount_component, destroy_component, ensure_array_like_dev, element, attr_dev, set_style, toggle_class, add_location, append_dev, add_iframe_resize_listener, destroy_each, src_url_equal, run_all, text, set_data_dev, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { u as uploadToHuggingFace, n as normalise_file, B as Block } from './Button-40a1e1cf.js';
import { S as Static } from './index-bbf998f8.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { I as IconButton } from './IconButton-33e572dc.js';
import { E as Empty } from './Empty-d9b102c4.js';
import { S as ShareButton } from './ShareButton-042010d2.js';
import { M as ModifyUpload } from './ModifyUpload-2176b319.js';
import { D as Download } from './Download-b7009333.js';
import { I as Image } from './Image-ca58ca37.js';
import './Undo-012722f8.js';

async function format_gallery_for_sharing(value) {
  if (!value)
    return "";
  let urls = await Promise.all(
    value.map(async ([image, _]) => {
      if (image === null)
        return "";
      return await uploadToHuggingFace(image.data, "url");
    })
  );
  return `<div style="display: flex; flex-wrap: wrap; gap: 16px">${urls.map((url) => `<img src="${url}" style="height: 400px" />`).join("")}</div>`;
}

const Gallery_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/gallery/static/Gallery.svelte generated by Svelte v4.0.0 */

const { window: window_1 } = globals;
const file = "home/runner/work/gradio/gradio/js/gallery/static/Gallery.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	child_ctx[41] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[42] = list[i];
	child_ctx[43] = list;
	child_ctx[41] = i;
	return child_ctx;
}

// (141:0) {#if show_label}
function create_if_block_6(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[0],
				Icon: Image,
				label: /*label*/ ctx[1] || "Gallery"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty[0] & /*show_label*/ 1) blocklabel_changes.show_label = /*show_label*/ ctx[0];
			if (dirty[0] & /*label*/ 2) blocklabel_changes.label = /*label*/ ctx[1] || "Gallery";
			blocklabel.$set(blocklabel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(141:0) {#if show_label}",
		ctx
	});

	return block;
}

// (146:0) {:else}
function create_else_block(ctx) {
	let t0;
	let div1;
	let div0;
	let t1;
	let div1_resize_listener;
	let current;
	let if_block0 = /*selected_image*/ ctx[12] !== null && /*allow_preview*/ ctx[6] && create_if_block_3(ctx);
	let if_block1 = /*show_share_button*/ ctx[8] && create_if_block_2(ctx);
	let each_value = ensure_array_like_dev(/*_value*/ ctx[11]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "grid-container s-AjTs3EuxGfVu");
			set_style(div0, "--grid-cols", /*grid_cols*/ ctx[3]);
			set_style(div0, "--grid-rows", /*grid_rows*/ ctx[4]);
			set_style(div0, "--object-fit", /*object_fit*/ ctx[7]);
			set_style(div0, "height", /*height*/ ctx[5]);
			toggle_class(div0, "pt-6", /*show_label*/ ctx[0]);
			add_location(div0, file, 245, 2, 6270);
			attr_dev(div1, "class", "grid-wrap s-AjTs3EuxGfVu");
			add_render_callback(() => /*div1_elementresize_handler*/ ctx[34].call(div1));
			toggle_class(div1, "fixed-height", !/*height*/ ctx[5] || /*height*/ ctx[5] == "auto");
			add_location(div1, file, 240, 1, 6153);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			div1_resize_listener = add_iframe_resize_listener(div1, /*div1_elementresize_handler*/ ctx[34].bind(div1));
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*selected_image*/ ctx[12] !== null && /*allow_preview*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*selected_image, allow_preview*/ 4160) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*show_share_button*/ ctx[8]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*show_share_button*/ 256) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*selected_image, _value*/ 6144) {
				each_value = ensure_array_like_dev(/*_value*/ ctx[11]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty[0] & /*grid_cols*/ 8) {
				set_style(div0, "--grid-cols", /*grid_cols*/ ctx[3]);
			}

			if (!current || dirty[0] & /*grid_rows*/ 16) {
				set_style(div0, "--grid-rows", /*grid_rows*/ ctx[4]);
			}

			if (!current || dirty[0] & /*object_fit*/ 128) {
				set_style(div0, "--object-fit", /*object_fit*/ ctx[7]);
			}

			if (!current || dirty[0] & /*height*/ 32) {
				set_style(div0, "height", /*height*/ ctx[5]);
			}

			if (!current || dirty[0] & /*show_label*/ 1) {
				toggle_class(div0, "pt-6", /*show_label*/ ctx[0]);
			}

			if (!current || dirty[0] & /*height*/ 32) {
				toggle_class(div1, "fixed-height", !/*height*/ ctx[5] || /*height*/ ctx[5] == "auto");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(div1);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d();
			destroy_each(each_blocks, detaching);
			div1_resize_listener();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(146:0) {:else}",
		ctx
	});

	return block;
}

// (144:0) {#if value === null || _value === null || _value.length === 0}
function create_if_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty[1] & /*$$scope*/ 8192) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(144:0) {#if value === null || _value === null || _value.length === 0}",
		ctx
	});

	return block;
}

// (147:1) {#if selected_image !== null && allow_preview}
function create_if_block_3(ctx) {
	let div2;
	let div0;
	let t0;
	let modifyupload;
	let t1;
	let img;
	let img_src_value;
	let img_alt_value;
	let img_title_value;
	let t2;
	let t3;
	let div1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*show_download_button*/ ctx[9] && create_if_block_5(ctx);

	modifyupload = new ModifyUpload({
			props: { i18n: /*i18n*/ ctx[10], absolute: false },
			$$inline: true
		});

	modifyupload.$on("clear", /*clear_handler*/ ctx[26]);
	let if_block1 = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption && create_if_block_4(ctx);
	let each_value_1 = ensure_array_like_dev(/*_value*/ ctx[11]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(modifyupload.$$.fragment);
			t1 = space();
			img = element("img");
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "icon-buttons s-AjTs3EuxGfVu");
			add_location(div0, file, 180, 3, 4561);
			attr_dev(img, "data-testid", "detailed-image");
			if (!src_url_equal(img.src, img_src_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].image.data)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption || "");
			attr_dev(img, "title", img_title_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption || null);
			set_style(img, "height", "calc(100% - " + /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption + " ? '80px' : '60px'})");
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "s-AjTs3EuxGfVu");
			toggle_class(img, "with-caption", !!/*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption);
			add_location(img, file, 199, 3, 5097);
			attr_dev(div1, "class", "thumbnails scroll-hide s-AjTs3EuxGfVu");
			attr_dev(div1, "data-testid", "container_el");
			add_location(div1, file, 216, 3, 5636);
			attr_dev(div2, "class", "preview s-AjTs3EuxGfVu");
			add_location(div2, file, 179, 2, 4512);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t0);
			mount_component(modifyupload, div0, null);
			append_dev(div2, t1);
			append_dev(div2, img);
			append_dev(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div2, t3);
			append_dev(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div1, null);
				}
			}

			/*div1_binding*/ ctx[30](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(img, "click", /*click_handler*/ ctx[27], false, false, false, false),
					listen_dev(div2, "keydown", /*on_keydown*/ ctx[18], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_download_button*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*show_download_button*/ 512) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const modifyupload_changes = {};
			if (dirty[0] & /*i18n*/ 1024) modifyupload_changes.i18n = /*i18n*/ ctx[10];
			modifyupload.$set(modifyupload_changes);

			if (!current || dirty[0] & /*_value, selected_image*/ 6144 && !src_url_equal(img.src, img_src_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].image.data)) {
				attr_dev(img, "src", img_src_value);
			}

			if (!current || dirty[0] & /*_value, selected_image*/ 6144 && img_alt_value !== (img_alt_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption || "")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty[0] & /*_value, selected_image*/ 6144 && img_title_value !== (img_title_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption || null)) {
				attr_dev(img, "title", img_title_value);
			}

			if (!current || dirty[0] & /*_value, selected_image*/ 6144) {
				set_style(img, "height", "calc(100% - " + /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption + " ? '80px' : '60px'})");
			}

			if (!current || dirty[0] & /*_value, selected_image*/ 6144) {
				toggle_class(img, "with-caption", !!/*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption);
			}

			if (/*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(div2, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*el, selected_image, _value*/ 14336) {
				each_value_1 = ensure_array_like_dev(/*_value*/ ctx[11]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(modifyupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(modifyupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			if (if_block0) if_block0.d();
			destroy_component(modifyupload);
			if (if_block1) if_block1.d();
			destroy_each(each_blocks, detaching);
			/*div1_binding*/ ctx[30](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(147:1) {#if selected_image !== null && allow_preview}",
		ctx
	});

	return block;
}

// (151:4) {#if show_download_button}
function create_if_block_5(ctx) {
	let a;
	let iconbutton;
	let a_href_value;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Download,
				label: /*i18n*/ ctx[10]("common.download")
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			create_component(iconbutton.$$.fragment);
			attr_dev(a, "href", a_href_value = getHrefValue(/*value*/ ctx[2][/*selected_image*/ ctx[12]]));
			attr_dev(a, "target", window.__is_colab__ ? "_blank" : null);
			attr_dev(a, "download", "image");
			attr_dev(a, "class", "s-AjTs3EuxGfVu");
			add_location(a, file, 182, 5, 4624);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(iconbutton, a, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty[0] & /*i18n*/ 1024) iconbutton_changes.label = /*i18n*/ ctx[10]("common.download");
			iconbutton.$set(iconbutton_changes);

			if (!current || dirty[0] & /*value, selected_image*/ 4100 && a_href_value !== (a_href_value = getHrefValue(/*value*/ ctx[2][/*selected_image*/ ctx[12]]))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}

			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(151:4) {#if show_download_button}",
		ctx
	});

	return block;
}

// (181:3) {#if _value[selected_image].caption}
function create_if_block_4(ctx) {
	let div;
	let t_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "caption s-AjTs3EuxGfVu");
			add_location(div, file, 212, 4, 5553);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*_value, selected_image*/ 6144 && t_value !== (t_value = /*_value*/ ctx[11][/*selected_image*/ ctx[12]].caption + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(181:3) {#if _value[selected_image].caption}",
		ctx
	});

	return block;
}

// (191:4) {#each _value as image, i}
function create_each_block_1(ctx) {
	let button;
	let img;
	let img_src_value;
	let img_title_value;
	let img_alt_value;
	let t;
	let i = /*i*/ ctx[41];
	let mounted;
	let dispose;
	const assign_button = () => /*button_binding*/ ctx[28](button, i);
	const unassign_button = () => /*button_binding*/ ctx[28](null, i);

	function click_handler_1() {
		return /*click_handler_1*/ ctx[29](/*i*/ ctx[41]);
	}

	const block = {
		c: function create() {
			button = element("button");
			img = element("img");
			t = space();
			if (!src_url_equal(img.src, img_src_value = /*image*/ ctx[42].image.data)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "title", img_title_value = /*image*/ ctx[42].caption || null);
			attr_dev(img, "alt", img_alt_value = /*image*/ ctx[42].caption || null);
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "s-AjTs3EuxGfVu");
			add_location(img, file, 228, 6, 5960);
			attr_dev(button, "class", "thumbnail-item thumbnail-small s-AjTs3EuxGfVu");
			toggle_class(button, "selected", /*selected_image*/ ctx[12] === /*i*/ ctx[41]);
			add_location(button, file, 222, 5, 5782);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, img);
			append_dev(button, t);
			assign_button();

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_1, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*_value*/ 2048 && !src_url_equal(img.src, img_src_value = /*image*/ ctx[42].image.data)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*_value*/ 2048 && img_title_value !== (img_title_value = /*image*/ ctx[42].caption || null)) {
				attr_dev(img, "title", img_title_value);
			}

			if (dirty[0] & /*_value*/ 2048 && img_alt_value !== (img_alt_value = /*image*/ ctx[42].caption || null)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (i !== /*i*/ ctx[41]) {
				unassign_button();
				i = /*i*/ ctx[41];
				assign_button();
			}

			if (dirty[0] & /*selected_image*/ 4096) {
				toggle_class(button, "selected", /*selected_image*/ ctx[12] === /*i*/ ctx[41]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			unassign_button();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(191:4) {#each _value as image, i}",
		ctx
	});

	return block;
}

// (220:3) {#if show_share_button}
function create_if_block_2(ctx) {
	let div;
	let sharebutton;
	let current;

	sharebutton = new ShareButton({
			props: {
				i18n: /*i18n*/ ctx[10],
				value: /*_value*/ ctx[11],
				formatter: format_gallery_for_sharing
			},
			$$inline: true
		});

	sharebutton.$on("share", /*share_handler*/ ctx[31]);
	sharebutton.$on("error", /*error_handler*/ ctx[32]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(sharebutton.$$.fragment);
			attr_dev(div, "class", "icon-button s-AjTs3EuxGfVu");
			add_location(div, file, 251, 4, 6470);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(sharebutton, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sharebutton_changes = {};
			if (dirty[0] & /*i18n*/ 1024) sharebutton_changes.i18n = /*i18n*/ ctx[10];
			if (dirty[0] & /*_value*/ 2048) sharebutton_changes.value = /*_value*/ ctx[11];
			sharebutton.$set(sharebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sharebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sharebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(sharebutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(220:3) {#if show_share_button}",
		ctx
	});

	return block;
}

// (244:5) {#if entry.caption}
function create_if_block_1(ctx) {
	let div;
	let t_value = /*entry*/ ctx[39].caption + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "caption-label s-AjTs3EuxGfVu");
			add_location(div, file, 275, 6, 7019);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*_value*/ 2048 && t_value !== (t_value = /*entry*/ ctx[39].caption + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(244:5) {#if entry.caption}",
		ctx
	});

	return block;
}

// (231:3) {#each _value as entry, i}
function create_each_block(ctx) {
	let button;
	let img;
	let img_alt_value;
	let img_src_value;
	let t0;
	let t1;
	let mounted;
	let dispose;
	let if_block = /*entry*/ ctx[39].caption && create_if_block_1(ctx);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[33](/*i*/ ctx[41]);
	}

	const block = {
		c: function create() {
			button = element("button");
			img = element("img");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			attr_dev(img, "alt", img_alt_value = /*entry*/ ctx[39].caption || "");

			if (!src_url_equal(img.src, img_src_value = typeof /*entry*/ ctx[39].image === "string"
			? /*entry*/ ctx[39].image
			: /*entry*/ ctx[39].image.data)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "s-AjTs3EuxGfVu");
			add_location(img, file, 267, 5, 6831);
			attr_dev(button, "class", "thumbnail-item thumbnail-lg s-AjTs3EuxGfVu");
			toggle_class(button, "selected", /*selected_image*/ ctx[12] === /*i*/ ctx[41]);
			add_location(button, file, 262, 4, 6685);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, img);
			append_dev(button, t0);
			if (if_block) if_block.m(button, null);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_2, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*_value*/ 2048 && img_alt_value !== (img_alt_value = /*entry*/ ctx[39].caption || "")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*_value*/ 2048 && !src_url_equal(img.src, img_src_value = typeof /*entry*/ ctx[39].image === "string"
			? /*entry*/ ctx[39].image
			: /*entry*/ ctx[39].image.data)) {
				attr_dev(img, "src", img_src_value);
			}

			if (/*entry*/ ctx[39].caption) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(button, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*selected_image*/ 4096) {
				toggle_class(button, "selected", /*selected_image*/ ctx[12] === /*i*/ ctx[41]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(231:3) {#each _value as entry, i}",
		ctx
	});

	return block;
}

// (145:1) <Empty unpadded_box={true} size="large">
function create_default_slot$1(ctx) {
	let image;
	let current;
	image = new Image({ $$inline: true });

	const block = {
		c: function create() {
			create_component(image.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(image, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(image, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(145:1) <Empty unpadded_box={true} size=\\\"large\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[25]);
	let if_block0 = /*show_label*/ ctx[0] && create_if_block_6(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[2] === null || /*_value*/ ctx[11] === null || /*_value*/ ctx[11].length === 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "resize", /*onwindowresize*/ ctx[25]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_label*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*show_label*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block1_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function isFileData(obj) {
	return typeof obj === "object" && obj !== null && "data" in obj;
}

function getHrefValue(selected) {
	if (isFileData(selected)) {
		return selected.data;
	} else if (typeof selected === "string") {
		return selected;
	}

	return "";
}

function instance$1($$self, $$props, $$invalidate) {
	let previous;
	let next;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Gallery', slots, []);
	let { show_label = true } = $$props;
	let { label } = $$props;
	let { root = "" } = $$props;
	let { root_url = null } = $$props;
	let { value = null } = $$props;
	let { grid_cols = [2] } = $$props;
	let { grid_rows = undefined } = $$props;
	let { height = "auto" } = $$props;
	let { preview } = $$props;
	let { allow_preview = true } = $$props;
	let { object_fit = "cover" } = $$props;
	let { show_share_button = false } = $$props;
	let { show_download_button = false } = $$props;
	let { i18n } = $$props;
	const dispatch = createEventDispatcher();

	// tracks whether the value of the gallery was reset
	let was_reset = true;

	let _value = null;
	let prevValue = value;
	let selected_image = preview && value?.length ? 0 : null;
	let old_selected_image = selected_image;

	function handle_preview_click(event) {
		const element = event.target;
		const x = event.clientX;
		const width = element.offsetWidth;
		const centerX = width / 2;

		if (x < centerX) {
			$$invalidate(12, selected_image = previous);
		} else {
			$$invalidate(12, selected_image = next);
		}
	}

	function on_keydown(e) {
		switch (e.code) {
			case "Escape":
				e.preventDefault();
				$$invalidate(12, selected_image = null);
				break;
			case "ArrowLeft":
				e.preventDefault();
				$$invalidate(12, selected_image = previous);
				break;
			case "ArrowRight":
				e.preventDefault();
				$$invalidate(12, selected_image = next);
				break;
		}
	}

	let el = [];
	let container_element;

	async function scroll_to_img(index) {
		if (typeof index !== "number") return;
		await tick();
		el[index].focus();
		const { left: container_left, width: container_width } = container_element.getBoundingClientRect();
		const { left, width } = el[index].getBoundingClientRect();
		const relative_left = left - container_left;
		const pos = relative_left + width / 2 - container_width / 2 + container_element.scrollLeft;

		container_element?.scrollTo({
			left: pos < 0 ? 0 : pos,
			behavior: "smooth"
		});
	}

	let client_height = 0;
	let window_height = 0;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<Gallery> was created without expected prop 'label'");
		}

		if (preview === undefined && !('preview' in $$props || $$self.$$.bound[$$self.$$.props['preview']])) {
			console.warn("<Gallery> was created without expected prop 'preview'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<Gallery> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'show_label',
		'label',
		'root',
		'root_url',
		'value',
		'grid_cols',
		'grid_rows',
		'height',
		'preview',
		'allow_preview',
		'object_fit',
		'show_share_button',
		'show_download_button',
		'i18n'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Gallery> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		$$invalidate(16, window_height = window_1.innerHeight);
	}

	const clear_handler = () => $$invalidate(12, selected_image = null);
	const click_handler = event => handle_preview_click(event);

	function button_binding($$value, i) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el[i] = $$value;
			$$invalidate(13, el);
		});
	}

	const click_handler_1 = i => $$invalidate(12, selected_image = i);

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container_element = $$value;
			$$invalidate(14, container_element);
		});
	}

	function share_handler(event) {
		bubble.call(this, $$self, event);
	}

	function error_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_2 = i => $$invalidate(12, selected_image = i);

	function div1_elementresize_handler() {
		client_height = this.clientHeight;
		$$invalidate(15, client_height);
	}

	$$self.$$set = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('root' in $$props) $$invalidate(19, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(20, root_url = $$props.root_url);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('grid_cols' in $$props) $$invalidate(3, grid_cols = $$props.grid_cols);
		if ('grid_rows' in $$props) $$invalidate(4, grid_rows = $$props.grid_rows);
		if ('height' in $$props) $$invalidate(5, height = $$props.height);
		if ('preview' in $$props) $$invalidate(21, preview = $$props.preview);
		if ('allow_preview' in $$props) $$invalidate(6, allow_preview = $$props.allow_preview);
		if ('object_fit' in $$props) $$invalidate(7, object_fit = $$props.object_fit);
		if ('show_share_button' in $$props) $$invalidate(8, show_share_button = $$props.show_share_button);
		if ('show_download_button' in $$props) $$invalidate(9, show_download_button = $$props.show_download_button);
		if ('i18n' in $$props) $$invalidate(10, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		BlockLabel,
		Empty,
		ShareButton,
		ModifyUpload,
		createEventDispatcher,
		tick,
		Download,
		Image,
		normalise_file,
		format_gallery_for_sharing,
		IconButton,
		show_label,
		label,
		root,
		root_url,
		value,
		grid_cols,
		grid_rows,
		height,
		preview,
		allow_preview,
		object_fit,
		show_share_button,
		show_download_button,
		i18n,
		dispatch,
		was_reset,
		_value,
		prevValue,
		selected_image,
		old_selected_image,
		handle_preview_click,
		on_keydown,
		isFileData,
		getHrefValue,
		el,
		container_element,
		scroll_to_img,
		client_height,
		window_height,
		next,
		previous
	});

	$$self.$inject_state = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('root' in $$props) $$invalidate(19, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(20, root_url = $$props.root_url);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('grid_cols' in $$props) $$invalidate(3, grid_cols = $$props.grid_cols);
		if ('grid_rows' in $$props) $$invalidate(4, grid_rows = $$props.grid_rows);
		if ('height' in $$props) $$invalidate(5, height = $$props.height);
		if ('preview' in $$props) $$invalidate(21, preview = $$props.preview);
		if ('allow_preview' in $$props) $$invalidate(6, allow_preview = $$props.allow_preview);
		if ('object_fit' in $$props) $$invalidate(7, object_fit = $$props.object_fit);
		if ('show_share_button' in $$props) $$invalidate(8, show_share_button = $$props.show_share_button);
		if ('show_download_button' in $$props) $$invalidate(9, show_download_button = $$props.show_download_button);
		if ('i18n' in $$props) $$invalidate(10, i18n = $$props.i18n);
		if ('was_reset' in $$props) $$invalidate(22, was_reset = $$props.was_reset);
		if ('_value' in $$props) $$invalidate(11, _value = $$props._value);
		if ('prevValue' in $$props) $$invalidate(23, prevValue = $$props.prevValue);
		if ('selected_image' in $$props) $$invalidate(12, selected_image = $$props.selected_image);
		if ('old_selected_image' in $$props) $$invalidate(24, old_selected_image = $$props.old_selected_image);
		if ('el' in $$props) $$invalidate(13, el = $$props.el);
		if ('container_element' in $$props) $$invalidate(14, container_element = $$props.container_element);
		if ('client_height' in $$props) $$invalidate(15, client_height = $$props.client_height);
		if ('window_height' in $$props) $$invalidate(16, window_height = $$props.window_height);
		if ('next' in $$props) next = $$props.next;
		if ('previous' in $$props) previous = $$props.previous;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, was_reset*/ 4194308) {
			$$invalidate(22, was_reset = value == null || value.length == 0 ? true : was_reset);
		}

		if ($$self.$$.dirty[0] & /*value, root, root_url*/ 1572868) {
			$$invalidate(11, _value = value === null
			? null
			: value.map(data => ({
					image: normalise_file(data.image, root, root_url),
					caption: data.caption
				})));
		}

		if ($$self.$$.dirty[0] & /*prevValue, value, was_reset, preview, selected_image*/ 14684164) {
			if (prevValue !== value) {
				// When value is falsy (clear button or first load),
				// preview determines the selected image
				if (was_reset) {
					$$invalidate(12, selected_image = preview && value?.length ? 0 : null);
					$$invalidate(22, was_reset = false);
				} else // gallery has at least as many elements as it did before
				{
					$$invalidate(
						12,
						selected_image = selected_image !== null && value !== null && selected_image < value.length
						? selected_image
						: null
					);
				}

				$$invalidate(23, prevValue = value);
			}
		}

		if ($$self.$$.dirty[0] & /*selected_image, _value*/ 6144) {
			previous = ((selected_image ?? 0) + (_value?.length ?? 0) - 1) % (_value?.length ?? 0);
		}

		if ($$self.$$.dirty[0] & /*selected_image, _value*/ 6144) {
			next = ((selected_image ?? 0) + 1) % (_value?.length ?? 0);
		}

		if ($$self.$$.dirty[0] & /*selected_image, old_selected_image, _value*/ 16783360) {
			{
				if (selected_image !== old_selected_image) {
					$$invalidate(24, old_selected_image = selected_image);

					if (selected_image !== null) {
						dispatch("select", {
							index: selected_image,
							value: _value?.[selected_image].caption
						});
					}
				}
			}
		}

		if ($$self.$$.dirty[0] & /*allow_preview, selected_image*/ 4160) {
			if (allow_preview) {
				scroll_to_img(selected_image);
			}
		}
	};

	return [
		show_label,
		label,
		value,
		grid_cols,
		grid_rows,
		height,
		allow_preview,
		object_fit,
		show_share_button,
		show_download_button,
		i18n,
		_value,
		selected_image,
		el,
		container_element,
		client_height,
		window_height,
		handle_preview_click,
		on_keydown,
		root,
		root_url,
		preview,
		was_reset,
		prevValue,
		old_selected_image,
		onwindowresize,
		clear_handler,
		click_handler,
		button_binding,
		click_handler_1,
		div1_binding,
		share_handler,
		error_handler,
		click_handler_2,
		div1_elementresize_handler
	];
}

class Gallery extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				show_label: 0,
				label: 1,
				root: 19,
				root_url: 20,
				value: 2,
				grid_cols: 3,
				grid_rows: 4,
				height: 5,
				preview: 21,
				allow_preview: 6,
				object_fit: 7,
				show_share_button: 8,
				show_download_button: 9,
				i18n: 10
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Gallery",
			options,
			id: create_fragment$1.name
		});
	}

	get show_label() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get grid_cols() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set grid_cols(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get grid_rows() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set grid_rows(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get preview() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set preview(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get allow_preview() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allow_preview(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get object_fit() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set object_fit(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_share_button() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_share_button(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_download_button() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_download_button(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/gallery/static/StaticGallery.svelte generated by Svelte v4.0.0 */

// (27:0) <Block  {visible}  variant="solid"  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false}  height={typeof height === "number" ? height : undefined} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let gallery;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[20].autoscroll
		},
		{ i18n: /*gradio*/ ctx[20].i18n },
		/*loading_status*/ ctx[0]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	gallery = new Gallery({
			props: {
				label: /*label*/ ctx[2],
				value: /*value*/ ctx[8],
				show_label: /*show_label*/ ctx[1],
				root: /*root*/ ctx[3],
				root_url: /*root_url*/ ctx[4],
				grid_cols: /*grid_cols*/ ctx[12],
				grid_rows: /*grid_rows*/ ctx[13],
				height: /*height*/ ctx[14],
				preview: /*preview*/ ctx[15],
				object_fit: /*object_fit*/ ctx[17],
				allow_preview: /*allow_preview*/ ctx[16],
				show_share_button: /*show_share_button*/ ctx[18],
				show_download_button: /*show_download_button*/ ctx[19],
				i18n: /*gradio*/ ctx[20].i18n
			},
			$$inline: true
		});

	gallery.$on("select", /*select_handler*/ ctx[21]);
	gallery.$on("share", /*share_handler*/ ctx[22]);
	gallery.$on("error", /*error_handler*/ ctx[23]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(gallery.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(gallery, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 1048577)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 1048576 && {
						autoscroll: /*gradio*/ ctx[20].autoscroll
					},
					dirty & /*gradio*/ 1048576 && { i18n: /*gradio*/ ctx[20].i18n },
					dirty & /*loading_status*/ 1 && get_spread_object(/*loading_status*/ ctx[0])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const gallery_changes = {};
			if (dirty & /*label*/ 4) gallery_changes.label = /*label*/ ctx[2];
			if (dirty & /*value*/ 256) gallery_changes.value = /*value*/ ctx[8];
			if (dirty & /*show_label*/ 2) gallery_changes.show_label = /*show_label*/ ctx[1];
			if (dirty & /*root*/ 8) gallery_changes.root = /*root*/ ctx[3];
			if (dirty & /*root_url*/ 16) gallery_changes.root_url = /*root_url*/ ctx[4];
			if (dirty & /*grid_cols*/ 4096) gallery_changes.grid_cols = /*grid_cols*/ ctx[12];
			if (dirty & /*grid_rows*/ 8192) gallery_changes.grid_rows = /*grid_rows*/ ctx[13];
			if (dirty & /*height*/ 16384) gallery_changes.height = /*height*/ ctx[14];
			if (dirty & /*preview*/ 32768) gallery_changes.preview = /*preview*/ ctx[15];
			if (dirty & /*object_fit*/ 131072) gallery_changes.object_fit = /*object_fit*/ ctx[17];
			if (dirty & /*allow_preview*/ 65536) gallery_changes.allow_preview = /*allow_preview*/ ctx[16];
			if (dirty & /*show_share_button*/ 262144) gallery_changes.show_share_button = /*show_share_button*/ ctx[18];
			if (dirty & /*show_download_button*/ 524288) gallery_changes.show_download_button = /*show_download_button*/ ctx[19];
			if (dirty & /*gradio*/ 1048576) gallery_changes.i18n = /*gradio*/ ctx[20].i18n;
			gallery.$set(gallery_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(gallery.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(gallery.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(gallery, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(27:0) <Block  {visible}  variant=\\\"solid\\\"  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false}  height={typeof height === \\\"number\\\" ? height : undefined} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[7],
				variant: "solid",
				padding: false,
				elem_id: /*elem_id*/ ctx[5],
				elem_classes: /*elem_classes*/ ctx[6],
				container: /*container*/ ctx[9],
				scale: /*scale*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				allow_overflow: false,
				height: typeof /*height*/ ctx[14] === "number"
				? /*height*/ ctx[14]
				: undefined,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 128) block_changes.visible = /*visible*/ ctx[7];
			if (dirty & /*elem_id*/ 32) block_changes.elem_id = /*elem_id*/ ctx[5];
			if (dirty & /*elem_classes*/ 64) block_changes.elem_classes = /*elem_classes*/ ctx[6];
			if (dirty & /*container*/ 512) block_changes.container = /*container*/ ctx[9];
			if (dirty & /*scale*/ 1024) block_changes.scale = /*scale*/ ctx[10];
			if (dirty & /*min_width*/ 2048) block_changes.min_width = /*min_width*/ ctx[11];

			if (dirty & /*height*/ 16384) block_changes.height = typeof /*height*/ ctx[14] === "number"
			? /*height*/ ctx[14]
			: undefined;

			if (dirty & /*$$scope, label, value, show_label, root, root_url, grid_cols, grid_rows, height, preview, object_fit, allow_preview, show_share_button, show_download_button, gradio, loading_status*/ 18870559) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticGallery', slots, []);
	let { loading_status } = $$props;
	let { show_label } = $$props;
	let { label } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { grid_cols = [2] } = $$props;
	let { grid_rows = undefined } = $$props;
	let { height = "auto" } = $$props;
	let { preview } = $$props;
	let { allow_preview = true } = $$props;
	let { object_fit = "cover" } = $$props;
	let { show_share_button = false } = $$props;
	let { show_download_button = false } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticGallery> was created without expected prop 'loading_status'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<StaticGallery> was created without expected prop 'show_label'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticGallery> was created without expected prop 'label'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<StaticGallery> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<StaticGallery> was created without expected prop 'root_url'");
		}

		if (preview === undefined && !('preview' in $$props || $$self.$$.bound[$$self.$$.props['preview']])) {
			console.warn("<StaticGallery> was created without expected prop 'preview'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticGallery> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'loading_status',
		'show_label',
		'label',
		'root',
		'root_url',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'container',
		'scale',
		'min_width',
		'grid_cols',
		'grid_rows',
		'height',
		'preview',
		'allow_preview',
		'object_fit',
		'show_share_button',
		'show_download_button',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticGallery> was created with unknown prop '${key}'`);
	});

	const select_handler = e => gradio.dispatch("select", e.detail);
	const share_handler = e => gradio.dispatch("share", e.detail);
	const error_handler = e => gradio.dispatch("error", e.detail);

	$$self.$$set = $$props => {
		if ('loading_status' in $$props) $$invalidate(0, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(1, show_label = $$props.show_label);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(4, root_url = $$props.root_url);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(8, value = $$props.value);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('grid_cols' in $$props) $$invalidate(12, grid_cols = $$props.grid_cols);
		if ('grid_rows' in $$props) $$invalidate(13, grid_rows = $$props.grid_rows);
		if ('height' in $$props) $$invalidate(14, height = $$props.height);
		if ('preview' in $$props) $$invalidate(15, preview = $$props.preview);
		if ('allow_preview' in $$props) $$invalidate(16, allow_preview = $$props.allow_preview);
		if ('object_fit' in $$props) $$invalidate(17, object_fit = $$props.object_fit);
		if ('show_share_button' in $$props) $$invalidate(18, show_share_button = $$props.show_share_button);
		if ('show_download_button' in $$props) $$invalidate(19, show_download_button = $$props.show_download_button);
		if ('gradio' in $$props) $$invalidate(20, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		Block,
		Gallery,
		StatusTracker: Static,
		loading_status,
		show_label,
		label,
		root,
		root_url,
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		grid_cols,
		grid_rows,
		height,
		preview,
		allow_preview,
		object_fit,
		show_share_button,
		show_download_button,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('loading_status' in $$props) $$invalidate(0, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(1, show_label = $$props.show_label);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('root' in $$props) $$invalidate(3, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(4, root_url = $$props.root_url);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(8, value = $$props.value);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('grid_cols' in $$props) $$invalidate(12, grid_cols = $$props.grid_cols);
		if ('grid_rows' in $$props) $$invalidate(13, grid_rows = $$props.grid_rows);
		if ('height' in $$props) $$invalidate(14, height = $$props.height);
		if ('preview' in $$props) $$invalidate(15, preview = $$props.preview);
		if ('allow_preview' in $$props) $$invalidate(16, allow_preview = $$props.allow_preview);
		if ('object_fit' in $$props) $$invalidate(17, object_fit = $$props.object_fit);
		if ('show_share_button' in $$props) $$invalidate(18, show_share_button = $$props.show_share_button);
		if ('show_download_button' in $$props) $$invalidate(19, show_download_button = $$props.show_download_button);
		if ('gradio' in $$props) $$invalidate(20, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		loading_status,
		show_label,
		label,
		root,
		root_url,
		elem_id,
		elem_classes,
		visible,
		value,
		container,
		scale,
		min_width,
		grid_cols,
		grid_rows,
		height,
		preview,
		allow_preview,
		object_fit,
		show_share_button,
		show_download_button,
		gradio,
		select_handler,
		share_handler,
		error_handler
	];
}

class StaticGallery extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			loading_status: 0,
			show_label: 1,
			label: 2,
			root: 3,
			root_url: 4,
			elem_id: 5,
			elem_classes: 6,
			visible: 7,
			value: 8,
			container: 9,
			scale: 10,
			min_width: 11,
			grid_cols: 12,
			grid_rows: 13,
			height: 14,
			preview: 15,
			allow_preview: 16,
			object_fit: 17,
			show_share_button: 18,
			show_download_button: 19,
			gradio: 20
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticGallery",
			options,
			id: create_fragment.name
		});
	}

	get loading_status() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get grid_cols() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set grid_cols(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get grid_rows() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set grid_rows(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get preview() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set preview(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get allow_preview() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allow_preview(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get object_fit() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set object_fit(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_share_button() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_share_button(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_download_button() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_download_button(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticGallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticGallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticGallery$1 = StaticGallery;

export { StaticGallery$1 as default };
//# sourceMappingURL=index-d804090d.js.map
