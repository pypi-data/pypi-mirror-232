import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, svg_element, attr_dev, add_location, insert_dev, append_dev, noop, detach_dev } from '../../../node/dev/svelte-internal.js';

/* home/runner/work/gradio/gradio/js/icons/src/Music.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/icons/src/Music.svelte";

function create_fragment(ctx) {
	let svg;
	let path;
	let circle0;
	let circle1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			attr_dev(path, "d", "M9 18V5l12-2v13");
			add_location(path, file, 12, 1, 230);
			attr_dev(circle0, "cx", "6");
			attr_dev(circle0, "cy", "18");
			attr_dev(circle0, "r", "3");
			add_location(circle0, file, 13, 1, 260);
			attr_dev(circle1, "cx", "18");
			attr_dev(circle1, "cy", "16");
			attr_dev(circle1, "r", "3");
			add_location(circle1, file, 14, 1, 293);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-music");
			add_location(svg, file, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
			append_dev(svg, circle0);
			append_dev(svg, circle1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Music', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Music> was created with unknown prop '${key}'`);
	});

	return [];
}

class Music extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Music",
			options,
			id: create_fragment.name
		});
	}
}

function loaded(node, { crop_values, autoplay } = {}) {
  function clamp_playback() {
    if (crop_values === void 0)
      return;
    const start_time = crop_values[0] / 100 * node.duration;
    const end_time = crop_values[1] / 100 * node.duration;
    if (node.currentTime < start_time) {
      node.currentTime = start_time;
    }
    if (node.currentTime > end_time) {
      node.currentTime = start_time;
      node.pause();
    }
  }
  async function handle_playback() {
    if (!autoplay)
      return;
    node.pause();
    await node.play();
  }
  node.addEventListener("loadeddata", handle_playback);
  node.addEventListener("timeupdate", clamp_playback);
  return {
    destroy() {
      node.removeEventListener("loadeddata", handle_playback);
      node.removeEventListener("timeupdate", clamp_playback);
    }
  };
}

export { Music as M, loaded as l };
//# sourceMappingURL=utils-38e3d184.js.map
