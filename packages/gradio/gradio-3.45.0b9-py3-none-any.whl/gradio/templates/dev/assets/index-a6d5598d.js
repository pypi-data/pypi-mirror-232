import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, svg_element, attr_dev, add_location, insert_dev, append_dev, noop, detach_dev, createEventDispatcher, ensure_array_like_dev, element, text, space, toggle_class, set_style, set_data_dev, empty, destroy_each, listen_dev, assign, create_component, mount_component, transition_in, transition_out, destroy_component, get_spread_update, get_spread_object, group_outros, check_outros } from '../../../node/dev/svelte-internal.js';
import { S as Static } from './index-bbf998f8.js';
import { B as Block } from './Button-40a1e1cf.js';
import { B as BlockLabel } from './BlockLabel-98c2b0d6.js';
import { E as Empty } from './Empty-d9b102c4.js';

/* home/runner/work/gradio/gradio/js/icons/src/LineChart.svelte generated by Svelte v4.0.0 */

const file$1 = "home/runner/work/gradio/gradio/js/icons/src/LineChart.svelte";

function create_fragment$2(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "M4 2H2v26a2 2 0 0 0 2 2h26v-2H4v-3h22v-8H4v-4h14V5H4Zm20 17v4H4v-4ZM16 7v4H4V7Z");
			add_location(path, file$1, 11, 1, 240);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "class", "iconify iconify--carbon");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			add_location(svg, file$1, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LineChart', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LineChart> was created with unknown prop '${key}'`);
	});

	return [];
}

class LineChart extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LineChart",
			options,
			id: create_fragment$2.name
		});
	}
}

const Label_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/label/static/Label.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/label/static/Label.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (21:1) {#if typeof value === "object" && value.confidences}
function create_if_block$1(ctx) {
	let each_1_anchor;
	let each_value = ensure_array_like_dev(/*value*/ ctx[0].confidences);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value, selectable, dispatch, Math*/ 13) {
				each_value = ensure_array_like_dev(/*value*/ ctx[0].confidences);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(each_1_anchor);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(21:1) {#if typeof value === \\\"object\\\" && value.confidences}",
		ctx
	});

	return block;
}

// (35:6) {#if value.confidences}
function create_if_block_1$1(ctx) {
	let div0;
	let t0;
	let div1;
	let t1_value = Math.round(/*confidence_set*/ ctx[5].confidence * 100) + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			t2 = text("%");
			attr_dev(div0, "class", "line s-tDWn8tRdRX91");
			add_location(div0, file, 43, 7, 1095);
			attr_dev(div1, "class", "confidence s-tDWn8tRdRX91");
			add_location(div1, file, 44, 7, 1123);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t1);
			append_dev(div1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t1_value !== (t1_value = Math.round(/*confidence_set*/ ctx[5].confidence * 100) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t0);
				detach_dev(div1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(35:6) {#if value.confidences}",
		ctx
	});

	return block;
}

// (22:2) {#each value.confidences as confidence_set, i}
function create_each_block(ctx) {
	let div4;
	let div3;
	let div0;
	let t0;
	let div2;
	let div1;
	let t1_value = /*confidence_set*/ ctx[5].label + "";
	let t1;
	let t2;
	let t3;
	let div4_data_testid_value;
	let mounted;
	let dispose;
	let if_block = /*value*/ ctx[0].confidences && create_if_block_1$1(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[4](/*i*/ ctx[7], /*confidence_set*/ ctx[5]);
	}

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			attr_dev(div0, "class", "bar s-tDWn8tRdRX91");
			set_style(div0, "width", /*confidence_set*/ ctx[5].confidence * 100 + "%");
			add_location(div0, file, 39, 5, 910);
			attr_dev(div1, "class", "text s-tDWn8tRdRX91");
			add_location(div1, file, 41, 6, 1011);
			attr_dev(div2, "class", "label s-tDWn8tRdRX91");
			add_location(div2, file, 40, 5, 985);
			attr_dev(div3, "class", "inner-wrap s-tDWn8tRdRX91");
			add_location(div3, file, 38, 4, 880);
			attr_dev(div4, "class", "confidence-set group s-tDWn8tRdRX91");
			attr_dev(div4, "data-testid", div4_data_testid_value = `${/*confidence_set*/ ctx[5].label}-confidence-set`);
			toggle_class(div4, "selectable", /*selectable*/ ctx[2]);
			add_location(div4, file, 30, 3, 656);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div2, t2);
			if (if_block) if_block.m(div2, null);
			append_dev(div4, t3);

			if (!mounted) {
				dispose = listen_dev(div4, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*value*/ 1) {
				set_style(div0, "width", /*confidence_set*/ ctx[5].confidence * 100 + "%");
			}

			if (dirty & /*value*/ 1 && t1_value !== (t1_value = /*confidence_set*/ ctx[5].label + "")) set_data_dev(t1, t1_value);

			if (/*value*/ ctx[0].confidences) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(div2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value*/ 1 && div4_data_testid_value !== (div4_data_testid_value = `${/*confidence_set*/ ctx[5].label}-confidence-set`)) {
				attr_dev(div4, "data-testid", div4_data_testid_value);
			}

			if (dirty & /*selectable*/ 4) {
				toggle_class(div4, "selectable", /*selectable*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div4);
			}

			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:2) {#each value.confidences as confidence_set, i}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let t0_value = /*value*/ ctx[0].label + "";
	let t0;
	let t1;
	let if_block = typeof /*value*/ ctx[0] === "object" && /*value*/ ctx[0].confidences && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr_dev(div0, "class", "output-class s-tDWn8tRdRX91");
			attr_dev(div0, "data-testid", "label-output-value");
			toggle_class(div0, "no-confidence", !("confidences" in /*value*/ ctx[0]));
			set_style(div0, "background-color", /*color*/ ctx[1] || "transparent");
			add_location(div0, file, 16, 1, 223);
			attr_dev(div1, "class", "container s-tDWn8tRdRX91");
			add_location(div1, file, 15, 0, 198);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].label + "")) set_data_dev(t0, t0_value);

			if (dirty & /*value*/ 1) {
				toggle_class(div0, "no-confidence", !("confidences" in /*value*/ ctx[0]));
			}

			if (dirty & /*color*/ 2) {
				set_style(div0, "background-color", /*color*/ ctx[1] || "transparent");
			}

			if (typeof /*value*/ ctx[0] === "object" && /*value*/ ctx[0].confidences) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Label', slots, []);
	let { value } = $$props;
	const dispatch = createEventDispatcher();
	let { color = undefined } = $$props;
	let { selectable = false } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Label> was created without expected prop 'value'");
		}
	});

	const writable_props = ['value', 'color', 'selectable'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Label> was created with unknown prop '${key}'`);
	});

	const click_handler = (i, confidence_set) => {
		dispatch("select", { index: i, value: confidence_set.label });
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('color' in $$props) $$invalidate(1, color = $$props.color);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		value,
		dispatch,
		color,
		selectable
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('color' in $$props) $$invalidate(1, color = $$props.color);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, color, selectable, dispatch, click_handler];
}

class Label extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, color: 1, selectable: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/label/static/StaticLabel.svelte generated by Svelte v4.0.0 */

// (37:1) {#if show_label}
function create_if_block_1(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: LineChart,
				label: /*label*/ ctx[6],
				disable: /*container*/ ctx[7] === false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 64) blocklabel_changes.label = /*label*/ ctx[6];
			if (dirty & /*container*/ 128) blocklabel_changes.disable = /*container*/ ctx[7] === false;
			blocklabel.$set(blocklabel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(37:1) {#if show_label}",
		ctx
	});

	return block;
}

// (47:1) {:else}
function create_else_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(47:1) {:else}",
		ctx
	});

	return block;
}

// (40:1) {#if _label !== undefined && _label !== null}
function create_if_block(ctx) {
	let label_1;
	let current;

	label_1 = new Label({
			props: {
				selectable: /*selectable*/ ctx[12],
				value: /*value*/ ctx[5],
				color: /*color*/ ctx[4]
			},
			$$inline: true
		});

	label_1.$on("select", /*select_handler*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(label_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(label_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_1_changes = {};
			if (dirty & /*selectable*/ 4096) label_1_changes.selectable = /*selectable*/ ctx[12];
			if (dirty & /*value*/ 32) label_1_changes.value = /*value*/ ctx[5];
			if (dirty & /*color*/ 16) label_1_changes.color = /*color*/ ctx[4];
			label_1.$set(label_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(40:1) {#if _label !== undefined && _label !== null}",
		ctx
	});

	return block;
}

// (48:2) <Empty unpadded_box={true}>
function create_default_slot_1(ctx) {
	let labelicon;
	let current;
	labelicon = new LineChart({ $$inline: true });

	const block = {
		c: function create() {
			create_component(labelicon.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(labelicon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(labelicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(labelicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(labelicon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(48:2) <Empty unpadded_box={true}>",
		ctx
	});

	return block;
}

// (22:0) <Block  test_id="label"  {visible}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  padding={false} >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[0].autoscroll },
		{ i18n: /*gradio*/ ctx[0].i18n },
		/*loading_status*/ ctx[10]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	let if_block0 = /*show_label*/ ctx[11] && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*_label*/ ctx[13] !== undefined && /*_label*/ ctx[13] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 1025)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 1 && { autoscroll: /*gradio*/ ctx[0].autoscroll },
					dirty & /*gradio*/ 1 && { i18n: /*gradio*/ ctx[0].i18n },
					dirty & /*loading_status*/ 1024 && get_spread_object(/*loading_status*/ ctx[10])
				])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*show_label*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*show_label*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(if_block1_anchor);
			}

			destroy_component(statustracker, detaching);
			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(22:0) <Block  test_id=\\\"label\\\"  {visible}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  padding={false} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				test_id: "label",
				visible: /*visible*/ ctx[3],
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				container: /*container*/ ctx[7],
				scale: /*scale*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				padding: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*container*/ 128) block_changes.container = /*container*/ ctx[7];
			if (dirty & /*scale*/ 256) block_changes.scale = /*scale*/ ctx[8];
			if (dirty & /*min_width*/ 512) block_changes.min_width = /*min_width*/ ctx[9];

			if (dirty & /*$$scope, selectable, value, color, gradio, _label, label, container, show_label, loading_status*/ 81137) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let confidences;
	let _label;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticLabel', slots, []);
	let { gradio } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { color = undefined } = $$props;
	let { value = {} } = $$props;
	let { label = gradio.i18n("label.label") } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { show_label = true } = $$props;
	let { selectable = false } = $$props;

	$$self.$$.on_mount.push(function () {
		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticLabel> was created without expected prop 'gradio'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticLabel> was created without expected prop 'loading_status'");
		}
	});

	const writable_props = [
		'gradio',
		'elem_id',
		'elem_classes',
		'visible',
		'color',
		'value',
		'label',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'show_label',
		'selectable'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticLabel> was created with unknown prop '${key}'`);
	});

	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(0, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('color' in $$props) $$invalidate(4, color = $$props.color);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('container' in $$props) $$invalidate(7, container = $$props.container);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(10, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('selectable' in $$props) $$invalidate(12, selectable = $$props.selectable);
	};

	$$self.$capture_state = () => ({
		Label,
		LabelIcon: LineChart,
		Block,
		BlockLabel,
		Empty,
		StatusTracker: Static,
		gradio,
		elem_id,
		elem_classes,
		visible,
		color,
		value,
		label,
		container,
		scale,
		min_width,
		loading_status,
		show_label,
		selectable,
		confidences,
		_label
	});

	$$self.$inject_state = $$props => {
		if ('gradio' in $$props) $$invalidate(0, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('color' in $$props) $$invalidate(4, color = $$props.color);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('container' in $$props) $$invalidate(7, container = $$props.container);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(10, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('selectable' in $$props) $$invalidate(12, selectable = $$props.selectable);
		if ('confidences' in $$props) $$invalidate(14, confidences = $$props.confidences);
		if ('_label' in $$props) $$invalidate(13, _label = $$props._label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 32) {
			$$invalidate(14, { confidences, label: _label } = value, confidences, ($$invalidate(13, _label), $$invalidate(5, value)));
		}

		if ($$self.$$.dirty & /*_label, confidences, gradio*/ 24577) {
			(gradio.dispatch("change"));
		}
	};

	return [
		gradio,
		elem_id,
		elem_classes,
		visible,
		color,
		value,
		label,
		container,
		scale,
		min_width,
		loading_status,
		show_label,
		selectable,
		_label,
		confidences,
		select_handler
	];
}

class StaticLabel extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 0,
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			color: 4,
			value: 5,
			label: 6,
			container: 7,
			scale: 8,
			min_width: 9,
			loading_status: 10,
			show_label: 11,
			selectable: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticLabel",
			options,
			id: create_fragment.name
		});
	}

	get gradio() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<StaticLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<StaticLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticLabel$1 = StaticLabel;

export { StaticLabel$1 as default };
//# sourceMappingURL=index-a6d5598d.js.map
