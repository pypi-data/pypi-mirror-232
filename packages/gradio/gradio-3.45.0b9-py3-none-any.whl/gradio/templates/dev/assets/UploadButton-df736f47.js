import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, create_slot, element, space, create_component, attr_dev, add_location, insert_dev, mount_component, listen_dev, prop_dev, transition_in, transition_out, detach_dev, destroy_component, run_all, binding_callbacks, update_slot_base, get_all_dirty_from_scope, get_slot_changes } from '../../../node/dev/svelte-internal.js';
import { a as Button } from './Button-40a1e1cf.js';

const UploadButton_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/uploadbutton/shared/UploadButton.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/uploadbutton/shared/UploadButton.svelte";

// (83:0) <BaseButton  {size}  {variant}  {elem_id}  {elem_classes}  {visible}  on:click={openFileUpload}  {scale}  {min_width}  {disabled} >
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(83:0) <BaseButton  {size}  {variant}  {elem_id}  {elem_classes}  {visible}  on:click={openFileUpload}  {scale}  {min_width}  {disabled} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let input;
	let input_multiple_value;
	let input_webkitdirectory_value;
	let input_mozdirectory_value;
	let input_data_testid_value;
	let t;
	let basebutton;
	let current;
	let mounted;
	let dispose;

	basebutton = new Button({
			props: {
				size: /*size*/ ctx[4],
				variant: /*variant*/ ctx[7],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				visible: /*visible*/ ctx[2],
				scale: /*scale*/ ctx[5],
				min_width: /*min_width*/ ctx[6],
				disabled: /*disabled*/ ctx[9],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", /*openFileUpload*/ ctx[12]);

	const block = {
		c: function create() {
			input = element("input");
			t = space();
			create_component(basebutton.$$.fragment);
			attr_dev(input, "class", "hide s-WehQoCrsjvXd");
			attr_dev(input, "accept", /*accept_file_types*/ ctx[11]);
			attr_dev(input, "type", "file");
			input.multiple = input_multiple_value = /*file_count*/ ctx[3] === "multiple" || undefined;
			attr_dev(input, "webkitdirectory", input_webkitdirectory_value = /*file_count*/ ctx[3] === "directory" || undefined);
			attr_dev(input, "mozdirectory", input_mozdirectory_value = /*file_count*/ ctx[3] === "directory" || undefined);
			attr_dev(input, "data-testid", input_data_testid_value = "" + (/*label*/ ctx[8] + "-upload-button"));
			add_location(input, file, 80, 0, 1751);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			/*input_binding*/ ctx[17](input);
			insert_dev(target, t, anchor);
			mount_component(basebutton, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*loadFilesFromUpload*/ ctx[13], false, false, false, false),
					listen_dev(input, "click", clearInputValue, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*accept_file_types*/ 2048) {
				attr_dev(input, "accept", /*accept_file_types*/ ctx[11]);
			}

			if (!current || dirty & /*file_count*/ 8 && input_multiple_value !== (input_multiple_value = /*file_count*/ ctx[3] === "multiple" || undefined)) {
				prop_dev(input, "multiple", input_multiple_value);
			}

			if (!current || dirty & /*file_count*/ 8 && input_webkitdirectory_value !== (input_webkitdirectory_value = /*file_count*/ ctx[3] === "directory" || undefined)) {
				attr_dev(input, "webkitdirectory", input_webkitdirectory_value);
			}

			if (!current || dirty & /*file_count*/ 8 && input_mozdirectory_value !== (input_mozdirectory_value = /*file_count*/ ctx[3] === "directory" || undefined)) {
				attr_dev(input, "mozdirectory", input_mozdirectory_value);
			}

			if (!current || dirty & /*label*/ 256 && input_data_testid_value !== (input_data_testid_value = "" + (/*label*/ ctx[8] + "-upload-button"))) {
				attr_dev(input, "data-testid", input_data_testid_value);
			}

			const basebutton_changes = {};
			if (dirty & /*size*/ 16) basebutton_changes.size = /*size*/ ctx[4];
			if (dirty & /*variant*/ 128) basebutton_changes.variant = /*variant*/ ctx[7];
			if (dirty & /*elem_id*/ 1) basebutton_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) basebutton_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*visible*/ 4) basebutton_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*scale*/ 32) basebutton_changes.scale = /*scale*/ ctx[5];
			if (dirty & /*min_width*/ 64) basebutton_changes.min_width = /*min_width*/ ctx[6];
			if (dirty & /*disabled*/ 512) basebutton_changes.disabled = /*disabled*/ ctx[9];

			if (dirty & /*$$scope*/ 262144) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(input);
				detach_dev(t);
			}

			/*input_binding*/ ctx[17](null);
			destroy_component(basebutton, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function clearInputValue(e) {
	const target = e.target;
	if (target.value) target.value = "";
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UploadButton', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { file_count } = $$props;
	let { file_types = [] } = $$props;
	let { include_file_metadata = true } = $$props;
	let { size = "lg" } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { variant = "secondary" } = $$props;
	let { label } = $$props;
	let { disabled = false } = $$props;
	let hidden_upload;
	const dispatch = createEventDispatcher();
	let accept_file_types;

	if (file_types == null) {
		accept_file_types = null;
	} else {
		file_types = file_types.map(x => {
			if (x.startsWith(".")) {
				return x;
			}

			return x + "/*";
		});

		accept_file_types = file_types.join(", ");
	}

	function openFileUpload() {
		hidden_upload.click();
	}

	function loadFiles(files) {
		let _files = Array.from(files);

		if (!files.length) {
			return;
		}

		if (file_count === "single") {
			_files = [files[0]];
		}

		var all_file_data = [];

		_files.forEach((f, i) => {
			all_file_data[i] = include_file_metadata
			? {
					name: f.name,
					size: f.size,
					data: "",
					blob: f
				}
			: f;

			if (all_file_data.filter(x => x !== undefined).length === files.length) {
				dispatch("load", file_count == "single"
				? all_file_data[0]
				: all_file_data);
			}
		});
	}

	function loadFilesFromUpload(e) {
		const target = e.target;

		if (!target.files) {
			return;
		}

		loadFiles(target.files);
	}

	$$self.$$.on_mount.push(function () {
		if (file_count === undefined && !('file_count' in $$props || $$self.$$.bound[$$self.$$.props['file_count']])) {
			console.warn("<UploadButton> was created without expected prop 'file_count'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<UploadButton> was created without expected prop 'label'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'file_count',
		'file_types',
		'include_file_metadata',
		'size',
		'scale',
		'min_width',
		'variant',
		'label',
		'disabled'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UploadButton> was created with unknown prop '${key}'`);
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			hidden_upload = $$value;
			$$invalidate(10, hidden_upload);
		});
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('file_count' in $$props) $$invalidate(3, file_count = $$props.file_count);
		if ('file_types' in $$props) $$invalidate(14, file_types = $$props.file_types);
		if ('include_file_metadata' in $$props) $$invalidate(15, include_file_metadata = $$props.include_file_metadata);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('variant' in $$props) $$invalidate(7, variant = $$props.variant);
		if ('label' in $$props) $$invalidate(8, label = $$props.label);
		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ('$$scope' in $$props) $$invalidate(18, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		BaseButton: Button,
		createEventDispatcher,
		elem_id,
		elem_classes,
		visible,
		file_count,
		file_types,
		include_file_metadata,
		size,
		scale,
		min_width,
		variant,
		label,
		disabled,
		hidden_upload,
		dispatch,
		accept_file_types,
		openFileUpload,
		loadFiles,
		loadFilesFromUpload,
		clearInputValue
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('file_count' in $$props) $$invalidate(3, file_count = $$props.file_count);
		if ('file_types' in $$props) $$invalidate(14, file_types = $$props.file_types);
		if ('include_file_metadata' in $$props) $$invalidate(15, include_file_metadata = $$props.include_file_metadata);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('scale' in $$props) $$invalidate(5, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(6, min_width = $$props.min_width);
		if ('variant' in $$props) $$invalidate(7, variant = $$props.variant);
		if ('label' in $$props) $$invalidate(8, label = $$props.label);
		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ('hidden_upload' in $$props) $$invalidate(10, hidden_upload = $$props.hidden_upload);
		if ('accept_file_types' in $$props) $$invalidate(11, accept_file_types = $$props.accept_file_types);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		elem_id,
		elem_classes,
		visible,
		file_count,
		size,
		scale,
		min_width,
		variant,
		label,
		disabled,
		hidden_upload,
		accept_file_types,
		openFileUpload,
		loadFilesFromUpload,
		file_types,
		include_file_metadata,
		slots,
		input_binding,
		$$scope
	];
}

class UploadButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			file_count: 3,
			file_types: 14,
			include_file_metadata: 15,
			size: 4,
			scale: 5,
			min_width: 6,
			variant: 7,
			label: 8,
			disabled: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UploadButton",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get file_count() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set file_count(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get file_types() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set file_types(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get include_file_metadata() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set include_file_metadata(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<UploadButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<UploadButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { UploadButton as U };
//# sourceMappingURL=UploadButton-df736f47.js.map
