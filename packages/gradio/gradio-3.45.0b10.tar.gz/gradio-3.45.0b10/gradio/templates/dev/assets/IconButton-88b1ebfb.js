import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, element, space, create_component, attr_dev, add_location, toggle_class, insert_dev, append_dev, mount_component, listen_dev, transition_in, transition_out, detach_dev, destroy_component, bubble, text, set_data_dev } from '../../../node/dev/svelte-internal.js';
import './Button-71613b11.js';

/* home/runner/work/gradio/gradio/js/atoms/src/IconButton.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/atoms/src/IconButton.svelte";

// (8:1) {#if show_label}
function create_if_block(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*label*/ ctx[1]);
			attr_dev(span, "class", "s-6h1jmE3x23zs");
			add_location(span, file, 8, 17, 210);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(8:1) {#if show_label}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let button;
	let t;
	let div;
	let icon;
	let current;
	let mounted;
	let dispose;
	let if_block = /*show_label*/ ctx[2] && create_if_block(ctx);
	icon = new /*Icon*/ ctx[0]({ $$inline: true });

	const block = {
		c: function create() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			div = element("div");
			create_component(icon.$$.fragment);
			attr_dev(div, "class", "s-6h1jmE3x23zs");
			add_location(div, file, 9, 1, 237);
			attr_dev(button, "aria-label", /*label*/ ctx[1]);
			attr_dev(button, "title", /*label*/ ctx[1]);
			attr_dev(button, "class", "s-6h1jmE3x23zs");
			toggle_class(button, "pending", /*pending*/ ctx[3]);
			add_location(button, file, 7, 0, 128);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append_dev(button, t);
			append_dev(button, div);
			mount_component(icon, div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*show_label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*label*/ 2) {
				attr_dev(button, "aria-label", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*label*/ 2) {
				attr_dev(button, "title", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*pending*/ 8) {
				toggle_class(button, "pending", /*pending*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			if (if_block) if_block.d();
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('IconButton', slots, []);
	let { Icon } = $$props;
	let { label = "" } = $$props;
	let { show_label = false } = $$props;
	let { pending = false } = $$props;

	$$self.$$.on_mount.push(function () {
		if (Icon === undefined && !('Icon' in $$props || $$self.$$.bound[$$self.$$.props['Icon']])) {
			console.warn("<IconButton> was created without expected prop 'Icon'");
		}
	});

	const writable_props = ['Icon', 'label', 'show_label', 'pending'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<IconButton> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('Icon' in $$props) $$invalidate(0, Icon = $$props.Icon);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('pending' in $$props) $$invalidate(3, pending = $$props.pending);
	};

	$$self.$capture_state = () => ({ Icon, label, show_label, pending });

	$$self.$inject_state = $$props => {
		if ('Icon' in $$props) $$invalidate(0, Icon = $$props.Icon);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('pending' in $$props) $$invalidate(3, pending = $$props.pending);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [Icon, label, show_label, pending, click_handler];
}

class IconButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			Icon: 0,
			label: 1,
			show_label: 2,
			pending: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IconButton",
			options,
			id: create_fragment.name
		});
	}

	get Icon() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set Icon(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pending() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pending(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { IconButton as I };
//# sourceMappingURL=IconButton-88b1ebfb.js.map
