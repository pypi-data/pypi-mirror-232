import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, ensure_array_like_dev, validate_slots, element, create_component, space, attr_dev, add_location, insert_dev, mount_component, append_dev, transition_in, transition_out, detach_dev, destroy_component, destroy_each, text, set_data_dev, svg_element, toggle_class, afterUpdate, src_url_equal, binding_callbacks, construct_svelte_component_dev, empty, group_outros, check_outros, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import './Button-71613b11.js';
import { B as BlockTitle } from './BlockTitle-153169b9.js';
import './index-b455ce1a.js';

const getSaliencyColor = (value) => {
  var color = null;
  if (value < 0) {
    color = [52, 152, 219];
  } else {
    color = [231, 76, 60];
  }
  return colorToString(interpolate(Math.abs(value), [255, 255, 255], color));
};
const interpolate = (val, rgb1, rgb2) => {
  if (val > 1) {
    val = 1;
  }
  val = Math.sqrt(val);
  var rgb = [0, 0, 0];
  var i;
  for (i = 0; i < 3; i++) {
    rgb[i] = Math.round(rgb1[i] * (1 - val) + rgb2[i] * val);
  }
  return rgb;
};
const colorToString = (rgb) => {
  return "rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")";
};
function getObjectFitSize(contains, containerWidth, containerHeight, width, height) {
  var doRatio = width / height;
  var cRatio = containerWidth / containerHeight;
  var targetWidth = 0;
  var targetHeight = 0;
  var test = contains ? doRatio > cRatio : doRatio < cRatio;
  if (test) {
    targetWidth = containerWidth;
    targetHeight = targetWidth / doRatio;
  } else {
    targetHeight = containerHeight;
    targetWidth = targetHeight * doRatio;
  }
  return {
    width: targetWidth,
    height: targetHeight,
    x: (containerWidth - targetWidth) / 2,
    y: (containerHeight - targetHeight) / 2
  };
}

const Number_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Number.svelte generated by Svelte v4.0.0 */
const file$8 = "src/components/Interpretation/InterpretationComponents/Number.svelte";

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (8:1) <BlockTitle>
function create_default_slot$8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$8.name,
		type: "slot",
		source: "(8:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (10:2) {#each interpretation as interpret_value}
function create_each_block$6(ctx) {
	let div;
	let t0_value = /*interpret_value*/ ctx[2][0] + "";
	let t0;
	let t1;
	let div_style_value;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "item s-uTdefN5mVHwT");
			attr_dev(div, "style", div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[2][1]));
			add_location(div, file$8, 12, 3, 297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 1 && t0_value !== (t0_value = /*interpret_value*/ ctx[2][0] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*interpretation*/ 1 && div_style_value !== (div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[2][1]))) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(10:2) {#each interpretation as interpret_value}",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let div1;
	let blocktitle;
	let t;
	let div0;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*interpretation*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "range s-uTdefN5mVHwT");
			add_location(div0, file$8, 10, 1, 230);
			attr_dev(div1, "class", "input-number s-uTdefN5mVHwT");
			add_location(div1, file$8, 8, 0, 168);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(blocktitle, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 34) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*getSaliencyColor, interpretation*/ 1) {
				each_value = ensure_array_like_dev(/*interpretation*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Number', slots, []);
	let { interpretation } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Number> was created without expected prop 'interpretation'");
		}
	});

	const writable_props = ['interpretation', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Number> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		interpretation,
		label
	});

	$$self.$inject_state = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [interpretation, label];
}

class Number extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { interpretation: 0, label: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Number",
			options,
			id: create_fragment$9.name
		});
	}

	get interpretation() {
		throw new Error("<Number>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Number>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Number>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Number>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Dropdown_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Dropdown.svelte generated by Svelte v4.0.0 */
const file$7 = "src/components/Interpretation/InterpretationComponents/Dropdown.svelte";

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (9:1) <BlockTitle>
function create_default_slot$7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 4) set_data_dev(t, /*label*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(9:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (11:2) {#each choices as choice, i}
function create_each_block$5(ctx) {
	let li;
	let t0_value = /*choice*/ ctx[3] + "";
	let t0;
	let t1;
	let li_style_value;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(li, "class", "dropdown-item s-Ql-wKMhxhqj8");
			attr_dev(li, "style", li_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[0][/*i*/ ctx[5]]));
			add_location(li, file$7, 13, 3, 290);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*choices*/ 2 && t0_value !== (t0_value = /*choice*/ ctx[3] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*interpretation*/ 1 && li_style_value !== (li_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[0][/*i*/ ctx[5]]))) {
				attr_dev(li, "style", li_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(11:2) {#each choices as choice, i}",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let div;
	let blocktitle;
	let t;
	let ul;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*choices*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(ul, "class", "dropdown-menu s-Ql-wKMhxhqj8");
			add_location(ul, file$7, 11, 1, 229);
			add_location(div, file$7, 9, 0, 188);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(blocktitle, div, null);
			append_dev(div, t);
			append_dev(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 68) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*getSaliencyColor, interpretation, choices*/ 3) {
				each_value = ensure_array_like_dev(/*choices*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Dropdown', slots, []);
	let { interpretation } = $$props;
	let { choices } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Dropdown> was created without expected prop 'interpretation'");
		}

		if (choices === undefined && !('choices' in $$props || $$self.$$.bound[$$self.$$.props['choices']])) {
			console.warn("<Dropdown> was created without expected prop 'choices'");
		}
	});

	const writable_props = ['interpretation', 'choices', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dropdown> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(1, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		interpretation,
		choices,
		label
	});

	$$self.$inject_state = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(1, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [interpretation, choices, label];
}

class Dropdown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$8, create_fragment$8, safe_not_equal, { interpretation: 0, choices: 1, label: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dropdown",
			options,
			id: create_fragment$8.name
		});
	}

	get interpretation() {
		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get choices() {
		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set choices(value) {
		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Checkbox_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Checkbox.svelte generated by Svelte v4.0.0 */
const file$6 = "src/components/Interpretation/InterpretationComponents/Checkbox.svelte";

// (9:1) <BlockTitle>
function create_default_slot$6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(9:1) <BlockTitle>",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let div2;
	let blocktitle;
	let t0;
	let button;
	let div0;
	let div0_style_value;
	let t1;
	let div1;
	let svg;
	let line0;
	let line1;
	let div1_style_value;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			create_component(blocktitle.$$.fragment);
			t0 = space();
			button = element("button");
			div0 = element("div");
			t1 = space();
			div1 = element("div");
			svg = svg_element("svg");
			line0 = svg_element("line");
			line1 = svg_element("line");
			attr_dev(div0, "class", "checkbox s-JiGnucY2rT_2");
			attr_dev(div0, "style", div0_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[2][0]));
			add_location(div0, file$6, 12, 2, 312);
			attr_dev(line0, "x1", "-7.5");
			attr_dev(line0, "y1", "0");
			attr_dev(line0, "x2", "-2.5");
			attr_dev(line0, "y2", "5");
			attr_dev(line0, "stroke", "black");
			attr_dev(line0, "stroke-width", "4");
			attr_dev(line0, "stroke-linecap", "round");
			add_location(line0, file$6, 21, 4, 550);
			attr_dev(line1, "x1", "-2.5");
			attr_dev(line1, "y1", "5");
			attr_dev(line1, "x2", "7.5");
			attr_dev(line1, "y2", "-7.5");
			attr_dev(line1, "stroke", "black");
			attr_dev(line1, "stroke-width", "4");
			attr_dev(line1, "stroke-linecap", "round");
			add_location(line1, file$6, 30, 4, 691);
			attr_dev(svg, "viewBox", "-10 -10 20 20");
			attr_dev(svg, "class", "s-JiGnucY2rT_2");
			add_location(svg, file$6, 20, 3, 516);
			attr_dev(div1, "class", "checkbox s-JiGnucY2rT_2");
			attr_dev(div1, "style", div1_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[2][1]));
			add_location(div1, file$6, 16, 2, 414);
			attr_dev(button, "class", "checkbox-item s-JiGnucY2rT_2");
			toggle_class(button, "selected", /*original*/ ctx[1]);
			add_location(button, file$6, 11, 1, 253);
			attr_dev(div2, "class", "input-checkbox s-JiGnucY2rT_2");
			add_location(div2, file$6, 9, 0, 189);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			mount_component(blocktitle, div2, null);
			append_dev(div2, t0);
			append_dev(div2, button);
			append_dev(button, div0);
			append_dev(button, t1);
			append_dev(button, div1);
			append_dev(div1, svg);
			append_dev(svg, line0);
			append_dev(svg, line1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 9) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (!current || dirty & /*interpretation*/ 4 && div0_style_value !== (div0_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[2][0]))) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (!current || dirty & /*interpretation*/ 4 && div1_style_value !== (div1_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[2][1]))) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (!current || dirty & /*original*/ 2) {
				toggle_class(button, "selected", /*original*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			destroy_component(blocktitle);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Checkbox', slots, []);
	let { label = "" } = $$props;
	let { original } = $$props;
	let { interpretation } = $$props;

	$$self.$$.on_mount.push(function () {
		if (original === undefined && !('original' in $$props || $$self.$$.bound[$$self.$$.props['original']])) {
			console.warn("<Checkbox> was created without expected prop 'original'");
		}

		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Checkbox> was created without expected prop 'interpretation'");
		}
	});

	const writable_props = ['label', 'original', 'interpretation'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Checkbox> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('original' in $$props) $$invalidate(1, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(2, interpretation = $$props.interpretation);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		label,
		original,
		interpretation
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('original' in $$props) $$invalidate(1, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(2, interpretation = $$props.interpretation);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [label, original, interpretation];
}

class Checkbox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { label: 0, original: 1, interpretation: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox",
			options,
			id: create_fragment$7.name
		});
	}

	get label() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get original() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set original(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const CheckboxGroup_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/CheckboxGroup.svelte generated by Svelte v4.0.0 */
const file$5 = "src/components/Interpretation/InterpretationComponents/CheckboxGroup.svelte";

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (10:1) <BlockTitle>
function create_default_slot$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8) set_data_dev(t, /*label*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(10:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (11:1) {#each choices as choice, i}
function create_each_block$4(ctx) {
	let button;
	let div0;
	let div0_style_value;
	let t0;
	let div1;
	let svg;
	let line0;
	let line1;
	let div1_style_value;
	let t1;
	let t2_value = /*choice*/ ctx[4] + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			button = element("button");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			svg = svg_element("svg");
			line0 = svg_element("line");
			line1 = svg_element("line");
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			attr_dev(div0, "class", "checkbox s-RjVXlaqc02rO");
			attr_dev(div0, "style", div0_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]][0]));
			add_location(div0, file$5, 14, 3, 387);
			attr_dev(line0, "x1", "-7.5");
			attr_dev(line0, "y1", "0");
			attr_dev(line0, "x2", "-2.5");
			attr_dev(line0, "y2", "5");
			attr_dev(line0, "stroke", "black");
			attr_dev(line0, "stroke-width", "4");
			attr_dev(line0, "stroke-linecap", "round");
			add_location(line0, file$5, 23, 5, 640);
			attr_dev(line1, "x1", "-2.5");
			attr_dev(line1, "y1", "5");
			attr_dev(line1, "x2", "7.5");
			attr_dev(line1, "y2", "-7.5");
			attr_dev(line1, "stroke", "black");
			attr_dev(line1, "stroke-width", "4");
			attr_dev(line1, "stroke-linecap", "round");
			add_location(line1, file$5, 32, 5, 790);
			attr_dev(svg, "viewBox", "-10 -10 20 20");
			attr_dev(svg, "class", "s-RjVXlaqc02rO");
			add_location(svg, file$5, 22, 4, 605);
			attr_dev(div1, "class", "checkbox s-RjVXlaqc02rO");
			attr_dev(div1, "style", div1_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]][1]));
			add_location(div1, file$5, 18, 3, 496);
			attr_dev(button, "class", "checkbox-item s-RjVXlaqc02rO");
			toggle_class(button, "selected", /*original*/ ctx[0].includes(/*choice*/ ctx[4]));
			add_location(button, file$5, 13, 2, 310);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div0);
			append_dev(button, t0);
			append_dev(button, div1);
			append_dev(div1, svg);
			append_dev(svg, line0);
			append_dev(svg, line1);
			append_dev(button, t1);
			append_dev(button, t2);
			append_dev(button, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 2 && div0_style_value !== (div0_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]][0]))) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (dirty & /*interpretation*/ 2 && div1_style_value !== (div1_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]][1]))) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (dirty & /*choices*/ 4 && t2_value !== (t2_value = /*choice*/ ctx[4] + "")) set_data_dev(t2, t2_value);

			if (dirty & /*original, choices*/ 5) {
				toggle_class(button, "selected", /*original*/ ctx[0].includes(/*choice*/ ctx[4]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(11:1) {#each choices as choice, i}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let div;
	let blocktitle;
	let t;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*choices*/ ctx[2]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "input-checkbox-group s-RjVXlaqc02rO");
			add_location(div, file$5, 10, 0, 209);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(blocktitle, div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 136) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*original, choices, getSaliencyColor, interpretation*/ 7) {
				each_value = ensure_array_like_dev(/*choices*/ ctx[2]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CheckboxGroup', slots, []);
	let { original } = $$props;
	let { interpretation } = $$props;
	let { choices } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (original === undefined && !('original' in $$props || $$self.$$.bound[$$self.$$.props['original']])) {
			console.warn("<CheckboxGroup> was created without expected prop 'original'");
		}

		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<CheckboxGroup> was created without expected prop 'interpretation'");
		}

		if (choices === undefined && !('choices' in $$props || $$self.$$.bound[$$self.$$.props['choices']])) {
			console.warn("<CheckboxGroup> was created without expected prop 'choices'");
		}
	});

	const writable_props = ['original', 'interpretation', 'choices', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CheckboxGroup> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(2, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		original,
		interpretation,
		choices,
		label
	});

	$$self.$inject_state = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(2, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [original, interpretation, choices, label];
}

class CheckboxGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			original: 0,
			interpretation: 1,
			choices: 2,
			label: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CheckboxGroup",
			options,
			id: create_fragment$6.name
		});
	}

	get original() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set original(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get choices() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set choices(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Slider_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Slider.svelte generated by Svelte v4.0.0 */
const file$4 = "src/components/Interpretation/InterpretationComponents/Slider.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (12:1) <BlockTitle>
function create_default_slot$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[5]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 32) set_data_dev(t, /*label*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(12:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (15:2) {#each interpretation as interpret_value}
function create_each_block$3(ctx) {
	let div;
	let div_style_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "style", div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[6]));
			attr_dev(div, "class", "s-NPdY_efjXDn5");
			add_location(div, file$4, 17, 3, 443);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 2 && div_style_value !== (div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[6]))) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(15:2) {#each interpretation as interpret_value}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div2;
	let blocktitle;
	let t0;
	let input;
	let t1;
	let div0;
	let t2;
	let div1;
	let t3;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*interpretation*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			create_component(blocktitle.$$.fragment);
			t0 = space();
			input = element("input");
			t1 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div1 = element("div");
			t3 = text(/*original*/ ctx[0]);
			attr_dev(input, "type", "range");
			input.disabled = true;
			attr_dev(input, "min", /*minimum*/ ctx[2]);
			attr_dev(input, "max", /*maximum*/ ctx[3]);
			attr_dev(input, "step", /*step*/ ctx[4]);
			attr_dev(input, "class", "s-NPdY_efjXDn5");
			add_location(input, file$4, 14, 1, 308);
			attr_dev(div0, "class", "range s-NPdY_efjXDn5");
			add_location(div0, file$4, 15, 1, 376);
			attr_dev(div1, "class", "original s-NPdY_efjXDn5");
			add_location(div1, file$4, 20, 1, 535);
			attr_dev(div2, "class", "input-slider s-NPdY_efjXDn5");
			add_location(div2, file$4, 12, 0, 246);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			mount_component(blocktitle, div2, null);
			append_dev(div2, t0);
			append_dev(div2, input);
			append_dev(div2, t1);
			append_dev(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			append_dev(div2, t2);
			append_dev(div2, div1);
			append_dev(div1, t3);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 544) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (!current || dirty & /*minimum*/ 4) {
				attr_dev(input, "min", /*minimum*/ ctx[2]);
			}

			if (!current || dirty & /*maximum*/ 8) {
				attr_dev(input, "max", /*maximum*/ ctx[3]);
			}

			if (!current || dirty & /*step*/ 16) {
				attr_dev(input, "step", /*step*/ ctx[4]);
			}

			if (dirty & /*getSaliencyColor, interpretation*/ 2) {
				each_value = ensure_array_like_dev(/*interpretation*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*original*/ 1) set_data_dev(t3, /*original*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Slider', slots, []);
	let { original } = $$props;
	let { interpretation } = $$props;
	let { minimum } = $$props;
	let { maximum } = $$props;
	let { step } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (original === undefined && !('original' in $$props || $$self.$$.bound[$$self.$$.props['original']])) {
			console.warn("<Slider> was created without expected prop 'original'");
		}

		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Slider> was created without expected prop 'interpretation'");
		}

		if (minimum === undefined && !('minimum' in $$props || $$self.$$.bound[$$self.$$.props['minimum']])) {
			console.warn("<Slider> was created without expected prop 'minimum'");
		}

		if (maximum === undefined && !('maximum' in $$props || $$self.$$.bound[$$self.$$.props['maximum']])) {
			console.warn("<Slider> was created without expected prop 'maximum'");
		}

		if (step === undefined && !('step' in $$props || $$self.$$.bound[$$self.$$.props['step']])) {
			console.warn("<Slider> was created without expected prop 'step'");
		}
	});

	const writable_props = ['original', 'interpretation', 'minimum', 'maximum', 'step', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Slider> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('minimum' in $$props) $$invalidate(2, minimum = $$props.minimum);
		if ('maximum' in $$props) $$invalidate(3, maximum = $$props.maximum);
		if ('step' in $$props) $$invalidate(4, step = $$props.step);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		original,
		interpretation,
		minimum,
		maximum,
		step,
		label
	});

	$$self.$inject_state = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('minimum' in $$props) $$invalidate(2, minimum = $$props.minimum);
		if ('maximum' in $$props) $$invalidate(3, maximum = $$props.maximum);
		if ('step' in $$props) $$invalidate(4, step = $$props.step);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [original, interpretation, minimum, maximum, step, label];
}

class Slider extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			original: 0,
			interpretation: 1,
			minimum: 2,
			maximum: 3,
			step: 4,
			label: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Slider",
			options,
			id: create_fragment$5.name
		});
	}

	get original() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set original(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get minimum() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set minimum(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maximum() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maximum(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get step() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set step(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Radio_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Radio.svelte generated by Svelte v4.0.0 */
const file$3 = "src/components/Interpretation/InterpretationComponents/Radio.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (10:1) <BlockTitle>
function create_default_slot$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8) set_data_dev(t, /*label*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(10:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (11:1) {#each choices as choice, i}
function create_each_block$2(ctx) {
	let button;
	let div;
	let div_style_value;
	let t0;
	let t1_value = /*choice*/ ctx[4] + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			attr_dev(div, "class", "radio-circle s-pVKicsqg3oyO");
			attr_dev(div, "style", div_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]]));
			add_location(div, file$3, 14, 3, 369);
			attr_dev(button, "class", "radio-item s-pVKicsqg3oyO");
			toggle_class(button, "selected", /*original*/ ctx[0] === /*choice*/ ctx[4]);
			add_location(button, file$3, 13, 2, 301);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 2 && div_style_value !== (div_style_value = "background-color: " + getSaliencyColor(/*interpretation*/ ctx[1][/*i*/ ctx[6]]))) {
				attr_dev(div, "style", div_style_value);
			}

			if (dirty & /*choices*/ 4 && t1_value !== (t1_value = /*choice*/ ctx[4] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*original, choices*/ 5) {
				toggle_class(button, "selected", /*original*/ ctx[0] === /*choice*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(11:1) {#each choices as choice, i}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let div;
	let blocktitle;
	let t;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*choices*/ ctx[2]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "input-radio s-pVKicsqg3oyO");
			add_location(div, file$3, 10, 0, 209);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(blocktitle, div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 136) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*original, choices, getSaliencyColor, interpretation*/ 7) {
				each_value = ensure_array_like_dev(/*choices*/ ctx[2]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Radio', slots, []);
	let { original } = $$props;
	let { interpretation } = $$props;
	let { choices } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (original === undefined && !('original' in $$props || $$self.$$.bound[$$self.$$.props['original']])) {
			console.warn("<Radio> was created without expected prop 'original'");
		}

		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Radio> was created without expected prop 'interpretation'");
		}

		if (choices === undefined && !('choices' in $$props || $$self.$$.bound[$$self.$$.props['choices']])) {
			console.warn("<Radio> was created without expected prop 'choices'");
		}
	});

	const writable_props = ['original', 'interpretation', 'choices', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Radio> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(2, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		original,
		interpretation,
		choices,
		label
	});

	$$self.$inject_state = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
		if ('choices' in $$props) $$invalidate(2, choices = $$props.choices);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [original, interpretation, choices, label];
}

class Radio extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			original: 0,
			interpretation: 1,
			choices: 2,
			label: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Radio",
			options,
			id: create_fragment$4.name
		});
	}

	get original() {
		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set original(value) {
		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get choices() {
		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set choices(value) {
		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Image_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Image.svelte generated by Svelte v4.0.0 */
const file$2 = "src/components/Interpretation/InterpretationComponents/Image.svelte";

// (38:1) <BlockTitle>
function create_default_slot$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(38:1) <BlockTitle>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div2;
	let blocktitle;
	let t0;
	let div1;
	let div0;
	let canvas;
	let t1;
	let img;
	let img_src_value;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			create_component(blocktitle.$$.fragment);
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			canvas = element("canvas");
			t1 = space();
			img = element("img");
			add_location(canvas, file$2, 67, 3, 1340);
			attr_dev(div0, "class", "interpretation s-AlCWw94wKh3x");
			add_location(div0, file$2, 66, 2, 1308);
			if (!src_url_equal(img.src, img_src_value = /*original*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "s-AlCWw94wKh3x");
			add_location(img, file$2, 70, 2, 1437);
			attr_dev(div1, "class", "image-preview s-AlCWw94wKh3x");
			add_location(div1, file$2, 65, 1, 1278);
			attr_dev(div2, "class", "input-image");
			add_location(div2, file$2, 63, 0, 1217);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			mount_component(blocktitle, div2, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, canvas);
			/*canvas_binding*/ ctx[6](canvas);
			append_dev(div1, t1);
			append_dev(div1, img);
			/*img_binding*/ ctx[7](img);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 514) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (!current || dirty & /*original*/ 1 && !src_url_equal(img.src, img_src_value = /*original*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			destroy_component(blocktitle);
			/*canvas_binding*/ ctx[6](null);
			/*img_binding*/ ctx[7](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Image', slots, []);
	let { original } = $$props;
	let { interpretation } = $$props;
	let { shape } = $$props;
	let { label = "" } = $$props;
	let saliency_layer;
	let image;

	function paintSaliency(data, ctx, width, height) {
		var cell_width = width / data[0].length;
		var cell_height = height / data.length;
		var r = 0;

		data.forEach(function (row) {
			var c = 0;

			row.forEach(function (cell) {
				ctx.fillStyle = getSaliencyColor(cell);
				ctx.fillRect(c * cell_width, r * cell_height, cell_width, cell_height);
				c++;
			});

			r++;
		});
	}

	afterUpdate(() => {
		let size = getObjectFitSize(true, image.width, image.height, image.naturalWidth, image.naturalHeight);

		if (shape) {
			size = getObjectFitSize(true, size.width, size.height, shape[0], shape[1]);
		}

		let width = size.width;
		let height = size.height;
		saliency_layer.setAttribute("height", `${height}`);
		saliency_layer.setAttribute("width", `${width}`);
		paintSaliency(interpretation, saliency_layer.getContext("2d"), width, height);
	});

	$$self.$$.on_mount.push(function () {
		if (original === undefined && !('original' in $$props || $$self.$$.bound[$$self.$$.props['original']])) {
			console.warn("<Image> was created without expected prop 'original'");
		}

		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Image> was created without expected prop 'interpretation'");
		}

		if (shape === undefined && !('shape' in $$props || $$self.$$.bound[$$self.$$.props['shape']])) {
			console.warn("<Image> was created without expected prop 'shape'");
		}
	});

	const writable_props = ['original', 'interpretation', 'shape', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			saliency_layer = $$value;
			$$invalidate(2, saliency_layer);
		});
	}

	function img_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			image = $$value;
			$$invalidate(3, image);
		});
	}

	$$self.$$set = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(4, interpretation = $$props.interpretation);
		if ('shape' in $$props) $$invalidate(5, shape = $$props.shape);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		getObjectFitSize,
		afterUpdate,
		BlockTitle,
		original,
		interpretation,
		shape,
		label,
		saliency_layer,
		image,
		paintSaliency
	});

	$$self.$inject_state = $$props => {
		if ('original' in $$props) $$invalidate(0, original = $$props.original);
		if ('interpretation' in $$props) $$invalidate(4, interpretation = $$props.interpretation);
		if ('shape' in $$props) $$invalidate(5, shape = $$props.shape);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('saliency_layer' in $$props) $$invalidate(2, saliency_layer = $$props.saliency_layer);
		if ('image' in $$props) $$invalidate(3, image = $$props.image);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		original,
		label,
		saliency_layer,
		image,
		interpretation,
		shape,
		canvas_binding,
		img_binding
	];
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			original: 0,
			interpretation: 4,
			shape: 5,
			label: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Image",
			options,
			id: create_fragment$3.name
		});
	}

	get original() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set original(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shape() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shape(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Audio_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Audio.svelte generated by Svelte v4.0.0 */
const file$1 = "src/components/Interpretation/InterpretationComponents/Audio.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (8:1) <BlockTitle>
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(8:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (10:2) {#each interpretation as interpret_value}
function create_each_block$1(ctx) {
	let div;
	let div_style_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "item s-DXPuypThOt-p");
			attr_dev(div, "style", div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[2]));
			add_location(div, file$1, 11, 3, 276);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 1 && div_style_value !== (div_style_value = "background-color: " + getSaliencyColor(/*interpret_value*/ ctx[2]))) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(10:2) {#each interpretation as interpret_value}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div1;
	let blocktitle;
	let t;
	let div0;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*interpretation*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "range s-DXPuypThOt-p");
			add_location(div0, file$1, 9, 1, 209);
			add_location(div1, file$1, 7, 0, 168);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(blocktitle, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 34) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*getSaliencyColor, interpretation*/ 1) {
				each_value = ensure_array_like_dev(/*interpretation*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Audio', slots, []);
	let { interpretation } = $$props;
	let { label = "" } = $$props;

	$$self.$$.on_mount.push(function () {
		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Audio> was created without expected prop 'interpretation'");
		}
	});

	const writable_props = ['interpretation', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Audio> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		interpretation,
		label
	});

	$$self.$inject_state = $$props => {
		if ('interpretation' in $$props) $$invalidate(0, interpretation = $$props.interpretation);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [interpretation, label];
}

class Audio extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { interpretation: 0, label: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Audio",
			options,
			id: create_fragment$2.name
		});
	}

	get interpretation() {
		throw new Error("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Audio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Audio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Textbox_svelte_svelte_type_style_lang = '';

/* src/components/Interpretation/InterpretationComponents/Textbox.svelte generated by Svelte v4.0.0 */
const file = "src/components/Interpretation/InterpretationComponents/Textbox.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i][0];
	child_ctx[3] = list[i][1];
	return child_ctx;
}

// (8:1) <BlockTitle>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(8:1) <BlockTitle>",
		ctx
	});

	return block;
}

// (9:1) {#each interpretation as [text, saliency]}
function create_each_block(ctx) {
	let span;
	let t0_value = /*text*/ ctx[2] + "";
	let t0;
	let t1;
	let span_style_value;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(span, "class", "text-span s-bU-RZ3mFqFKf");
			attr_dev(span, "style", span_style_value = "background-color: " + getSaliencyColor(/*saliency*/ ctx[3]));
			add_location(span, file, 10, 2, 273);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*interpretation*/ 2 && t0_value !== (t0_value = /*text*/ ctx[2] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*interpretation*/ 2 && span_style_value !== (span_style_value = "background-color: " + getSaliencyColor(/*saliency*/ ctx[3]))) {
				attr_dev(span, "style", span_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(9:1) {#each interpretation as [text, saliency]}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let blocktitle;
	let t;
	let current;

	blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*interpretation*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			create_component(blocktitle.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "input-text s-bU-RZ3mFqFKf");
			add_location(div, file, 7, 0, 168);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(blocktitle, div, null);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope, label*/ 65) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*getSaliencyColor, interpretation*/ 2) {
				each_value = ensure_array_like_dev(/*interpretation*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(blocktitle);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Textbox', slots, []);
	let { label = "" } = $$props;
	let { interpretation } = $$props;

	$$self.$$.on_mount.push(function () {
		if (interpretation === undefined && !('interpretation' in $$props || $$self.$$.bound[$$self.$$.props['interpretation']])) {
			console.warn("<Textbox> was created without expected prop 'interpretation'");
		}
	});

	const writable_props = ['label', 'interpretation'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Textbox> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
	};

	$$self.$capture_state = () => ({
		getSaliencyColor,
		BlockTitle,
		label,
		interpretation
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('interpretation' in $$props) $$invalidate(1, interpretation = $$props.interpretation);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [label, interpretation];
}

class Textbox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { label: 0, interpretation: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Textbox",
			options,
			id: create_fragment$1.name
		});
	}

	get label() {
		throw new Error("<Textbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Textbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get interpretation() {
		throw new Error("<Textbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set interpretation(value) {
		throw new Error("<Textbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const component_map = {
  audio: Audio,
  dropdown: Dropdown,
  checkbox: Checkbox,
  checkboxgroup: CheckboxGroup,
  number: Number,
  slider: Slider,
  radio: Radio,
  image: Image,
  textbox: Textbox
};

/* src/components/Interpretation/Interpretation.svelte generated by Svelte v4.0.0 */

// (8:0) {#if value}
function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	const switch_instance_spread_levels = [
		/*component_props*/ ctx[0],
		{ original: /*value*/ ctx[1].original },
		{
			interpretation: /*value*/ ctx[1].interpretation
		}
	];

	var switch_value = /*_component*/ ctx[2];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*component_props, value*/ 3)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*component_props*/ 1 && get_spread_object(/*component_props*/ ctx[0]),
					dirty & /*value*/ 2 && { original: /*value*/ ctx[1].original },
					dirty & /*value*/ 2 && {
						interpretation: /*value*/ ctx[1].interpretation
					}
				])
			: {};

			if (dirty & /*_component*/ 4 && switch_value !== (switch_value = /*_component*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(8:0) {#if value}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*value*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*value*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*value*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let _component;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Interpretation', slots, []);
	let { component } = $$props;
	let { component_props } = $$props;
	let { value } = $$props;

	$$self.$$.on_mount.push(function () {
		if (component === undefined && !('component' in $$props || $$self.$$.bound[$$self.$$.props['component']])) {
			console.warn("<Interpretation> was created without expected prop 'component'");
		}

		if (component_props === undefined && !('component_props' in $$props || $$self.$$.bound[$$self.$$.props['component_props']])) {
			console.warn("<Interpretation> was created without expected prop 'component_props'");
		}

		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Interpretation> was created without expected prop 'value'");
		}
	});

	const writable_props = ['component', 'component_props', 'value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Interpretation> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('component' in $$props) $$invalidate(3, component = $$props.component);
		if ('component_props' in $$props) $$invalidate(0, component_props = $$props.component_props);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		component_map,
		component,
		component_props,
		value,
		_component
	});

	$$self.$inject_state = $$props => {
		if ('component' in $$props) $$invalidate(3, component = $$props.component);
		if ('component_props' in $$props) $$invalidate(0, component_props = $$props.component_props);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('_component' in $$props) $$invalidate(2, _component = $$props._component);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*component*/ 8) {
			$$invalidate(2, _component = component_map[component]);
		}
	};

	return [component_props, value, _component, component];
}

class Interpretation extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			component: 3,
			component_props: 0,
			value: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Interpretation",
			options,
			id: create_fragment.name
		});
	}

	get component() {
		throw new Error("<Interpretation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component(value) {
		throw new Error("<Interpretation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get component_props() {
		throw new Error("<Interpretation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component_props(value) {
		throw new Error("<Interpretation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Interpretation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Interpretation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Interpretation$1 = Interpretation;

export { Interpretation$1 as default };
//# sourceMappingURL=index-10869aaf.js.map
