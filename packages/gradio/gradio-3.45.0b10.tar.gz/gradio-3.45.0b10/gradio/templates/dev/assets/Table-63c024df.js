import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, space, element, attr_dev, toggle_class, add_location, insert_dev, listen_dev, prevent_default, group_outros, transition_out, check_outros, transition_in, detach_dev, run_all, bubble, binding_callbacks, set_input_value, action_destroyer, text, set_data_dev, noop, create_component, mount_component, destroy_component, HtmlTag, empty, create_slot, onMount, tick, ensure_array_like_dev, validate_each_keys, add_render_callback, set_style, append_dev, add_iframe_resize_listener, update_slot_base, get_all_dirty_from_scope, get_slot_changes, update_keyed_each, outro_and_destroy_block, bind, add_flush_callback, svg_element } from '../../../node/dev/svelte-internal.js';
import { d as copy, a as Button } from './Button-71613b11.js';
import { U as Upload } from './Upload-dabc29e8.js';
import { X } from './index-b455ce1a.js';
import { M as MarkdownCode } from './StaticMarkdown-11e2f6b1.js';
import { d as dsvFormat } from './dsv-a37bb3db.js';

var has = Object.prototype.hasOwnProperty;

function dequal(foo, bar) {
	var ctor, len;
	if (foo === bar) return true;

	if (foo && bar && (ctor=foo.constructor) === bar.constructor) {
		if (ctor === Date) return foo.getTime() === bar.getTime();
		if (ctor === RegExp) return foo.toString() === bar.toString();

		if (ctor === Array) {
			if ((len=foo.length) === bar.length) {
				while (len-- && dequal(foo[len], bar[len]));
			}
			return len === -1;
		}

		if (!ctor || typeof foo === 'object') {
			len = 0;
			for (ctor in foo) {
				if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
				if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
			}
			return Object.keys(bar).length === len;
		}
	}

	return foo !== foo && bar !== bar;
}

const EditableCell_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/dataframe/shared/EditableCell.svelte generated by Svelte v4.0.0 */
const file$2 = "home/runner/work/gradio/gradio/js/dataframe/shared/EditableCell.svelte";

// (25:0) {#if edit}
function create_if_block_2$1(ctx) {
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			attr_dev(input, "tabindex", "-1");
			attr_dev(input, "class", "s-kspmwlmHn9fl");
			toggle_class(input, "header", /*header*/ ctx[3]);
			add_location(input, file$2, 43, 1, 581);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			/*input_binding*/ ctx[14](input);
			set_input_value(input, /*_value*/ ctx[6]);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[15]),
					listen_dev(input, "blur", /*blur_handler*/ ctx[16], false, false, false, false),
					action_destroyer(/*use_focus*/ ctx[8].call(null, input)),
					listen_dev(input, "keydown", /*keydown_handler*/ ctx[13], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*_value*/ 64 && input.value !== /*_value*/ ctx[6]) {
				set_input_value(input, /*_value*/ ctx[6]);
			}

			if (dirty & /*header*/ 8) {
				toggle_class(input, "header", /*header*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(input);
			}

			/*input_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(25:0) {#if edit}",
		ctx
	});

	return block;
}

// (55:1) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*value*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(55:1) {:else}",
		ctx
	});

	return block;
}

// (49:35) 
function create_if_block_1$1(ctx) {
	let markdowncode;
	let current;

	markdowncode = new MarkdownCode({
			props: {
				message: /*value*/ ctx[0].toLocaleString(),
				latex_delimiters: /*latex_delimiters*/ ctx[5],
				chatbot: false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(markdowncode.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(markdowncode, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const markdowncode_changes = {};
			if (dirty & /*value*/ 1) markdowncode_changes.message = /*value*/ ctx[0].toLocaleString();
			if (dirty & /*latex_delimiters*/ 32) markdowncode_changes.latex_delimiters = /*latex_delimiters*/ ctx[5];
			markdowncode.$set(markdowncode_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markdowncode.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markdowncode.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(markdowncode, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(49:35) ",
		ctx
	});

	return block;
}

// (47:1) {#if datatype === "html"}
function create_if_block$2(ctx) {
	let html_tag;
	let html_anchor;

	const block = {
		c: function create() {
			html_tag = new HtmlTag(false);
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m: function mount(target, anchor) {
			html_tag.m(/*value*/ ctx[0], target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) html_tag.p(/*value*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(html_anchor);
				html_tag.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(47:1) {#if datatype === \\\"html\\\"}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let t;
	let span;
	let current_block_type_index;
	let if_block1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*edit*/ ctx[2] && create_if_block_2$1(ctx);
	const if_block_creators = [create_if_block$2, create_if_block_1$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*datatype*/ ctx[4] === "html") return 0;
		if (/*datatype*/ ctx[4] === "markdown") return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			span = element("span");
			if_block1.c();
			attr_dev(span, "tabindex", "-1");
			attr_dev(span, "role", "button");
			attr_dev(span, "class", "s-kspmwlmHn9fl");
			toggle_class(span, "edit", /*edit*/ ctx[2]);
			add_location(span, file$2, 57, 0, 792);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, span, anchor);
			if_blocks[current_block_type_index].m(span, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(span, "dblclick", /*dblclick_handler*/ ctx[11], false, false, false, false),
					listen_dev(span, "focus", prevent_default(/*focus_handler*/ ctx[12]), false, true, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*edit*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2$1(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(span, null);
			}

			if (!current || dirty & /*edit*/ 4) {
				toggle_class(span, "edit", /*edit*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(span);
			}

			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let _value;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('EditableCell', slots, []);
	let { edit } = $$props;
	let { value = "" } = $$props;
	let { header = false } = $$props;
	let { datatype = "str" } = $$props;
	let { latex_delimiters } = $$props;
	let { clear_on_focus = false } = $$props;
	let { select_on_focus = false } = $$props;
	const dispatch = createEventDispatcher();
	let { el } = $$props;

	function use_focus(node) {
		if (clear_on_focus) {
			$$invalidate(6, _value = "");
		}

		if (select_on_focus) {
			node.select();
		}

		node.focus();
		return {};
	}

	$$self.$$.on_mount.push(function () {
		if (edit === undefined && !('edit' in $$props || $$self.$$.bound[$$self.$$.props['edit']])) {
			console.warn("<EditableCell> was created without expected prop 'edit'");
		}

		if (latex_delimiters === undefined && !('latex_delimiters' in $$props || $$self.$$.bound[$$self.$$.props['latex_delimiters']])) {
			console.warn("<EditableCell> was created without expected prop 'latex_delimiters'");
		}

		if (el === undefined && !('el' in $$props || $$self.$$.bound[$$self.$$.props['el']])) {
			console.warn("<EditableCell> was created without expected prop 'el'");
		}
	});

	const writable_props = [
		'edit',
		'value',
		'header',
		'datatype',
		'latex_delimiters',
		'clear_on_focus',
		'select_on_focus',
		'el'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditableCell> was created with unknown prop '${key}'`);
	});

	function dblclick_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(1, el);
		});
	}

	function input_input_handler() {
		_value = this.value;
		($$invalidate(6, _value), $$invalidate(0, value));
	}

	const blur_handler = ({ currentTarget }) => {
		$$invalidate(0, value = currentTarget.value);
		dispatch("blur");
	};

	$$self.$$set = $$props => {
		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('header' in $$props) $$invalidate(3, header = $$props.header);
		if ('datatype' in $$props) $$invalidate(4, datatype = $$props.datatype);
		if ('latex_delimiters' in $$props) $$invalidate(5, latex_delimiters = $$props.latex_delimiters);
		if ('clear_on_focus' in $$props) $$invalidate(9, clear_on_focus = $$props.clear_on_focus);
		if ('select_on_focus' in $$props) $$invalidate(10, select_on_focus = $$props.select_on_focus);
		if ('el' in $$props) $$invalidate(1, el = $$props.el);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		MarkdownCode,
		edit,
		value,
		header,
		datatype,
		latex_delimiters,
		clear_on_focus,
		select_on_focus,
		dispatch,
		el,
		use_focus,
		_value
	});

	$$self.$inject_state = $$props => {
		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('header' in $$props) $$invalidate(3, header = $$props.header);
		if ('datatype' in $$props) $$invalidate(4, datatype = $$props.datatype);
		if ('latex_delimiters' in $$props) $$invalidate(5, latex_delimiters = $$props.latex_delimiters);
		if ('clear_on_focus' in $$props) $$invalidate(9, clear_on_focus = $$props.clear_on_focus);
		if ('select_on_focus' in $$props) $$invalidate(10, select_on_focus = $$props.select_on_focus);
		if ('el' in $$props) $$invalidate(1, el = $$props.el);
		if ('_value' in $$props) $$invalidate(6, _value = $$props._value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$$invalidate(6, _value = value);
		}
	};

	return [
		value,
		el,
		edit,
		header,
		datatype,
		latex_delimiters,
		_value,
		dispatch,
		use_focus,
		clear_on_focus,
		select_on_focus,
		dblclick_handler,
		focus_handler,
		keydown_handler,
		input_binding,
		input_input_handler,
		blur_handler
	];
}

class EditableCell extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			edit: 2,
			value: 0,
			header: 3,
			datatype: 4,
			latex_delimiters: 5,
			clear_on_focus: 9,
			select_on_focus: 10,
			el: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditableCell",
			options,
			id: create_fragment$2.name
		});
	}

	get edit() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set edit(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get header() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set header(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get datatype() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set datatype(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get latex_delimiters() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set latex_delimiters(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clear_on_focus() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set clear_on_focus(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get select_on_focus() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set select_on_focus(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get el() {
		throw new Error("<EditableCell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set el(value) {
		throw new Error("<EditableCell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const VirtualTable_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/dataframe/shared/VirtualTable.svelte generated by Svelte v4.0.0 */
const file$1 = "home/runner/work/gradio/gradio/js/dataframe/shared/VirtualTable.svelte";
const get_tfoot_slot_changes = dirty => ({});
const get_tfoot_slot_context = ctx => ({});

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

const get_tbody_slot_changes = dirty => ({
	item: dirty[0] & /*visible*/ 256,
	index: dirty[0] & /*visible*/ 256
});

const get_tbody_slot_context = ctx => ({
	item: /*item*/ ctx[34].data,
	index: /*item*/ ctx[34].index
});

const get_thead_slot_changes = dirty => ({});
const get_thead_slot_context = ctx => ({});

// (207:3) {#if visible.length && visible[0].data.length}
function create_if_block$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = ensure_array_like_dev(/*visible*/ ctx[8]);
	const get_key = ctx => /*item*/ ctx[34].data[0].id;
	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$$scope, visible*/ 2097408) {
				each_value = ensure_array_like_dev(/*visible*/ ctx[8]);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(each_1_anchor);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(207:3) {#if visible.length && visible[0].data.length}",
		ctx
	});

	return block;
}

// (209:60)        Missing Table Row      
function fallback_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Missing Table Row\n\t\t\t\t\t");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(209:60)        Missing Table Row      ",
		ctx
	});

	return block;
}

// (208:4) {#each visible as item (item.data[0].id)}
function create_each_block$1(key_1, ctx) {
	let first;
	let current;
	const tbody_slot_template = /*#slots*/ ctx[22].tbody;
	const tbody_slot = create_slot(tbody_slot_template, ctx, /*$$scope*/ ctx[21], get_tbody_slot_context);
	const tbody_slot_or_fallback = tbody_slot || fallback_block(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			if (tbody_slot_or_fallback) tbody_slot_or_fallback.c();
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);

			if (tbody_slot_or_fallback) {
				tbody_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (tbody_slot) {
				if (tbody_slot.p && (!current || dirty[0] & /*$$scope, visible*/ 2097408)) {
					update_slot_base(
						tbody_slot,
						tbody_slot_template,
						ctx,
						/*$$scope*/ ctx[21],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
						: get_slot_changes(tbody_slot_template, /*$$scope*/ ctx[21], dirty, get_tbody_slot_changes),
						get_tbody_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tbody_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tbody_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
			}

			if (tbody_slot_or_fallback) tbody_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(208:4) {#each visible as item (item.data[0].id)}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let svelte_virtual_table_viewport;
	let table;
	let thead;
	let thead_resize_listener;
	let t0;
	let tbody;
	let t1;
	let tfoot;
	let tfoot_resize_listener;
	let table_resize_listener;
	let current;
	let mounted;
	let dispose;
	const thead_slot_template = /*#slots*/ ctx[22].thead;
	const thead_slot = create_slot(thead_slot_template, ctx, /*$$scope*/ ctx[21], get_thead_slot_context);
	let if_block = /*visible*/ ctx[8].length && /*visible*/ ctx[8][0].data.length && create_if_block$1(ctx);
	const tfoot_slot_template = /*#slots*/ ctx[22].tfoot;
	const tfoot_slot = create_slot(tfoot_slot_template, ctx, /*$$scope*/ ctx[21], get_tfoot_slot_context);

	const block = {
		c: function create() {
			svelte_virtual_table_viewport = element("svelte-virtual-table-viewport");
			table = element("table");
			thead = element("thead");
			if (thead_slot) thead_slot.c();
			t0 = space();
			tbody = element("tbody");
			if (if_block) if_block.c();
			t1 = space();
			tfoot = element("tfoot");
			if (tfoot_slot) tfoot_slot.c();
			attr_dev(thead, "class", "thead s-6YkreioeYy9g");
			add_render_callback(() => /*thead_elementresize_handler*/ ctx[23].call(thead));
			add_location(thead, file$1, 238, 2, 6176);
			attr_dev(tbody, "class", "tbody s-6YkreioeYy9g");
			add_location(tbody, file$1, 241, 2, 6268);
			attr_dev(tfoot, "class", "tfoot s-6YkreioeYy9g");
			add_render_callback(() => /*tfoot_elementresize_handler*/ ctx[25].call(tfoot));
			add_location(tfoot, file$1, 250, 2, 6539);
			attr_dev(table, "class", "table s-6YkreioeYy9g");
			set_style(table, "height", /*height*/ ctx[9]);
			set_style(table, "--bw-svt-p-top", /*top*/ ctx[5] + "px");
			set_style(table, "--bw-svt-p-bottom", /*bottom*/ ctx[1] + "px");
			set_style(table, "--bw-svt-head-height", /*head_height*/ ctx[3] + "px");
			set_style(table, "--bw-svt-foot-height", /*foot_height*/ ctx[4] + "px");
			set_style(table, "--bw-svt-avg-row-height", /*average_height*/ ctx[0] + "px");
			add_render_callback(() => /*table_elementresize_handler*/ ctx[27].call(table));
			add_location(table, file$1, 231, 1, 5853);
			add_location(svelte_virtual_table_viewport, file$1, 230, 0, 5820);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svelte_virtual_table_viewport, anchor);
			append_dev(svelte_virtual_table_viewport, table);
			append_dev(table, thead);

			if (thead_slot) {
				thead_slot.m(thead, null);
			}

			thead_resize_listener = add_iframe_resize_listener(thead, /*thead_elementresize_handler*/ ctx[23].bind(thead));
			append_dev(table, t0);
			append_dev(table, tbody);
			if (if_block) if_block.m(tbody, null);
			/*tbody_binding*/ ctx[24](tbody);
			append_dev(table, t1);
			append_dev(table, tfoot);

			if (tfoot_slot) {
				tfoot_slot.m(tfoot, null);
			}

			tfoot_resize_listener = add_iframe_resize_listener(tfoot, /*tfoot_elementresize_handler*/ ctx[25].bind(tfoot));
			/*table_binding*/ ctx[26](table);
			table_resize_listener = add_iframe_resize_listener(table, /*table_elementresize_handler*/ ctx[27].bind(table));
			current = true;

			if (!mounted) {
				dispose = listen_dev(table, "scroll", /*handle_scroll*/ ctx[10], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (thead_slot) {
				if (thead_slot.p && (!current || dirty[0] & /*$$scope*/ 2097152)) {
					update_slot_base(
						thead_slot,
						thead_slot_template,
						ctx,
						/*$$scope*/ ctx[21],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
						: get_slot_changes(thead_slot_template, /*$$scope*/ ctx[21], dirty, get_thead_slot_changes),
						get_thead_slot_context
					);
				}
			}

			if (/*visible*/ ctx[8].length && /*visible*/ ctx[8][0].data.length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*visible*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(tbody, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (tfoot_slot) {
				if (tfoot_slot.p && (!current || dirty[0] & /*$$scope*/ 2097152)) {
					update_slot_base(
						tfoot_slot,
						tfoot_slot_template,
						ctx,
						/*$$scope*/ ctx[21],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
						: get_slot_changes(tfoot_slot_template, /*$$scope*/ ctx[21], dirty, get_tfoot_slot_changes),
						get_tfoot_slot_context
					);
				}
			}

			if (!current || dirty[0] & /*top*/ 32) {
				set_style(table, "--bw-svt-p-top", /*top*/ ctx[5] + "px");
			}

			if (!current || dirty[0] & /*bottom*/ 2) {
				set_style(table, "--bw-svt-p-bottom", /*bottom*/ ctx[1] + "px");
			}

			if (!current || dirty[0] & /*head_height*/ 8) {
				set_style(table, "--bw-svt-head-height", /*head_height*/ ctx[3] + "px");
			}

			if (!current || dirty[0] & /*foot_height*/ 16) {
				set_style(table, "--bw-svt-foot-height", /*foot_height*/ ctx[4] + "px");
			}

			if (!current || dirty[0] & /*average_height*/ 1) {
				set_style(table, "--bw-svt-avg-row-height", /*average_height*/ ctx[0] + "px");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(thead_slot, local);
			transition_in(if_block);
			transition_in(tfoot_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(thead_slot, local);
			transition_out(if_block);
			transition_out(tfoot_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svelte_virtual_table_viewport);
			}

			if (thead_slot) thead_slot.d(detaching);
			thead_resize_listener();
			if (if_block) if_block.d();
			/*tbody_binding*/ ctx[24](null);
			if (tfoot_slot) tfoot_slot.d(detaching);
			tfoot_resize_listener();
			/*table_binding*/ ctx[26](null);
			table_resize_listener();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function get_computed_px_amount(elem, property) {
	if (!elem) {
		return 0;
	}

	const compStyle = getComputedStyle(elem);
	let x = parseInt(compStyle.getPropertyValue(property));
	return x;
}

function instance$1($$self, $$props, $$invalidate) {
	let sortedItems;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('VirtualTable', slots, ['thead','tbody','tfoot']);
	let { items = [] } = $$props;
	let { table_width } = $$props;
	let { max_height } = $$props;
	let { actual_height } = $$props;
	let { start = 0 } = $$props;
	let { end = 0 } = $$props;
	let { selected } = $$props;
	let height = "100%";
	let average_height;
	let bottom = 0;
	let contents;
	let head_height = 0;
	let foot_height = 0;
	let height_map = [];
	let mounted;
	let rows;
	let top = 0;
	let viewport;
	let viewport_height = 0;
	let visible = [];
	let content_height = 0;

	async function refresh_height_map(_items) {
		if (viewport_height === 0 || table_width === 0) {
			return;
		}

		const { scrollTop } = viewport;
		content_height = top - (scrollTop - head_height);
		let i = start;

		while (content_height < max_height && i < _items.length) {
			let row = rows[i - start];

			if (!row) {
				$$invalidate(12, end = i + 1);
				await tick(); // render the newly visible row
				row = rows[i - start];
			}

			let _h = row?.getBoundingClientRect().height;

			if (!_h) {
				_h = average_height;
			}

			const row_height = height_map[i] = _h;
			content_height += row_height;
			i += 1;
		}

		$$invalidate(12, end = i);
		const remaining = _items.length - end;
		let filtered_height_map = height_map.filter(v => typeof v === "number");
		$$invalidate(0, average_height = filtered_height_map.reduce((a, b) => a + b, 0) / filtered_height_map.length);
		$$invalidate(1, bottom = remaining * average_height);
		height_map.length = _items.length;
		await tick();

		if (!max_height) {
			$$invalidate(13, actual_height = content_height + 1);
		} else if (content_height < max_height) {
			$$invalidate(13, actual_height = content_height + 2);
		} else {
			$$invalidate(13, actual_height = max_height);
		}

		await tick();
	}

	async function scroll_and_render(n) {
		requestAnimationFrame(async () => {
			if (typeof n !== "number") return;
			const direction = typeof n !== "number" ? false : is_in_view(n);

			if (direction === true) {
				return;
			}

			if (direction === "back") {
				await scroll_to_index(n, { behavior: "instant" });
			}

			if (direction === "forwards") {
				await scroll_to_index(n, { behavior: "instant" }, true);
			}
		});
	}

	function is_in_view(n) {
		const current = rows && rows[n - start];

		if (!current && n < start) {
			return "back";
		}

		if (!current && n >= end - 1) {
			return "forwards";
		}

		const { top: viewport_top } = viewport.getBoundingClientRect();
		const { top, bottom } = current.getBoundingClientRect();

		if (top - viewport_top < 37) {
			return "back";
		}

		if (bottom - viewport_top > viewport_height) {
			return "forwards";
		}

		return true;
	}

	async function handle_scroll(e) {
		const scroll_top = viewport.scrollTop;
		rows = contents.children;
		const is_start_overflow = sortedItems.length < start;
		const row_top_border = get_computed_px_amount(rows[1], "border-top-width");
		const actual_border_collapsed_width = 0;

		if (is_start_overflow) {
			await scroll_to_index(sortedItems.length - 1, { behavior: "auto" });
		}

		let new_start = 0;

		// acquire height map for currently visible rows
		for (let v = 0; v < rows.length; v += 1) {
			height_map[start + v] = rows[v].getBoundingClientRect().height;
		}

		let i = 0;

		// start from top: thead, with its borders, plus the first border to afterwards neglect
		let y = head_height + row_top_border / 2;

		let row_heights = [];

		// loop items to find new start
		while (i < sortedItems.length) {
			const row_height = height_map[i] || average_height;
			row_heights[i] = row_height;

			// we only want to jump if the full (incl. border) row is away
			if (y + row_height + actual_border_collapsed_width > scroll_top) {
				// this is the last index still inside the viewport
				new_start = i;

				$$invalidate(5, top = y - (head_height + row_top_border / 2));
				break;
			}

			y += row_height;
			i += 1;
		}

		new_start = Math.max(0, new_start);

		while (i < sortedItems.length) {
			const row_height = height_map[i] || average_height;
			y += row_height;
			i += 1;

			if (y > scroll_top + viewport_height) {
				break;
			}
		}

		$$invalidate(11, start = new_start);
		$$invalidate(12, end = i);
		const remaining = sortedItems.length - end;

		if (end === 0) {
			$$invalidate(12, end = 10);
		}

		$$invalidate(0, average_height = (y - head_height) / end);
		let remaining_height = remaining * average_height; // 0

		// compute height map for remaining items
		while (i < sortedItems.length) {
			i += 1;
			height_map[i] = average_height;
		}

		$$invalidate(1, bottom = remaining_height);

		if (!isFinite(bottom)) {
			$$invalidate(1, bottom = 200000);
		}
	}

	async function scroll_to_index(index, opts, align_end = false) {
		await tick();
		const _itemHeight = average_height;
		let distance = index * _itemHeight;

		if (align_end) {
			distance = distance - viewport_height + _itemHeight + head_height;
		}

		const _opts = {
			top: distance,
			behavior: "smooth",
			...opts
		};

		viewport.scrollTo(_opts);
	}

	onMount(() => {
		rows = contents.children;
		$$invalidate(19, mounted = true);
		refresh_height_map(items);
	});

	$$self.$$.on_mount.push(function () {
		if (table_width === undefined && !('table_width' in $$props || $$self.$$.bound[$$self.$$.props['table_width']])) {
			console.warn("<VirtualTable> was created without expected prop 'table_width'");
		}

		if (max_height === undefined && !('max_height' in $$props || $$self.$$.bound[$$self.$$.props['max_height']])) {
			console.warn("<VirtualTable> was created without expected prop 'max_height'");
		}

		if (actual_height === undefined && !('actual_height' in $$props || $$self.$$.bound[$$self.$$.props['actual_height']])) {
			console.warn("<VirtualTable> was created without expected prop 'actual_height'");
		}

		if (selected === undefined && !('selected' in $$props || $$self.$$.bound[$$self.$$.props['selected']])) {
			console.warn("<VirtualTable> was created without expected prop 'selected'");
		}
	});

	const writable_props = [
		'items',
		'table_width',
		'max_height',
		'actual_height',
		'start',
		'end',
		'selected'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VirtualTable> was created with unknown prop '${key}'`);
	});

	function thead_elementresize_handler() {
		head_height = this.offsetHeight;
		$$invalidate(3, head_height);
	}

	function tbody_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			contents = $$value;
			$$invalidate(2, contents);
		});
	}

	function tfoot_elementresize_handler() {
		foot_height = this.offsetHeight;
		$$invalidate(4, foot_height);
	}

	function table_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			viewport = $$value;
			$$invalidate(6, viewport);
		});
	}

	function table_elementresize_handler() {
		viewport_height = this.offsetHeight;
		$$invalidate(7, viewport_height);
	}

	$$self.$$set = $$props => {
		if ('items' in $$props) $$invalidate(14, items = $$props.items);
		if ('table_width' in $$props) $$invalidate(15, table_width = $$props.table_width);
		if ('max_height' in $$props) $$invalidate(16, max_height = $$props.max_height);
		if ('actual_height' in $$props) $$invalidate(13, actual_height = $$props.actual_height);
		if ('start' in $$props) $$invalidate(11, start = $$props.start);
		if ('end' in $$props) $$invalidate(12, end = $$props.end);
		if ('selected' in $$props) $$invalidate(17, selected = $$props.selected);
		if ('$$scope' in $$props) $$invalidate(21, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		tick,
		_: X,
		items,
		table_width,
		max_height,
		actual_height,
		start,
		end,
		selected,
		height,
		average_height,
		bottom,
		contents,
		head_height,
		foot_height,
		height_map,
		mounted,
		rows,
		top,
		viewport,
		viewport_height,
		visible,
		content_height,
		refresh_height_map,
		scroll_and_render,
		is_in_view,
		get_computed_px_amount,
		handle_scroll,
		scroll_to_index,
		sortedItems
	});

	$$self.$inject_state = $$props => {
		if ('items' in $$props) $$invalidate(14, items = $$props.items);
		if ('table_width' in $$props) $$invalidate(15, table_width = $$props.table_width);
		if ('max_height' in $$props) $$invalidate(16, max_height = $$props.max_height);
		if ('actual_height' in $$props) $$invalidate(13, actual_height = $$props.actual_height);
		if ('start' in $$props) $$invalidate(11, start = $$props.start);
		if ('end' in $$props) $$invalidate(12, end = $$props.end);
		if ('selected' in $$props) $$invalidate(17, selected = $$props.selected);
		if ('height' in $$props) $$invalidate(9, height = $$props.height);
		if ('average_height' in $$props) $$invalidate(0, average_height = $$props.average_height);
		if ('bottom' in $$props) $$invalidate(1, bottom = $$props.bottom);
		if ('contents' in $$props) $$invalidate(2, contents = $$props.contents);
		if ('head_height' in $$props) $$invalidate(3, head_height = $$props.head_height);
		if ('foot_height' in $$props) $$invalidate(4, foot_height = $$props.foot_height);
		if ('height_map' in $$props) height_map = $$props.height_map;
		if ('mounted' in $$props) $$invalidate(19, mounted = $$props.mounted);
		if ('rows' in $$props) rows = $$props.rows;
		if ('top' in $$props) $$invalidate(5, top = $$props.top);
		if ('viewport' in $$props) $$invalidate(6, viewport = $$props.viewport);
		if ('viewport_height' in $$props) $$invalidate(7, viewport_height = $$props.viewport_height);
		if ('visible' in $$props) $$invalidate(8, visible = $$props.visible);
		if ('content_height' in $$props) content_height = $$props.content_height;
		if ('sortedItems' in $$props) $$invalidate(20, sortedItems = $$props.sortedItems);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*items*/ 16384) {
			$$invalidate(20, sortedItems = items);
		}

		if ($$self.$$.dirty[0] & /*mounted, sortedItems*/ 1572864) {
			if (mounted) requestAnimationFrame(() => refresh_height_map(sortedItems));
		}

		if ($$self.$$.dirty[0] & /*selected*/ 131072) {
			scroll_and_render(selected);
		}

		if ($$self.$$.dirty[0] & /*sortedItems, start, end*/ 1054720) {
			$$invalidate(8, visible = sortedItems.slice(start, end).map((data, i) => {
				return { index: i + start, data };
			}));
		}
	};

	return [
		average_height,
		bottom,
		contents,
		head_height,
		foot_height,
		top,
		viewport,
		viewport_height,
		visible,
		height,
		handle_scroll,
		start,
		end,
		actual_height,
		items,
		table_width,
		max_height,
		selected,
		scroll_to_index,
		mounted,
		sortedItems,
		$$scope,
		slots,
		thead_elementresize_handler,
		tbody_binding,
		tfoot_elementresize_handler,
		table_binding,
		table_elementresize_handler
	];
}

class VirtualTable extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				items: 14,
				table_width: 15,
				max_height: 16,
				actual_height: 13,
				start: 11,
				end: 12,
				selected: 17,
				scroll_to_index: 18
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "VirtualTable",
			options,
			id: create_fragment$1.name
		});
	}

	get items() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get table_width() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set table_width(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max_height() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max_height(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get actual_height() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set actual_height(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get start() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set start(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get end() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set end(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<VirtualTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll_to_index() {
		return this.$$.ctx[18];
	}

	set scroll_to_index(value) {
		throw new Error("<VirtualTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Table_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/dataframe/shared/Table.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/dataframe/shared/Table.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[78] = list[i].value;
	child_ctx[79] = list[i].id;
	child_ctx[82] = list;
	child_ctx[83] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[78] = list[i].value;
	child_ctx[79] = list[i].id;
	child_ctx[80] = list;
	child_ctx[81] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[78] = list[i].value;
	child_ctx[79] = list[i].id;
	child_ctx[84] = list;
	child_ctx[81] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[78] = list[i].value;
	child_ctx[79] = list[i].id;
	child_ctx[83] = i;
	return child_ctx;
}

// (475:1) {#if label && label.length !== 0}
function create_if_block_5(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(/*label*/ ctx[1]);
			attr_dev(p, "class", "s-4quQeJPp-1IB");
			add_location(p, file, 601, 2, 13883);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(p);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(475:1) {#if label && label.length !== 0}",
		ctx
	});

	return block;
}

// (491:3) {#if label && label.length !== 0}
function create_if_block_4(ctx) {
	let caption;
	let t;

	const block = {
		c: function create() {
			caption = element("caption");
			t = text(/*label*/ ctx[1]);
			attr_dev(caption, "class", "sr-only");
			add_location(caption, file, 617, 4, 14185);
		},
		m: function mount(target, anchor) {
			insert_dev(target, caption, anchor);
			append_dev(caption, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(caption);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(491:3) {#if label && label.length !== 0}",
		ctx
	});

	return block;
}

// (496:5) {#each _headers as { value, id }
function create_each_block_3(key_1, ctx) {
	let th;
	let div1;
	let editablecell;
	let t0;
	let div0;
	let svg;
	let path;
	let div0_class_value;
	let t1;
	let th_aria_sort_value;
	let current;

	editablecell = new EditableCell({
			props: {
				value: /*value*/ ctx[78],
				latex_delimiters: /*latex_delimiters*/ ctx[4],
				header: true,
				edit: false,
				el: null
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			th = element("th");
			div1 = element("div");
			create_component(editablecell.$$.fragment);
			t0 = space();
			div0 = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t1 = space();
			attr_dev(path, "d", "M4.49999 0L8.3971 6.75H0.602875L4.49999 0Z");
			add_location(path, file, 647, 10, 14943);
			attr_dev(svg, "width", "1em");
			attr_dev(svg, "height", "1em");
			attr_dev(svg, "viewBox", "0 0 9 7");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "class", "s-4quQeJPp-1IB");
			add_location(svg, file, 640, 9, 14777);
			attr_dev(div0, "class", div0_class_value = "sort-button " + /*sort_direction*/ ctx[13] + "" + " s-4quQeJPp-1IB");
			toggle_class(div0, "sorted", /*sort_by*/ ctx[14] === /*i*/ ctx[83]);
			toggle_class(div0, "des", /*sort_by*/ ctx[14] === /*i*/ ctx[83] && /*sort_direction*/ ctx[13] === "des");
			add_location(div0, file, 635, 8, 14605);
			attr_dev(div1, "class", "cell-wrap s-4quQeJPp-1IB");
			add_location(div1, file, 626, 7, 14437);
			attr_dev(th, "aria-sort", th_aria_sort_value = /*get_sort_status*/ ctx[28](/*value*/ ctx[78], /*sort_by*/ ctx[14], /*sort_direction*/ ctx[13]));
			attr_dev(th, "class", "s-4quQeJPp-1IB");
			toggle_class(th, "editing", /*header_edit*/ ctx[19] === /*i*/ ctx[83]);
			add_location(th, file, 622, 6, 14310);
			this.first = th;
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, div1);
			mount_component(editablecell, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, svg);
			append_dev(svg, path);
			append_dev(th, t1);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const editablecell_changes = {};
			if (dirty[0] & /*_headers*/ 2048) editablecell_changes.value = /*value*/ ctx[78];
			if (dirty[0] & /*latex_delimiters*/ 16) editablecell_changes.latex_delimiters = /*latex_delimiters*/ ctx[4];
			editablecell.$set(editablecell_changes);

			if (!current || dirty[0] & /*sort_direction*/ 8192 && div0_class_value !== (div0_class_value = "sort-button " + /*sort_direction*/ ctx[13] + "" + " s-4quQeJPp-1IB")) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*sort_direction, sort_by, _headers*/ 26624) {
				toggle_class(div0, "sorted", /*sort_by*/ ctx[14] === /*i*/ ctx[83]);
			}

			if (!current || dirty[0] & /*sort_direction, sort_by, _headers, sort_direction*/ 26624) {
				toggle_class(div0, "des", /*sort_by*/ ctx[14] === /*i*/ ctx[83] && /*sort_direction*/ ctx[13] === "des");
			}

			if (!current || dirty[0] & /*_headers, sort_by, sort_direction*/ 26624 && th_aria_sort_value !== (th_aria_sort_value = /*get_sort_status*/ ctx[28](/*value*/ ctx[78], /*sort_by*/ ctx[14], /*sort_direction*/ ctx[13]))) {
				attr_dev(th, "aria-sort", th_aria_sort_value);
			}

			if (!current || dirty[0] & /*header_edit, _headers*/ 526336) {
				toggle_class(th, "editing", /*header_edit*/ ctx[19] === /*i*/ ctx[83]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editablecell.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editablecell.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(th);
			}

			destroy_component(editablecell);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(496:5) {#each _headers as { value, id }",
		ctx
	});

	return block;
}

// (532:5) {#each max as { value, id }
function create_each_block_2(key_1, ctx) {
	let td;
	let div;
	let editablecell;
	let t;
	let j = /*j*/ ctx[81];
	let current;

	editablecell = new EditableCell({
			props: {
				value: /*value*/ ctx[78],
				latex_delimiters: /*latex_delimiters*/ ctx[4],
				datatype: Array.isArray(/*datatype*/ ctx[0])
				? /*datatype*/ ctx[0][/*j*/ ctx[81]]
				: /*datatype*/ ctx[0],
				edit: false,
				el: null
			},
			$$inline: true
		});

	const assign_td = () => /*td_binding*/ ctx[45](td, j);
	const unassign_td = () => /*td_binding*/ ctx[45](null, j);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			td = element("td");
			div = element("div");
			create_component(editablecell.$$.fragment);
			t = space();
			attr_dev(div, "class", "cell-wrap s-4quQeJPp-1IB");
			add_location(div, file, 659, 7, 15206);
			attr_dev(td, "tabindex", "-1");
			attr_dev(td, "class", "s-4quQeJPp-1IB");
			add_location(td, file, 658, 6, 15159);
			this.first = td;
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, div);
			mount_component(editablecell, div, null);
			append_dev(td, t);
			assign_td();
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const editablecell_changes = {};
			if (dirty[0] & /*max*/ 134217728) editablecell_changes.value = /*value*/ ctx[78];
			if (dirty[0] & /*latex_delimiters*/ 16) editablecell_changes.latex_delimiters = /*latex_delimiters*/ ctx[4];

			if (dirty[0] & /*datatype, max*/ 134217729) editablecell_changes.datatype = Array.isArray(/*datatype*/ ctx[0])
			? /*datatype*/ ctx[0][/*j*/ ctx[81]]
			: /*datatype*/ ctx[0];

			editablecell.$set(editablecell_changes);

			if (j !== /*j*/ ctx[81]) {
				unassign_td();
				j = /*j*/ ctx[81];
				assign_td();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editablecell.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editablecell.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(td);
			}

			destroy_component(editablecell);
			unassign_td();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(532:5) {#each max as { value, id }",
		ctx
	});

	return block;
}

// (564:4) {#if label && label.length !== 0}
function create_if_block_3(ctx) {
	let caption;
	let t;

	const block = {
		c: function create() {
			caption = element("caption");
			t = text(/*label*/ ctx[1]);
			attr_dev(caption, "class", "sr-only");
			add_location(caption, file, 690, 5, 15894);
		},
		m: function mount(target, anchor) {
			insert_dev(target, caption, anchor);
			append_dev(caption, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(caption);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(564:4) {#if label && label.length !== 0}",
		ctx
	});

	return block;
}

// (557:3) <VirtualTable     bind:items={data}     table_width={t_width}     max_height={height || 500}     bind:actual_height={table_height}     selected={selected_index}    >
function create_default_slot_3(ctx) {
	let if_block_anchor;
	let if_block = /*label*/ ctx[1] && /*label*/ ctx[1].length !== 0 && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*label*/ ctx[1] && /*label*/ ctx[1].length !== 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(557:3) <VirtualTable     bind:items={data}     table_width={t_width}     max_height={height || 500}     bind:actual_height={table_height}     selected={selected_index}    >",
		ctx
	});

	return block;
}

// (568:5) {#each _headers as { value, id }
function create_each_block_1(key_1, ctx) {
	let th;
	let div1;
	let editablecell;
	let updating_value;
	let updating_el;
	let t0;
	let div0;
	let svg;
	let path;
	let div0_class_value;
	let t1;
	let th_aria_sort_value;
	let current;
	let mounted;
	let dispose;

	function editablecell_value_binding_1(value) {
		/*editablecell_value_binding_1*/ ctx[53](value, /*i*/ ctx[83]);
	}

	function editablecell_el_binding_1(value) {
		/*editablecell_el_binding_1*/ ctx[54](value, /*id*/ ctx[79]);
	}

	function dblclick_handler_1() {
		return /*dblclick_handler_1*/ ctx[55](/*i*/ ctx[83]);
	}

	let editablecell_props = {
		latex_delimiters: /*latex_delimiters*/ ctx[4],
		edit: /*header_edit*/ ctx[19] === /*i*/ ctx[83],
		select_on_focus: /*select_on_focus*/ ctx[20],
		header: true
	};

	if (/*_headers*/ ctx[11][/*i*/ ctx[83]].value !== void 0) {
		editablecell_props.value = /*_headers*/ ctx[11][/*i*/ ctx[83]].value;
	}

	if (/*els*/ ctx[17][/*id*/ ctx[79]].input !== void 0) {
		editablecell_props.el = /*els*/ ctx[17][/*id*/ ctx[79]].input;
	}

	editablecell = new EditableCell({
			props: editablecell_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(editablecell, 'value', editablecell_value_binding_1));
	binding_callbacks.push(() => bind(editablecell, 'el', editablecell_el_binding_1));
	editablecell.$on("keydown", /*end_header_edit*/ ctx[34]);
	editablecell.$on("dblclick", dblclick_handler_1);

	function click_handler_1() {
		return /*click_handler_1*/ ctx[56](/*i*/ ctx[83]);
	}

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			th = element("th");
			div1 = element("div");
			create_component(editablecell.$$.fragment);
			t0 = space();
			div0 = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t1 = space();
			attr_dev(path, "d", "M4.49999 0L8.3971 6.75H0.602875L4.49999 0Z");
			add_location(path, file, 727, 10, 17080);
			attr_dev(svg, "width", "1em");
			attr_dev(svg, "height", "1em");
			attr_dev(svg, "viewBox", "0 0 9 7");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "class", "s-4quQeJPp-1IB");
			add_location(svg, file, 720, 9, 16914);
			attr_dev(div0, "class", div0_class_value = "sort-button " + /*sort_direction*/ ctx[13] + "" + " s-4quQeJPp-1IB");
			toggle_class(div0, "sorted", /*sort_by*/ ctx[14] === /*i*/ ctx[83]);
			toggle_class(div0, "des", /*sort_by*/ ctx[14] === /*i*/ ctx[83] && /*sort_direction*/ ctx[13] === "des");
			add_location(div0, file, 714, 8, 16701);
			attr_dev(div1, "class", "cell-wrap s-4quQeJPp-1IB");
			add_location(div1, file, 699, 7, 16217);
			attr_dev(th, "aria-sort", th_aria_sort_value = /*get_sort_status*/ ctx[28](/*value*/ ctx[78], /*sort_by*/ ctx[14], /*sort_direction*/ ctx[13]));
			set_style(th, "width", "var(--cell-width-" + /*i*/ ctx[83] + ")");
			attr_dev(th, "class", "s-4quQeJPp-1IB");
			toggle_class(th, "focus", /*header_edit*/ ctx[19] === /*i*/ ctx[83] || /*selected_header*/ ctx[21] === /*i*/ ctx[83]);
			add_location(th, file, 694, 6, 16022);
			this.first = th;
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, div1);
			mount_component(editablecell, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, svg);
			append_dev(svg, path);
			append_dev(th, t1);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div0, "click", click_handler_1, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const editablecell_changes = {};
			if (dirty[0] & /*latex_delimiters*/ 16) editablecell_changes.latex_delimiters = /*latex_delimiters*/ ctx[4];
			if (dirty[0] & /*header_edit, _headers*/ 526336) editablecell_changes.edit = /*header_edit*/ ctx[19] === /*i*/ ctx[83];
			if (dirty[0] & /*select_on_focus*/ 1048576) editablecell_changes.select_on_focus = /*select_on_focus*/ ctx[20];

			if (!updating_value && dirty[0] & /*_headers*/ 2048) {
				updating_value = true;
				editablecell_changes.value = /*_headers*/ ctx[11][/*i*/ ctx[83]].value;
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_el && dirty[0] & /*els, _headers*/ 133120) {
				updating_el = true;
				editablecell_changes.el = /*els*/ ctx[17][/*id*/ ctx[79]].input;
				add_flush_callback(() => updating_el = false);
			}

			editablecell.$set(editablecell_changes);

			if (!current || dirty[0] & /*sort_direction*/ 8192 && div0_class_value !== (div0_class_value = "sort-button " + /*sort_direction*/ ctx[13] + "" + " s-4quQeJPp-1IB")) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*sort_direction, sort_by, _headers*/ 26624) {
				toggle_class(div0, "sorted", /*sort_by*/ ctx[14] === /*i*/ ctx[83]);
			}

			if (!current || dirty[0] & /*sort_direction, sort_by, _headers, sort_direction*/ 26624) {
				toggle_class(div0, "des", /*sort_by*/ ctx[14] === /*i*/ ctx[83] && /*sort_direction*/ ctx[13] === "des");
			}

			if (!current || dirty[0] & /*_headers, sort_by, sort_direction*/ 26624 && th_aria_sort_value !== (th_aria_sort_value = /*get_sort_status*/ ctx[28](/*value*/ ctx[78], /*sort_by*/ ctx[14], /*sort_direction*/ ctx[13]))) {
				attr_dev(th, "aria-sort", th_aria_sort_value);
			}

			if (!current || dirty[0] & /*_headers*/ 2048) {
				set_style(th, "width", "var(--cell-width-" + /*i*/ ctx[83] + ")");
			}

			if (!current || dirty[0] & /*header_edit, _headers, selected_header*/ 2623488) {
				toggle_class(th, "focus", /*header_edit*/ ctx[19] === /*i*/ ctx[83] || /*selected_header*/ ctx[21] === /*i*/ ctx[83]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editablecell.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editablecell.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(th);
			}

			destroy_component(editablecell);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(568:5) {#each _headers as { value, id }",
		ctx
	});

	return block;
}

// (567:4) 
function create_thead_slot(ctx) {
	let tr;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value_1 = ensure_array_like_dev(/*_headers*/ ctx[11]);
	const get_key = ctx => /*id*/ ctx[79];
	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(tr, "slot", "thead");
			attr_dev(tr, "class", "s-4quQeJPp-1IB");
			add_location(tr, file, 692, 4, 15951);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr, null);
				}
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*get_sort_status, _headers, sort_by, sort_direction, header_edit, selected_header, latex_delimiters, select_on_focus, els*/ 272263184 | dirty[1] & /*handle_sort, end_header_edit, edit_header*/ 14) {
				each_value_1 = ensure_array_like_dev(/*_headers*/ ctx[11]);
				group_outros();
				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, tr, outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(tr);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_thead_slot.name,
		type: "slot",
		source: "(567:4) ",
		ctx
	});

	return block;
}

// (611:5) {#each item as { value, id }
function create_each_block(key_1, ctx) {
	let td;
	let div;
	let editablecell;
	let updating_value;
	let updating_el;
	let t;
	let current;
	let mounted;
	let dispose;

	function editablecell_value_binding(value) {
		/*editablecell_value_binding*/ ctx[47](value, /*index*/ ctx[76], /*j*/ ctx[81]);
	}

	function editablecell_el_binding(value) {
		/*editablecell_el_binding*/ ctx[48](value, /*id*/ ctx[79]);
	}

	let editablecell_props = {
		latex_delimiters: /*latex_delimiters*/ ctx[4],
		edit: dequal(/*editing*/ ctx[16], [/*index*/ ctx[76], /*j*/ ctx[81]]),
		datatype: Array.isArray(/*datatype*/ ctx[0])
		? /*datatype*/ ctx[0][/*j*/ ctx[81]]
		: /*datatype*/ ctx[0],
		clear_on_focus: /*clear_on_focus*/ ctx[18]
	};

	if (/*data*/ ctx[12][/*index*/ ctx[76]][/*j*/ ctx[81]].value !== void 0) {
		editablecell_props.value = /*data*/ ctx[12][/*index*/ ctx[76]][/*j*/ ctx[81]].value;
	}

	if (/*els*/ ctx[17][/*id*/ ctx[79]].input !== void 0) {
		editablecell_props.el = /*els*/ ctx[17][/*id*/ ctx[79]].input;
	}

	editablecell = new EditableCell({
			props: editablecell_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(editablecell, 'value', editablecell_value_binding));
	binding_callbacks.push(() => bind(editablecell, 'el', editablecell_el_binding));
	editablecell.$on("blur", /*blur_handler*/ ctx[49]);

	function touchstart_handler() {
		return /*touchstart_handler*/ ctx[50](/*index*/ ctx[76], /*j*/ ctx[81]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[51](/*index*/ ctx[76], /*j*/ ctx[81]);
	}

	function dblclick_handler() {
		return /*dblclick_handler*/ ctx[52](/*index*/ ctx[76], /*j*/ ctx[81]);
	}

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			td = element("td");
			div = element("div");
			create_component(editablecell.$$.fragment);
			t = space();
			attr_dev(div, "class", "cell-wrap s-4quQeJPp-1IB");
			add_location(div, file, 745, 7, 17623);
			attr_dev(td, "tabindex", "0");
			set_style(td, "width", "var(--cell-width-" + /*j*/ ctx[81] + ")");
			attr_dev(td, "class", "s-4quQeJPp-1IB");
			toggle_class(td, "focus", dequal(/*selected*/ ctx[10], [/*index*/ ctx[76], /*j*/ ctx[81]]));
			add_location(td, file, 737, 6, 17339);
			this.first = td;
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, div);
			mount_component(editablecell, div, null);
			append_dev(td, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(td, "touchstart", touchstart_handler, { passive: true }, false, false, false),
					listen_dev(td, "click", click_handler, false, false, false, false),
					listen_dev(td, "dblclick", dblclick_handler, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const editablecell_changes = {};
			if (dirty[0] & /*latex_delimiters*/ 16) editablecell_changes.latex_delimiters = /*latex_delimiters*/ ctx[4];
			if (dirty[0] & /*editing*/ 65536 | dirty[2] & /*index, item*/ 49152) editablecell_changes.edit = dequal(/*editing*/ ctx[16], [/*index*/ ctx[76], /*j*/ ctx[81]]);

			if (dirty[0] & /*datatype*/ 1 | dirty[2] & /*item*/ 32768) editablecell_changes.datatype = Array.isArray(/*datatype*/ ctx[0])
			? /*datatype*/ ctx[0][/*j*/ ctx[81]]
			: /*datatype*/ ctx[0];

			if (dirty[0] & /*clear_on_focus*/ 262144) editablecell_changes.clear_on_focus = /*clear_on_focus*/ ctx[18];

			if (!updating_value && dirty[0] & /*data*/ 4096 | dirty[2] & /*index, item*/ 49152) {
				updating_value = true;
				editablecell_changes.value = /*data*/ ctx[12][/*index*/ ctx[76]][/*j*/ ctx[81]].value;
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_el && dirty[0] & /*els*/ 131072 | dirty[2] & /*item*/ 32768) {
				updating_el = true;
				editablecell_changes.el = /*els*/ ctx[17][/*id*/ ctx[79]].input;
				add_flush_callback(() => updating_el = false);
			}

			editablecell.$set(editablecell_changes);

			if (!current || dirty[2] & /*item*/ 32768) {
				set_style(td, "width", "var(--cell-width-" + /*j*/ ctx[81] + ")");
			}

			if (!current || dirty[0] & /*selected*/ 1024 | dirty[2] & /*index, item*/ 49152) {
				toggle_class(td, "focus", dequal(/*selected*/ ctx[10], [/*index*/ ctx[76], /*j*/ ctx[81]]));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editablecell.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editablecell.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(td);
			}

			destroy_component(editablecell);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(611:5) {#each item as { value, id }",
		ctx
	});

	return block;
}

// (610:4) 
function create_tbody_slot(ctx) {
	let tr;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = ensure_array_like_dev(/*item*/ ctx[77]);
	const get_key = ctx => /*id*/ ctx[79];
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(tr, "slot", "tbody");
			attr_dev(tr, "class", "s-4quQeJPp-1IB");
			toggle_class(tr, "row_odd", /*index*/ ctx[76] % 2 === 0);
			add_location(tr, file, 735, 4, 17221);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr, null);
				}
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*selected, start_edit, latex_delimiters, editing, datatype, clear_on_focus, data, els, parent*/ 554112017 | dirty[1] & /*handle_cell_click*/ 1 | dirty[2] & /*item, index*/ 49152) {
				each_value = ensure_array_like_dev(/*item*/ ctx[77]);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, tr, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (!current || dirty[2] & /*index*/ 16384) {
				toggle_class(tr, "row_odd", /*index*/ ctx[76] % 2 === 0);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(tr);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_tbody_slot.name,
		type: "slot",
		source: "(610:4) ",
		ctx
	});

	return block;
}

// (548:2) <Upload    flex={false}    center={false}    boundedheight={false}    disable_click={true}    {root}    on:load={(e) => blob_to_string(data_uri_to_blob(e.detail.data))}    bind:dragging   >
function create_default_slot_2(ctx) {
	let virtualtable;
	let updating_items;
	let updating_actual_height;
	let current;

	function virtualtable_items_binding(value) {
		/*virtualtable_items_binding*/ ctx[57](value);
	}

	function virtualtable_actual_height_binding(value) {
		/*virtualtable_actual_height_binding*/ ctx[58](value);
	}

	let virtualtable_props = {
		table_width: /*t_width*/ ctx[23],
		max_height: /*height*/ ctx[8] || 500,
		selected: /*selected_index*/ ctx[26],
		$$slots: {
			tbody: [
				create_tbody_slot,
				({ index, item }) => ({ 76: index, 77: item }),
				({ index, item }) => [0, 0, (index ? 16384 : 0) | (item ? 32768 : 0)]
			],
			thead: [create_thead_slot],
			default: [create_default_slot_3]
		},
		$$scope: { ctx }
	};

	if (/*data*/ ctx[12] !== void 0) {
		virtualtable_props.items = /*data*/ ctx[12];
	}

	if (/*table_height*/ ctx[25] !== void 0) {
		virtualtable_props.actual_height = /*table_height*/ ctx[25];
	}

	virtualtable = new VirtualTable({
			props: virtualtable_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(virtualtable, 'items', virtualtable_items_binding));
	binding_callbacks.push(() => bind(virtualtable, 'actual_height', virtualtable_actual_height_binding));

	const block = {
		c: function create() {
			create_component(virtualtable.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(virtualtable, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const virtualtable_changes = {};
			if (dirty[0] & /*t_width*/ 8388608) virtualtable_changes.table_width = /*t_width*/ ctx[23];
			if (dirty[0] & /*height*/ 256) virtualtable_changes.max_height = /*height*/ ctx[8] || 500;
			if (dirty[0] & /*selected_index*/ 67108864) virtualtable_changes.selected = /*selected_index*/ ctx[26];

			if (dirty[0] & /*selected, latex_delimiters, editing, datatype, clear_on_focus, data, els, parent, _headers, sort_by, sort_direction, header_edit, selected_header, select_on_focus, label*/ 20937747 | dirty[2] & /*$$scope, index, item*/ 16826368) {
				virtualtable_changes.$$scope = { dirty, ctx };
			}

			if (!updating_items && dirty[0] & /*data*/ 4096) {
				updating_items = true;
				virtualtable_changes.items = /*data*/ ctx[12];
				add_flush_callback(() => updating_items = false);
			}

			if (!updating_actual_height && dirty[0] & /*table_height*/ 33554432) {
				updating_actual_height = true;
				virtualtable_changes.actual_height = /*table_height*/ ctx[25];
				add_flush_callback(() => updating_actual_height = false);
			}

			virtualtable.$set(virtualtable_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(virtualtable.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(virtualtable.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(virtualtable, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(548:2) <Upload    flex={false}    center={false}    boundedheight={false}    disable_click={true}    {root}    on:load={(e) => blob_to_string(data_uri_to_blob(e.detail.data))}    bind:dragging   >",
		ctx
	});

	return block;
}

// (637:1) {#if editable}
function create_if_block(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*row_count*/ ctx[3][1] === "dynamic" && create_if_block_2(ctx);
	let if_block1 = /*col_count*/ ctx[2][1] === "dynamic" && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr_dev(div, "class", "controls-wrap s-4quQeJPp-1IB");
			add_location(div, file, 763, 2, 18097);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*row_count*/ ctx[3][1] === "dynamic") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*row_count*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*col_count*/ ctx[2][1] === "dynamic") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*col_count*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(637:1) {#if editable}",
		ctx
	});

	return block;
}

// (639:3) {#if row_count[1] === "dynamic"}
function create_if_block_2(ctx) {
	let span;
	let basebutton;
	let current;

	basebutton = new Button({
			props: {
				variant: "secondary",
				size: "sm",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", /*click_handler_2*/ ctx[63]);

	const block = {
		c: function create() {
			span = element("span");
			create_component(basebutton.$$.fragment);
			attr_dev(span, "class", "button-wrap s-4quQeJPp-1IB");
			add_location(span, file, 765, 4, 18165);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(basebutton, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const basebutton_changes = {};

			if (dirty[0] & /*i18n*/ 512 | dirty[2] & /*$$scope*/ 16777216) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}

			destroy_component(basebutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(639:3) {#if row_count[1] === \\\"dynamic\\\"}",
		ctx
	});

	return block;
}

// (641:5) <BaseButton       variant="secondary"       size="sm"       on:click={(e) => (e.stopPropagation(), add_row())}      >
function create_default_slot_1(ctx) {
	let svg;
	let path;
	let t0;
	let t1_value = /*i18n*/ ctx[9]("dataframe.new_row") + "";
	let t1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			t1 = text(t1_value);
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "M24.59 16.59L17 24.17V4h-2v20.17l-7.59-7.58L6 18l10 10l10-10l-1.41-1.41z");
			add_location(path, file, 781, 7, 18586);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "width", "1em");
			attr_dev(svg, "height", "1em");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			attr_dev(svg, "class", "s-4quQeJPp-1IB");
			add_location(svg, file, 771, 6, 18321);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*i18n*/ 512 && t1_value !== (t1_value = /*i18n*/ ctx[9]("dataframe.new_row") + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
				detach_dev(t0);
				detach_dev(t1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(641:5) <BaseButton       variant=\\\"secondary\\\"       size=\\\"sm\\\"       on:click={(e) => (e.stopPropagation(), add_row())}      >",
		ctx
	});

	return block;
}

// (665:3) {#if col_count[1] === "dynamic"}
function create_if_block_1(ctx) {
	let span;
	let basebutton;
	let current;

	basebutton = new Button({
			props: {
				variant: "secondary",
				size: "sm",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", /*click_handler_3*/ ctx[64]);

	const block = {
		c: function create() {
			span = element("span");
			create_component(basebutton.$$.fragment);
			attr_dev(span, "class", "button-wrap s-4quQeJPp-1IB");
			add_location(span, file, 791, 4, 18842);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(basebutton, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const basebutton_changes = {};

			if (dirty[0] & /*i18n*/ 512 | dirty[2] & /*$$scope*/ 16777216) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}

			destroy_component(basebutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(665:3) {#if col_count[1] === \\\"dynamic\\\"}",
		ctx
	});

	return block;
}

// (667:5) <BaseButton       variant="secondary"       size="sm"       on:click={(e) => (e.stopPropagation(), add_col())}      >
function create_default_slot(ctx) {
	let svg;
	let path;
	let t0;
	let t1_value = /*i18n*/ ctx[9]("dataframe.new_column") + "";
	let t1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			t1 = text(t1_value);
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "m18 6l-1.43 1.393L24.15 15H4v2h20.15l-7.58 7.573L18 26l10-10L18 6z");
			add_location(path, file, 807, 7, 19263);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "width", "1em");
			attr_dev(svg, "height", "1em");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			attr_dev(svg, "class", "s-4quQeJPp-1IB");
			add_location(svg, file, 797, 6, 18998);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*i18n*/ 512 && t1_value !== (t1_value = /*i18n*/ ctx[9]("dataframe.new_column") + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
				detach_dev(t0);
				detach_dev(t1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(667:5) <BaseButton       variant=\\\"secondary\\\"       size=\\\"sm\\\"       on:click={(e) => (e.stopPropagation(), add_col())}      >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let table;
	let t1;
	let thead;
	let tr0;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t2;
	let tbody;
	let tr1;
	let each_blocks = [];
	let each1_lookup = new Map();
	let table_resize_listener;
	let t3;
	let upload;
	let updating_dragging;
	let t4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[1] && /*label*/ ctx[1].length !== 0 && create_if_block_5(ctx);
	let if_block1 = /*label*/ ctx[1] && /*label*/ ctx[1].length !== 0 && create_if_block_4(ctx);
	let each_value_3 = ensure_array_like_dev(/*_headers*/ ctx[11]);
	const get_key = ctx => /*id*/ ctx[79];
	validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_3(key, child_ctx));
	}

	let each_value_2 = ensure_array_like_dev(/*max*/ ctx[27]);
	const get_key_1 = ctx => /*id*/ ctx[79];
	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_1);

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	function upload_dragging_binding(value) {
		/*upload_dragging_binding*/ ctx[59](value);
	}

	let upload_props = {
		flex: false,
		center: false,
		boundedheight: false,
		disable_click: true,
		root: /*root*/ ctx[7],
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*dragging*/ ctx[22] !== void 0) {
		upload_props.dragging = /*dragging*/ ctx[22];
	}

	upload = new Upload({ props: upload_props, $$inline: true });
	binding_callbacks.push(() => bind(upload, 'dragging', upload_dragging_binding));
	upload.$on("load", /*load_handler*/ ctx[60]);
	let if_block2 = /*editable*/ ctx[5] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			table = element("table");
			if (if_block1) if_block1.c();
			t1 = space();
			thead = element("thead");
			tr0 = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			tbody = element("tbody");
			tr1 = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			create_component(upload.$$.fragment);
			t4 = space();
			if (if_block2) if_block2.c();
			attr_dev(tr0, "class", "s-4quQeJPp-1IB");
			add_location(tr0, file, 620, 4, 14252);
			attr_dev(thead, "class", "s-4quQeJPp-1IB");
			add_location(thead, file, 619, 3, 14240);
			attr_dev(tr1, "class", "s-4quQeJPp-1IB");
			add_location(tr1, file, 656, 4, 15106);
			add_location(tbody, file, 655, 3, 15094);
			attr_dev(table, "class", "s-4quQeJPp-1IB");
			add_render_callback(() => /*table_elementresize_handler*/ ctx[46].call(table));
			add_location(table, file, 615, 2, 14109);
			attr_dev(div0, "class", "table-wrap s-4quQeJPp-1IB");
			set_style(div0, "height", /*table_height*/ ctx[25] + "px");
			attr_dev(div0, "role", "grid");
			attr_dev(div0, "tabindex", "0");
			toggle_class(div0, "dragging", /*dragging*/ ctx[22]);
			toggle_class(div0, "no-wrap", !/*wrap*/ ctx[6]);
			add_location(div0, file, 605, 1, 13913);
			attr_dev(div1, "class", "s-4quQeJPp-1IB");
			toggle_class(div1, "label", /*label*/ ctx[1] && /*label*/ ctx[1].length !== 0);
			add_location(div1, file, 599, 0, 13789);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, table);
			if (if_block1) if_block1.m(table, null);
			append_dev(table, t1);
			append_dev(table, thead);
			append_dev(thead, tr0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(tr0, null);
				}
			}

			append_dev(table, t2);
			append_dev(table, tbody);
			append_dev(tbody, tr1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr1, null);
				}
			}

			table_resize_listener = add_iframe_resize_listener(table, /*table_elementresize_handler*/ ctx[46].bind(table));
			append_dev(div0, t3);
			mount_component(upload, div0, null);
			/*div0_binding*/ ctx[61](div0);
			append_dev(div1, t4);
			if (if_block2) if_block2.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "click", /*handle_click_outside*/ ctx[37], false, false, false, false),
					listen_dev(window, "touchstart", /*handle_click_outside*/ ctx[37], false, false, false, false),
					listen_dev(window, "resize", /*resize_handler*/ ctx[44], false, false, false, false),
					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[62], false, false, false, false),
					action_destroyer(copy.call(null, div1))
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*label*/ ctx[1] && /*label*/ ctx[1].length !== 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*label*/ ctx[1] && /*label*/ ctx[1].length !== 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(table, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*get_sort_status, _headers, sort_by, sort_direction, header_edit, latex_delimiters*/ 268986384) {
				each_value_3 = ensure_array_like_dev(/*_headers*/ ctx[11]);
				group_outros();
				validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_3, each0_lookup, tr0, outro_and_destroy_block, create_each_block_3, null, get_each_context_3);
				check_outros();
			}

			if (dirty[0] & /*cells, max, latex_delimiters, datatype*/ 134250513) {
				each_value_2 = ensure_array_like_dev(/*max*/ ctx[27]);
				group_outros();
				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_1);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value_2, each1_lookup, tr1, outro_and_destroy_block, create_each_block_2, null, get_each_context_2);
				check_outros();
			}

			const upload_changes = {};
			if (dirty[0] & /*root*/ 128) upload_changes.root = /*root*/ ctx[7];

			if (dirty[0] & /*t_width, height, selected_index, data, table_height, selected, latex_delimiters, editing, datatype, clear_on_focus, els, parent, _headers, sort_by, sort_direction, header_edit, selected_header, select_on_focus, label*/ 129989907 | dirty[2] & /*$$scope*/ 16777216) {
				upload_changes.$$scope = { dirty, ctx };
			}

			if (!updating_dragging && dirty[0] & /*dragging*/ 4194304) {
				updating_dragging = true;
				upload_changes.dragging = /*dragging*/ ctx[22];
				add_flush_callback(() => updating_dragging = false);
			}

			upload.$set(upload_changes);

			if (!current || dirty[0] & /*table_height*/ 33554432) {
				set_style(div0, "height", /*table_height*/ ctx[25] + "px");
			}

			if (!current || dirty[0] & /*dragging*/ 4194304) {
				toggle_class(div0, "dragging", /*dragging*/ ctx[22]);
			}

			if (!current || dirty[0] & /*wrap*/ 64) {
				toggle_class(div0, "no-wrap", !/*wrap*/ ctx[6]);
			}

			if (/*editable*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*editable*/ 32) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*label*/ 2) {
				toggle_class(div1, "label", /*label*/ ctx[1] && /*label*/ ctx[1].length !== 0);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(upload.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(upload.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			table_resize_listener();
			destroy_component(upload);
			/*div0_binding*/ ctx[61](null);
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function make_id() {
	return Math.random().toString(36).substring(2, 15);
}

function guess_delimitaor(text, possibleDelimiters) {
	return possibleDelimiters.filter(weedOut);

	function weedOut(delimiter) {
		var cache = -1;
		return text.split("\n").every(checkLength);

		function checkLength(line) {
			if (!line) {
				return true;
			}

			var length = line.split(delimiter).length;

			if (cache < 0) {
				cache = length;
			}

			return cache === length && length > 1;
		}
	}
}

function data_uri_to_blob(data_uri) {
	const byte_str = atob(data_uri.split(",")[1]);
	const mime_str = data_uri.split(",")[0].split(":")[1].split(";")[0];
	const ab = new ArrayBuffer(byte_str.length);
	const ia = new Uint8Array(ab);

	for (let i = 0; i < byte_str.length; i++) {
		ia[i] = byte_str.charCodeAt(i);
	}

	return new Blob([ab], { type: mime_str });
}

function instance($$self, $$props, $$invalidate) {
	let max;
	let selected_index;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Table', slots, []);
	let { datatype } = $$props;
	let { label = null } = $$props;
	let { headers = [] } = $$props;
	let { values = [[]] } = $$props;
	let { col_count } = $$props;
	let { row_count } = $$props;
	let { latex_delimiters } = $$props;
	let { editable = true } = $$props;
	let { wrap = false } = $$props;
	let { root } = $$props;
	let { height = undefined } = $$props;
	let { i18n } = $$props;
	let selected = false;
	const dispatch = createEventDispatcher();
	let editing = false;
	const get_data_at = (row, col) => data?.[row]?.[col]?.value;
	let els = {};
	let data_binding = {};

	function make_headers(_head) {
		let _h = _head || [];

		if (col_count[1] === "fixed" && _h.length < col_count[0]) {
			const fill = Array(col_count[0] - _h.length).fill("").map((_, i) => `${i + _h.length}`);
			_h = _h.concat(fill);
		}

		if (!_h || _h.length === 0) {
			return Array(col_count[0]).fill(0).map((_, i) => {
				const _id = make_id();
				$$invalidate(17, els[_id] = { cell: null, input: null }, els);
				return { id: _id, value: JSON.stringify(i + 1) };
			});
		}

		return _h.map((h, i) => {
			const _id = make_id();
			$$invalidate(17, els[_id] = { cell: null, input: null }, els);
			return { id: _id, value: h ?? "" };
		});
	}

	function process_data(_values) {
		const data_row_length = _values.length;

		return Array(row_count[1] === "fixed"
		? row_count[0]
		: data_row_length < row_count[0]
			? row_count[0]
			: data_row_length).fill(0).map((_, i) => Array(col_count[1] === "fixed"
		? col_count[0]
		: data_row_length > 0 ? _values[0].length : headers.length).fill(0).map((_, j) => {
			const id = make_id();
			$$invalidate(17, els[id] = els[id] || { input: null, cell: null }, els);
			const obj = { value: _values?.[i]?.[j] ?? "", id };
			data_binding[id] = obj;
			return obj;
		}));
	}

	let _headers = make_headers(headers);
	let old_headers;

	function trigger_headers() {
		$$invalidate(11, _headers = make_headers(headers));
		$$invalidate(42, old_headers = headers.slice());
	}

	let data = [[]];
	let old_val = undefined;

	function get_sort_status(name, _sort, direction) {
		if (!_sort) return "none";

		if (headers[_sort] === name) {
			if (direction === "asc") return "ascending";
			if (direction === "des") return "descending";
		}

		return "none";
	}

	function get_current_indices(id) {
		return data.reduce(
			(acc, arr, i) => {
				const j = arr.reduce((_acc, _data, k) => id === _data.id ? k : _acc, -1);
				return j === -1 ? acc : [i, j];
			},
			[-1, -1]
		);
	}

	async function start_edit(i, j) {
		if (!editable || dequal(editing, [i, j])) return;
		$$invalidate(16, editing = [i, j]);
	}

	function move_cursor(key, current_coords) {
		const dir = ({
			ArrowRight: [0, 1],
			ArrowLeft: [0, -1],
			ArrowDown: [1, 0],
			ArrowUp: [-1, 0]
		})[key];

		const i = current_coords[0] + dir[0];
		const j = current_coords[1] + dir[1];

		if (i < 0 && j <= 0) {
			$$invalidate(21, selected_header = j);
			$$invalidate(10, selected = false);
		} else {
			const is_data = data[i]?.[j];
			$$invalidate(10, selected = is_data ? [i, j] : selected);
		}
	}

	let clear_on_focus = false;

	// eslint-disable-next-line complexity
	async function handle_keydown(event) {
		if (selected_header !== false && header_edit === false) {
			switch (event.key) {
				case "ArrowDown":
					$$invalidate(10, selected = [0, selected_header]);
					$$invalidate(21, selected_header = false);
					return;
				case "ArrowLeft":
					$$invalidate(21, selected_header = selected_header > 0
					? selected_header - 1
					: selected_header);
					return;
				case "ArrowRight":
					$$invalidate(21, selected_header = selected_header < _headers.length - 1
					? selected_header + 1
					: selected_header);
					return;
				case "Escape":
					event.preventDefault();
					$$invalidate(21, selected_header = false);
					break;
				case "Enter":
					event.preventDefault();
					break;
			}
		}

		if (!selected) {
			return;
		}

		const [i, j] = selected;

		switch (event.key) {
			case "ArrowRight":
			case "ArrowLeft":
			case "ArrowDown":
			case "ArrowUp":
				if (editing) break;
				event.preventDefault();
				move_cursor(event.key, [i, j]);
				break;
			case "Escape":
				if (!editable) break;
				event.preventDefault();
				$$invalidate(16, editing = false);
				break;
			case "Enter":
				if (!editable) break;
				event.preventDefault();
				if (event.shiftKey) {
					add_row(i);
					await tick();
					$$invalidate(10, selected = [i + 1, j]);
				} else {
					if (dequal(editing, [i, j])) {
						$$invalidate(16, editing = false);
						await tick();
						$$invalidate(10, selected = [i, j]);
					} else {
						$$invalidate(16, editing = [i, j]);
					}
				}
				break;
			case "Backspace":
				if (!editable) break;
				if (!editing) {
					event.preventDefault();
					$$invalidate(12, data[i][j].value = "", data);
				}
				break;
			case "Delete":
				if (!editable) break;
				if (!editing) {
					event.preventDefault();
					$$invalidate(12, data[i][j].value = "", data);
				}
				break;
			case "Tab":
				let direction = event.shiftKey ? -1 : 1;
				let is_data_x = data[i][j + direction];
				let is_data_y = data?.[i + direction]?.[direction > 0 ? 0 : _headers.length - 1];
				if (is_data_x || is_data_y) {
					event.preventDefault();

					$$invalidate(10, selected = is_data_x
					? [i, j + direction]
					: [i + direction, direction > 0 ? 0 : _headers.length - 1]);
				}
				$$invalidate(16, editing = false);
				break;
			default:
				if (!editable) break;
				if ((!editing || editing && dequal(editing, [i, j])) && event.key.length === 1) {
					$$invalidate(18, clear_on_focus = true);
					$$invalidate(16, editing = [i, j]);
				}
		}
	}

	async function handle_cell_click(i, j) {
		if (dequal(editing, [i, j])) return;
		if (dequal(selected, [i, j])) return;
		$$invalidate(19, header_edit = false);
		$$invalidate(21, selected_header = false);
		$$invalidate(16, editing = false);
		$$invalidate(10, selected = [i, j]);
		await tick();
		parent.focus();
	}

	let sort_direction;
	let sort_by;

	function handle_sort(col) {
		if (typeof sort_by !== "number" || sort_by !== col) {
			$$invalidate(13, sort_direction = "asc");
			$$invalidate(14, sort_by = col);
		} else {
			if (sort_direction === "asc") {
				$$invalidate(13, sort_direction = "des");
			} else if (sort_direction === "des") {
				$$invalidate(13, sort_direction = "asc");
			}
		}
	}

	let header_edit;
	let select_on_focus = false;
	let selected_header = false;

	async function edit_header(i, _select = false) {
		if (!editable || col_count[1] !== "dynamic" || header_edit === i) return;
		$$invalidate(10, selected = false);
		$$invalidate(21, selected_header = i);
		$$invalidate(19, header_edit = i);
		$$invalidate(20, select_on_focus = _select);
	}

	function end_header_edit(event) {
		if (!editable) return;

		switch (event.key) {
			case "Escape":
			case "Enter":
			case "Tab":
				event.preventDefault();
				$$invalidate(10, selected = false);
				$$invalidate(21, selected_header = header_edit);
				$$invalidate(19, header_edit = false);
				parent.focus();
				break;
		}
	}

	async function add_row(index) {
		parent.focus();
		if (row_count[1] !== "dynamic") return;

		if (data.length === 0) {
			$$invalidate(41, values = [Array(headers.length).fill("")]);
			return;
		}

		data.splice(index ? index + 1 : data.length, 0, Array(data[0].length).fill(0).map((_, i) => {
			const _id = make_id();
			$$invalidate(17, els[_id] = { cell: null, input: null }, els);
			return { id: _id, value: "" };
		}));

		(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));
		$$invalidate(10, selected = [index ? index + 1 : data.length - 1, 0]);
	}

	async function add_col() {
		parent.focus();
		if (col_count[1] !== "dynamic") return;

		for (let i = 0; i < data.length; i++) {
			const _id = make_id();
			$$invalidate(17, els[_id] = { cell: null, input: null }, els);
			data[i].push({ id: _id, value: "" });
		}

		headers.push(`Header ${headers.length + 1}`);
		(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));
		($$invalidate(40, headers), $$invalidate(41, values));
		await tick();

		requestAnimationFrame(() => {
			edit_header(headers.length - 1, true);
			const new_w = parent.querySelectorAll("tbody")[1].offsetWidth;
			parent.querySelectorAll("table")[1].scrollTo({ left: new_w });
		});
	}

	function handle_click_outside(event) {
		event.stopImmediatePropagation();
		const [trigger] = event.composedPath();

		if (parent.contains(trigger)) {
			return;
		}

		$$invalidate(16, editing = false);
		$$invalidate(19, header_edit = false);
		$$invalidate(21, selected_header = false);
		$$invalidate(10, selected = false);
	}

	function blob_to_string(blob) {
		const reader = new FileReader();

		function handle_read(e) {
			if (!e?.target?.result || typeof e.target.result !== "string") return;
			const [delimiter] = guess_delimitaor(e.target.result, [",", "\t"]);
			const [head, ...rest] = dsvFormat(delimiter).parseRows(e.target.result);

			$$invalidate(11, _headers = make_headers(col_count[1] === "fixed"
			? head.slice(0, col_count[0])
			: head));

			$$invalidate(41, values = rest);
			reader.removeEventListener("loadend", handle_read);
		}

		reader.addEventListener("loadend", handle_read);
		reader.readAsText(blob);
	}

	let dragging = false;
	let t_width = 0;

	function get_max(_d) {
		let max = _d[0].slice();

		for (let i = 0; i < _d.length; i++) {
			for (let j = 0; j < _d[i].length; j++) {
				if (`${max[j].value}`.length < `${_d[i][j].value}`.length) {
					max[j] = _d[i][j];
				}
			}
		}

		return max;
	}

	let cells = [];
	let parent;

	function set_cell_widths() {
		const widths = cells.map((el, i) => {
			return el?.clientWidth || 0;
		});

		if (widths.length === 0) return;

		for (let i = 0; i < widths.length; i++) {
			parent.style.setProperty(`--cell-width-${i}`, `${widths[i]}px`);
		}
	}

	let table_height = height || 500;

	function sort_data(_data, col, dir) {
		const id = selected ? data[selected[0]][selected[1]]?.id : null;

		if (typeof col !== "number" || !dir) {
			return;
		}

		if (dir === "asc") {
			_data.sort((a, b) => a[col].value < b[col].value ? -1 : 1);
		} else if (dir === "des") {
			_data.sort((a, b) => a[col].value > b[col].value ? -1 : 1);
		}

		(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));

		if (id) {
			const [i, j] = get_current_indices(id);
			$$invalidate(10, selected = [i, j]);
		}
	}

	let is_visible = false;

	onMount(() => {
		const observer = new IntersectionObserver((entries, observer) => {
				entries.forEach(entry => {
					if (entry.isIntersecting && !is_visible) {
						set_cell_widths();
						(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));
					}

					is_visible = entry.isIntersecting;
				});
			});

		observer.observe(parent);

		return () => {
			observer.disconnect();
		};
	});

	$$self.$$.on_mount.push(function () {
		if (datatype === undefined && !('datatype' in $$props || $$self.$$.bound[$$self.$$.props['datatype']])) {
			console.warn("<Table> was created without expected prop 'datatype'");
		}

		if (col_count === undefined && !('col_count' in $$props || $$self.$$.bound[$$self.$$.props['col_count']])) {
			console.warn("<Table> was created without expected prop 'col_count'");
		}

		if (row_count === undefined && !('row_count' in $$props || $$self.$$.bound[$$self.$$.props['row_count']])) {
			console.warn("<Table> was created without expected prop 'row_count'");
		}

		if (latex_delimiters === undefined && !('latex_delimiters' in $$props || $$self.$$.bound[$$self.$$.props['latex_delimiters']])) {
			console.warn("<Table> was created without expected prop 'latex_delimiters'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Table> was created without expected prop 'root'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<Table> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'datatype',
		'label',
		'headers',
		'values',
		'col_count',
		'row_count',
		'latex_delimiters',
		'editable',
		'wrap',
		'root',
		'height',
		'i18n'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Table> was created with unknown prop '${key}'`);
	});

	const resize_handler = () => set_cell_widths();

	function td_binding($$value, j) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cells[j] = $$value;
			$$invalidate(15, cells);
		});
	}

	function table_elementresize_handler() {
		t_width = this.clientWidth;
		$$invalidate(23, t_width);
	}

	function editablecell_value_binding(value, index, j) {
		if ($$self.$$.not_equal(data[index][j].value, value)) {
			data[index][j].value = value;
			(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));
		}
	}

	function editablecell_el_binding(value, id) {
		if ($$self.$$.not_equal(els[id].input, value)) {
			els[id].input = value;
			$$invalidate(17, els);
		}
	}

	const blur_handler = () => ($$invalidate(18, clear_on_focus = false), parent.focus());
	const touchstart_handler = (index, j) => start_edit(index, j);
	const click_handler = (index, j) => handle_cell_click(index, j);
	const dblclick_handler = (index, j) => start_edit(index, j);

	function editablecell_value_binding_1(value, i) {
		if ($$self.$$.not_equal(_headers[i].value, value)) {
			_headers[i].value = value;
			$$invalidate(11, _headers);
		}
	}

	function editablecell_el_binding_1(value, id) {
		if ($$self.$$.not_equal(els[id].input, value)) {
			els[id].input = value;
			$$invalidate(17, els);
		}
	}

	const dblclick_handler_1 = i => edit_header(i);
	const click_handler_1 = i => handle_sort(i);

	function virtualtable_items_binding(value) {
		data = value;
		(($$invalidate(12, data), $$invalidate(41, values)), $$invalidate(43, old_val));
	}

	function virtualtable_actual_height_binding(value) {
		table_height = value;
		$$invalidate(25, table_height);
	}

	function upload_dragging_binding(value) {
		dragging = value;
		$$invalidate(22, dragging);
	}

	const load_handler = e => blob_to_string(data_uri_to_blob(e.detail.data));

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			parent = $$value;
			$$invalidate(24, parent);
		});
	}

	const keydown_handler = e => handle_keydown(e);
	const click_handler_2 = e => (e.stopPropagation(), add_row());
	const click_handler_3 = e => (e.stopPropagation(), add_col());

	$$self.$$set = $$props => {
		if ('datatype' in $$props) $$invalidate(0, datatype = $$props.datatype);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('headers' in $$props) $$invalidate(40, headers = $$props.headers);
		if ('values' in $$props) $$invalidate(41, values = $$props.values);
		if ('col_count' in $$props) $$invalidate(2, col_count = $$props.col_count);
		if ('row_count' in $$props) $$invalidate(3, row_count = $$props.row_count);
		if ('latex_delimiters' in $$props) $$invalidate(4, latex_delimiters = $$props.latex_delimiters);
		if ('editable' in $$props) $$invalidate(5, editable = $$props.editable);
		if ('wrap' in $$props) $$invalidate(6, wrap = $$props.wrap);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('height' in $$props) $$invalidate(8, height = $$props.height);
		if ('i18n' in $$props) $$invalidate(9, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick,
		onMount,
		dsvFormat,
		dequal,
		copy,
		Upload,
		BaseButton: Button,
		EditableCell,
		VirtualTable,
		datatype,
		label,
		headers,
		values,
		col_count,
		row_count,
		latex_delimiters,
		editable,
		wrap,
		root,
		height,
		i18n,
		selected,
		dispatch,
		editing,
		get_data_at,
		els,
		data_binding,
		make_id,
		make_headers,
		process_data,
		_headers,
		old_headers,
		trigger_headers,
		data,
		old_val,
		get_sort_status,
		get_current_indices,
		start_edit,
		move_cursor,
		clear_on_focus,
		handle_keydown,
		handle_cell_click,
		sort_direction,
		sort_by,
		handle_sort,
		header_edit,
		select_on_focus,
		selected_header,
		edit_header,
		end_header_edit,
		add_row,
		add_col,
		handle_click_outside,
		guess_delimitaor,
		data_uri_to_blob,
		blob_to_string,
		dragging,
		t_width,
		get_max,
		cells,
		parent,
		set_cell_widths,
		table_height,
		sort_data,
		is_visible,
		selected_index,
		max
	});

	$$self.$inject_state = $$props => {
		if ('datatype' in $$props) $$invalidate(0, datatype = $$props.datatype);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('headers' in $$props) $$invalidate(40, headers = $$props.headers);
		if ('values' in $$props) $$invalidate(41, values = $$props.values);
		if ('col_count' in $$props) $$invalidate(2, col_count = $$props.col_count);
		if ('row_count' in $$props) $$invalidate(3, row_count = $$props.row_count);
		if ('latex_delimiters' in $$props) $$invalidate(4, latex_delimiters = $$props.latex_delimiters);
		if ('editable' in $$props) $$invalidate(5, editable = $$props.editable);
		if ('wrap' in $$props) $$invalidate(6, wrap = $$props.wrap);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('height' in $$props) $$invalidate(8, height = $$props.height);
		if ('i18n' in $$props) $$invalidate(9, i18n = $$props.i18n);
		if ('selected' in $$props) $$invalidate(10, selected = $$props.selected);
		if ('editing' in $$props) $$invalidate(16, editing = $$props.editing);
		if ('els' in $$props) $$invalidate(17, els = $$props.els);
		if ('data_binding' in $$props) data_binding = $$props.data_binding;
		if ('_headers' in $$props) $$invalidate(11, _headers = $$props._headers);
		if ('old_headers' in $$props) $$invalidate(42, old_headers = $$props.old_headers);
		if ('data' in $$props) $$invalidate(12, data = $$props.data);
		if ('old_val' in $$props) $$invalidate(43, old_val = $$props.old_val);
		if ('clear_on_focus' in $$props) $$invalidate(18, clear_on_focus = $$props.clear_on_focus);
		if ('sort_direction' in $$props) $$invalidate(13, sort_direction = $$props.sort_direction);
		if ('sort_by' in $$props) $$invalidate(14, sort_by = $$props.sort_by);
		if ('header_edit' in $$props) $$invalidate(19, header_edit = $$props.header_edit);
		if ('select_on_focus' in $$props) $$invalidate(20, select_on_focus = $$props.select_on_focus);
		if ('selected_header' in $$props) $$invalidate(21, selected_header = $$props.selected_header);
		if ('dragging' in $$props) $$invalidate(22, dragging = $$props.dragging);
		if ('t_width' in $$props) $$invalidate(23, t_width = $$props.t_width);
		if ('cells' in $$props) $$invalidate(15, cells = $$props.cells);
		if ('parent' in $$props) $$invalidate(24, parent = $$props.parent);
		if ('table_height' in $$props) $$invalidate(25, table_height = $$props.table_height);
		if ('is_visible' in $$props) is_visible = $$props.is_visible;
		if ('selected_index' in $$props) $$invalidate(26, selected_index = $$props.selected_index);
		if ('max' in $$props) $$invalidate(27, max = $$props.max);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*values*/ 1024) {
			{
				if (values && !Array.isArray(values)) {
					$$invalidate(40, headers = values.headers);
					$$invalidate(41, values = values.data);
				} else if (values === null) {
					$$invalidate(41, values = []);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*selected*/ 1024) {
			{
				if (selected !== false) {
					const [row, col] = selected;

					if (!isNaN(row) && !isNaN(col)) {
						dispatch("select", {
							index: [row, col],
							value: get_data_at(row, col)
						});
					}
				}
			}
		}

		if ($$self.$$.dirty[1] & /*headers, old_headers*/ 2560) {
			{
				if (!dequal(headers, old_headers)) {
					trigger_headers();
				}
			}
		}

		if ($$self.$$.dirty[1] & /*values, old_val*/ 5120) {
			if (!dequal(values, old_val)) {
				$$invalidate(12, data = process_data(values));
				$$invalidate(43, old_val = values);
			}
		}

		if ($$self.$$.dirty[0] & /*_headers, data*/ 6144) {
			_headers && dispatch("change", {
				data: data.map(r => r.map(({ value }) => value)),
				headers: _headers.map(h => h.value)
			});
		}

		if ($$self.$$.dirty[0] & /*data*/ 4096) {
			$$invalidate(27, max = get_max(data));
		}

		if ($$self.$$.dirty[0] & /*cells*/ 32768) {
			cells[0] && set_cell_widths();
		}

		if ($$self.$$.dirty[0] & /*data, sort_by, sort_direction*/ 28672) {
			sort_data(data, sort_by, sort_direction);
		}

		if ($$self.$$.dirty[0] & /*selected*/ 1024) {
			$$invalidate(26, selected_index = !!selected && selected[0]);
		}
	};

	return [
		datatype,
		label,
		col_count,
		row_count,
		latex_delimiters,
		editable,
		wrap,
		root,
		height,
		i18n,
		selected,
		_headers,
		data,
		sort_direction,
		sort_by,
		cells,
		editing,
		els,
		clear_on_focus,
		header_edit,
		select_on_focus,
		selected_header,
		dragging,
		t_width,
		parent,
		table_height,
		selected_index,
		max,
		get_sort_status,
		start_edit,
		handle_keydown,
		handle_cell_click,
		handle_sort,
		edit_header,
		end_header_edit,
		add_row,
		add_col,
		handle_click_outside,
		blob_to_string,
		set_cell_widths,
		headers,
		values,
		old_headers,
		old_val,
		resize_handler,
		td_binding,
		table_elementresize_handler,
		editablecell_value_binding,
		editablecell_el_binding,
		blur_handler,
		touchstart_handler,
		click_handler,
		dblclick_handler,
		editablecell_value_binding_1,
		editablecell_el_binding_1,
		dblclick_handler_1,
		click_handler_1,
		virtualtable_items_binding,
		virtualtable_actual_height_binding,
		upload_dragging_binding,
		load_handler,
		div0_binding,
		keydown_handler,
		click_handler_2,
		click_handler_3
	];
}

class Table extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				datatype: 0,
				label: 1,
				headers: 40,
				values: 41,
				col_count: 2,
				row_count: 3,
				latex_delimiters: 4,
				editable: 5,
				wrap: 6,
				root: 7,
				height: 8,
				i18n: 9
			},
			null,
			[-1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Table",
			options,
			id: create_fragment.name
		});
	}

	get datatype() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set datatype(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get headers() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set headers(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get values() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set values(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get col_count() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set col_count(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get row_count() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row_count(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get latex_delimiters() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set latex_delimiters(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get editable() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editable(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrap() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrap(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Table as T };
//# sourceMappingURL=Table-63c024df.js.map
