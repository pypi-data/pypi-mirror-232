import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_store, component_subscribe, validate_slots, element, create_component, attr_dev, toggle_class, add_location, insert_dev, mount_component, transition_in, transition_out, detach_dev, destroy_component, binding_callbacks, bind, text, space, append_dev, set_data_dev, add_flush_callback } from '../../../node/dev/svelte-internal.js';
import StaticForm from './index-3147bd44.js';
import { I as InteractiveTextbox } from './InteractiveTextbox-0a23a5ae.js';
import { a as Button } from './Button-71613b11.js';
import { X } from './index-b455ce1a.js';
import './Textbox-9cb64504.js';
import StaticColumn from './index-ed012dce.js';
import './BlockTitle-153169b9.js';
import './Copy-4994c840.js';

const Login_svelte_svelte_type_style_lang = '';

/* src/Login.svelte generated by Svelte v4.0.0 */
const file = "src/Login.svelte";

// (35:2) {#if auth_message}
function create_if_block_2(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(/*auth_message*/ ctx[0]);
			attr_dev(p, "class", "auth s-FUFWswQIP-HT");
			add_location(p, file, 38, 3, 995);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*auth_message*/ 1) set_data_dev(t, /*auth_message*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(p);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(35:2) {#if auth_message}",
		ctx
	});

	return block;
}

// (38:2) {#if space_id}
function create_if_block_1(ctx) {
	let p;
	let t_value = /*$_*/ ctx[6]("login.enable_cookies") + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			attr_dev(p, "class", "auth s-FUFWswQIP-HT");
			add_location(p, file, 41, 3, 1058);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$_*/ 64 && t_value !== (t_value = /*$_*/ ctx[6]("login.enable_cookies") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(p);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(38:2) {#if space_id}",
		ctx
	});

	return block;
}

// (43:2) {#if incorrect_credentials}
function create_if_block(ctx) {
	let p;
	let t_value = /*$_*/ ctx[6]("login.incorrect_credentials") + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			attr_dev(p, "class", "creds s-FUFWswQIP-HT");
			add_location(p, file, 46, 3, 1157);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$_*/ 64 && t_value !== (t_value = /*$_*/ ctx[6]("login.incorrect_credentials") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(p);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(43:2) {#if incorrect_credentials}",
		ctx
	});

	return block;
}

// (46:2) <Form>
function create_default_slot_2(ctx) {
	let textbox0;
	let updating_value;
	let t;
	let textbox1;
	let updating_value_1;
	let current;

	function textbox0_value_binding(value) {
		/*textbox0_value_binding*/ ctx[9](value);
	}

	let textbox0_props = {
		label: "username",
		lines: 1,
		show_label: true,
		max_lines: 1
	};

	if (/*username*/ ctx[3] !== void 0) {
		textbox0_props.value = /*username*/ ctx[3];
	}

	textbox0 = new InteractiveTextbox({ props: textbox0_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox0, 'value', textbox0_value_binding));
	textbox0.$on("submit", /*submit*/ ctx[7]);

	function textbox1_value_binding(value) {
		/*textbox1_value_binding*/ ctx[10](value);
	}

	let textbox1_props = {
		label: "password",
		lines: 1,
		show_label: true,
		max_lines: 1,
		type: "password"
	};

	if (/*password*/ ctx[4] !== void 0) {
		textbox1_props.value = /*password*/ ctx[4];
	}

	textbox1 = new InteractiveTextbox({ props: textbox1_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox1, 'value', textbox1_value_binding));
	textbox1.$on("submit", /*submit*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(textbox0.$$.fragment);
			t = space();
			create_component(textbox1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(textbox0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(textbox1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textbox0_changes = {};

			if (!updating_value && dirty & /*username*/ 8) {
				updating_value = true;
				textbox0_changes.value = /*username*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			textbox0.$set(textbox0_changes);
			const textbox1_changes = {};

			if (!updating_value_1 && dirty & /*password*/ 16) {
				updating_value_1 = true;
				textbox1_changes.value = /*password*/ ctx[4];
				add_flush_callback(() => updating_value_1 = false);
			}

			textbox1.$set(textbox1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textbox0.$$.fragment, local);
			transition_in(textbox1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textbox0.$$.fragment, local);
			transition_out(textbox1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(textbox0, detaching);
			destroy_component(textbox1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(46:2) <Form>",
		ctx
	});

	return block;
}

// (66:2) <BaseButton size="lg" variant="primary" on:click={submit}    >
function create_default_slot_1(ctx) {
	let t_value = /*$_*/ ctx[6]("login.login") + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$_*/ 64 && t_value !== (t_value = /*$_*/ ctx[6]("login.login") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(66:2) <BaseButton size=\\\"lg\\\" variant=\\\"primary\\\" on:click={submit}    >",
		ctx
	});

	return block;
}

// (33:1) <Column variant="panel" min_width={480}>
function create_default_slot(ctx) {
	let h2;
	let t0_value = /*$_*/ ctx[6]("login.login") + "";
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let form;
	let t5;
	let basebutton;
	let current;
	let if_block0 = /*auth_message*/ ctx[0] && create_if_block_2(ctx);
	let if_block1 = /*space_id*/ ctx[2] && create_if_block_1(ctx);
	let if_block2 = /*incorrect_credentials*/ ctx[5] && create_if_block(ctx);

	form = new StaticForm({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton = new Button({
			props: {
				size: "lg",
				variant: "primary",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	basebutton.$on("click", /*submit*/ ctx[7]);

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			create_component(form.$$.fragment);
			t5 = space();
			create_component(basebutton.$$.fragment);
			attr_dev(h2, "class", "s-FUFWswQIP-HT");
			add_location(h2, file, 36, 2, 942);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(form, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(basebutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*$_*/ 64) && t0_value !== (t0_value = /*$_*/ ctx[6]("login.login") + "")) set_data_dev(t0, t0_value);

			if (/*auth_message*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(t2.parentNode, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*space_id*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*incorrect_credentials*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(t4.parentNode, t4);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			const form_changes = {};

			if (dirty & /*$$scope, password, username*/ 2072) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
			const basebutton_changes = {};

			if (dirty & /*$$scope, $_*/ 2112) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			transition_in(basebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(form.$$.fragment, local);
			transition_out(basebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(h2);
				detach_dev(t1);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(t4);
				detach_dev(t5);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d(detaching);
			if (if_block2) if_block2.d(detaching);
			destroy_component(form, detaching);
			destroy_component(basebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(33:1) <Column variant=\\\"panel\\\" min_width={480}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let column;
	let current;

	column = new StaticColumn({
			props: {
				variant: "panel",
				min_width: 480,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(column.$$.fragment);
			attr_dev(div, "class", "wrap s-FUFWswQIP-HT");
			toggle_class(div, "min-h-screen", /*app_mode*/ ctx[1]);
			add_location(div, file, 34, 0, 849);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(column, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const column_changes = {};

			if (dirty & /*$$scope, $_, password, username, incorrect_credentials, space_id, auth_message*/ 2173) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);

			if (!current || dirty & /*app_mode*/ 2) {
				toggle_class(div, "min-h-screen", /*app_mode*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(column);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $_;
	validate_store(X, '_');
	component_subscribe($$self, X, $$value => $$invalidate(6, $_ = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Login', slots, []);
	let { root } = $$props;
	let { auth_message } = $$props;
	let { app_mode } = $$props;
	let { space_id } = $$props;
	let username = "";
	let password = "";
	let incorrect_credentials = false;

	const submit = async () => {
		const formData = new FormData();
		formData.append("username", username);
		formData.append("password", password);
		let response = await fetch(root + "/login", { method: "POST", body: formData });

		if (response.status === 400) {
			$$invalidate(5, incorrect_credentials = true);
			$$invalidate(3, username = "");
			$$invalidate(4, password = "");
		} else if (response.status == 200) {
			location.reload();
		}
	};

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Login> was created without expected prop 'root'");
		}

		if (auth_message === undefined && !('auth_message' in $$props || $$self.$$.bound[$$self.$$.props['auth_message']])) {
			console.warn("<Login> was created without expected prop 'auth_message'");
		}

		if (app_mode === undefined && !('app_mode' in $$props || $$self.$$.bound[$$self.$$.props['app_mode']])) {
			console.warn("<Login> was created without expected prop 'app_mode'");
		}

		if (space_id === undefined && !('space_id' in $$props || $$self.$$.bound[$$self.$$.props['space_id']])) {
			console.warn("<Login> was created without expected prop 'space_id'");
		}
	});

	const writable_props = ['root', 'auth_message', 'app_mode', 'space_id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
	});

	function textbox0_value_binding(value) {
		username = value;
		$$invalidate(3, username);
	}

	function textbox1_value_binding(value) {
		password = value;
		$$invalidate(4, password);
	}

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(8, root = $$props.root);
		if ('auth_message' in $$props) $$invalidate(0, auth_message = $$props.auth_message);
		if ('app_mode' in $$props) $$invalidate(1, app_mode = $$props.app_mode);
		if ('space_id' in $$props) $$invalidate(2, space_id = $$props.space_id);
	};

	$$self.$capture_state = () => ({
		Form: StaticForm,
		Textbox: InteractiveTextbox,
		BaseButton: Button,
		Column: StaticColumn,
		_: X,
		root,
		auth_message,
		app_mode,
		space_id,
		username,
		password,
		incorrect_credentials,
		submit,
		$_
	});

	$$self.$inject_state = $$props => {
		if ('root' in $$props) $$invalidate(8, root = $$props.root);
		if ('auth_message' in $$props) $$invalidate(0, auth_message = $$props.auth_message);
		if ('app_mode' in $$props) $$invalidate(1, app_mode = $$props.app_mode);
		if ('space_id' in $$props) $$invalidate(2, space_id = $$props.space_id);
		if ('username' in $$props) $$invalidate(3, username = $$props.username);
		if ('password' in $$props) $$invalidate(4, password = $$props.password);
		if ('incorrect_credentials' in $$props) $$invalidate(5, incorrect_credentials = $$props.incorrect_credentials);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		auth_message,
		app_mode,
		space_id,
		username,
		password,
		incorrect_credentials,
		$_,
		submit,
		root,
		textbox0_value_binding,
		textbox1_value_binding
	];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			root: 8,
			auth_message: 0,
			app_mode: 1,
			space_id: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment.name
		});
	}

	get root() {
		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get auth_message() {
		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set auth_message(value) {
		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app_mode() {
		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app_mode(value) {
		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get space_id() {
		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set space_id(value) {
		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Login as default };
//# sourceMappingURL=Login-2fdaf8b2.js.map
