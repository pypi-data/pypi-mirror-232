import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, ensure_array_like_dev, validate_slots, createEventDispatcher, afterUpdate, create_component, space, element, attr_dev, add_location, mount_component, insert_dev, transition_in, transition_out, detach_dev, destroy_component, destroy_each, text, set_data_dev, toggle_class, append_dev, listen_dev, prop_dev, run_all } from '../../../node/dev/svelte-internal.js';
import './Button-71613b11.js';
import { B as BlockTitle } from './BlockTitle-153169b9.js';
import './index-b455ce1a.js';

const Checkboxgroup_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/checkboxgroup/shared/Checkboxgroup.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/checkboxgroup/shared/Checkboxgroup.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

// (38:0) <BlockTitle {show_label} {info}>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8) set_data_dev(t, /*label*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(38:0) <BlockTitle {show_label} {info}>",
		ctx
	});

	return block;
}

// (41:1) {#each choices as choice, i}
function create_each_block(ctx) {
	let label_1;
	let input;
	let input_checked_value;
	let t0;
	let span;
	let t1_value = /*choice*/ ctx[13][0] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function change_handler() {
		return /*change_handler*/ ctx[10](/*choice*/ ctx[13]);
	}

	function input_handler(...args) {
		return /*input_handler*/ ctx[11](/*i*/ ctx[15], /*choice*/ ctx[13], ...args);
	}

	const block = {
		c: function create() {
			label_1 = element("label");
			input = element("input");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			input.disabled = /*disabled*/ ctx[2];
			input.checked = input_checked_value = /*value*/ ctx[0].includes(/*choice*/ ctx[13][1]);
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "name", "test");
			attr_dev(input, "class", "s-1ZE2pI_XOXFT");
			add_location(input, file, 53, 3, 1084);
			attr_dev(span, "class", "ml-2 s-1ZE2pI_XOXFT");
			add_location(span, file, 66, 3, 1377);
			attr_dev(label_1, "class", "s-1ZE2pI_XOXFT");
			toggle_class(label_1, "disabled", /*disabled*/ ctx[2]);
			toggle_class(label_1, "selected", /*value*/ ctx[0].includes(/*choice*/ ctx[13][1]));
			add_location(label_1, file, 52, 2, 1015);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, input);
			append_dev(label_1, t0);
			append_dev(label_1, span);
			append_dev(span, t1);
			append_dev(label_1, t2);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", change_handler, false, false, false, false),
					listen_dev(input, "input", input_handler, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*disabled*/ 4) {
				prop_dev(input, "disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*value, choices*/ 3 && input_checked_value !== (input_checked_value = /*value*/ ctx[0].includes(/*choice*/ ctx[13][1]))) {
				prop_dev(input, "checked", input_checked_value);
			}

			if (dirty & /*choices*/ 2 && t1_value !== (t1_value = /*choice*/ ctx[13][0] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*disabled*/ 4) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*value, choices*/ 3) {
				toggle_class(label_1, "selected", /*value*/ ctx[0].includes(/*choice*/ ctx[13][1]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(label_1);
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(41:1) {#each choices as choice, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let blocktitle;
	let t;
	let div;
	let current;

	blocktitle = new BlockTitle({
			props: {
				show_label: /*show_label*/ ctx[5],
				info: /*info*/ ctx[4],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = ensure_array_like_dev(/*choices*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			create_component(blocktitle.$$.fragment);
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "wrap s-1ZE2pI_XOXFT");
			attr_dev(div, "data-testid", "checkbox-group");
			add_location(div, file, 50, 0, 935);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocktitle, target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};
			if (dirty & /*show_label*/ 32) blocktitle_changes.show_label = /*show_label*/ ctx[5];
			if (dirty & /*info*/ 16) blocktitle_changes.info = /*info*/ ctx[4];

			if (dirty & /*$$scope, label*/ 65544) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*disabled, value, choices, toggleChoice, dispatch*/ 199) {
				each_value = ensure_array_like_dev(/*choices*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			destroy_component(blocktitle, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Checkboxgroup', slots, []);
	let { value = [] } = $$props;
	let old_value = value.slice();
	let { value_is_output = false } = $$props;
	let { choices } = $$props;
	let { disabled = false } = $$props;
	let { label } = $$props;
	let { info = undefined } = $$props;
	let { show_label } = $$props;
	const dispatch = createEventDispatcher();

	function toggleChoice(choice) {
		if (value.includes(choice)) {
			value.splice(value.indexOf(choice), 1);
		} else {
			value.push(choice);
		}

		$$invalidate(0, value);
	}

	function handle_change() {
		dispatch("change", value);

		if (!value_is_output) {
			dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(8, value_is_output = false);
	});

	$$self.$$.on_mount.push(function () {
		if (choices === undefined && !('choices' in $$props || $$self.$$.bound[$$self.$$.props['choices']])) {
			console.warn("<Checkboxgroup> was created without expected prop 'choices'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<Checkboxgroup> was created without expected prop 'label'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<Checkboxgroup> was created without expected prop 'show_label'");
		}
	});

	const writable_props = [
		'value',
		'value_is_output',
		'choices',
		'disabled',
		'label',
		'info',
		'show_label'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Checkboxgroup> was created with unknown prop '${key}'`);
	});

	const change_handler = choice => toggleChoice(choice[1]);

	const input_handler = (i, choice, evt) => dispatch("select", {
		index: i,
		value: choice[1],
		selected: evt.currentTarget.checked
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(8, value_is_output = $$props.value_is_output);
		if ('choices' in $$props) $$invalidate(1, choices = $$props.choices);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		afterUpdate,
		BlockTitle,
		value,
		old_value,
		value_is_output,
		choices,
		disabled,
		label,
		info,
		show_label,
		dispatch,
		toggleChoice,
		handle_change
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(9, old_value = $$props.old_value);
		if ('value_is_output' in $$props) $$invalidate(8, value_is_output = $$props.value_is_output);
		if ('choices' in $$props) $$invalidate(1, choices = $$props.choices);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('info' in $$props) $$invalidate(4, info = $$props.info);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, old_value*/ 513) {
			{
				if (JSON.stringify(value) !== JSON.stringify(old_value)) {
					$$invalidate(9, old_value = value.slice());
					handle_change();
				}
			}
		}
	};

	return [
		value,
		choices,
		disabled,
		label,
		info,
		show_label,
		dispatch,
		toggleChoice,
		value_is_output,
		old_value,
		change_handler,
		input_handler
	];
}

class Checkboxgroup extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			value: 0,
			value_is_output: 8,
			choices: 1,
			disabled: 2,
			label: 3,
			info: 4,
			show_label: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkboxgroup",
			options,
			id: create_fragment.name
		});
	}

	get value() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value_is_output() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value_is_output(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get choices() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set choices(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get info() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set info(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Checkboxgroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Checkboxgroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Checkboxgroup as C };
//# sourceMappingURL=Checkboxgroup-6e3717ea.js.map
