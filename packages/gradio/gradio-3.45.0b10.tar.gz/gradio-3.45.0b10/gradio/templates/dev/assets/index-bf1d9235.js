import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, getContext, validate_store, component_subscribe, onMount, tick, create_slot, element, create_component, attr_dev, set_style, add_location, insert_dev, mount_component, transition_in, transition_out, detach_dev, destroy_component, update_slot_base, get_all_dirty_from_scope, get_slot_changes } from '../../../node/dev/svelte-internal.js';
import { T as TABS } from './StaticTabs-be60b716.js';
import StaticColumn from './index-ed012dce.js';
import './index-b455ce1a.js';

const TabItem_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/tabitem/static/TabItem.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/tabitem/static/TabItem.svelte";

// (23:1) <Column>
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(23:1) <Column>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let column;
	let div_class_value;
	let current;

	column = new StaticColumn({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(column.$$.fragment);
			attr_dev(div, "id", /*elem_id*/ ctx[0]);
			attr_dev(div, "class", div_class_value = "tabitem " + /*elem_classes*/ ctx[1].join(' ') + " s-cTNr_KVcogUW");

			set_style(div, "display", /*$selected_tab*/ ctx[3] === /*id*/ ctx[2]
			? "block"
			: "none");

			add_location(div, file, 26, 0, 659);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(column, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const column_changes = {};

			if (dirty & /*$$scope*/ 512) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(div, "id", /*elem_id*/ ctx[0]);
			}

			if (!current || dirty & /*elem_classes*/ 2 && div_class_value !== (div_class_value = "tabitem " + /*elem_classes*/ ctx[1].join(' ') + " s-cTNr_KVcogUW")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*$selected_tab, id*/ 12) {
				set_style(div, "display", /*$selected_tab*/ ctx[3] === /*id*/ ctx[2]
				? "block"
				: "none");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(column);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $selected_tab_index;
	let $selected_tab;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TabItem', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { name } = $$props;
	let { id = {} } = $$props;
	const dispatch = createEventDispatcher();
	const { register_tab, unregister_tab, selected_tab, selected_tab_index } = getContext(TABS);
	validate_store(selected_tab, 'selected_tab');
	component_subscribe($$self, selected_tab, value => $$invalidate(3, $selected_tab = value));
	validate_store(selected_tab_index, 'selected_tab_index');
	component_subscribe($$self, selected_tab_index, value => $$invalidate(7, $selected_tab_index = value));
	let tab_index = register_tab({ name, id, elem_id });

	onMount(() => {
		return () => unregister_tab({ name, id, elem_id });
	});

	$$self.$$.on_mount.push(function () {
		if (name === undefined && !('name' in $$props || $$self.$$.bound[$$self.$$.props['name']])) {
			console.warn("<TabItem> was created without expected prop 'name'");
		}
	});

	const writable_props = ['elem_id', 'elem_classes', 'name', 'id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabItem> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('name' in $$props) $$invalidate(6, name = $$props.name);
		if ('id' in $$props) $$invalidate(2, id = $$props.id);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		getContext,
		onMount,
		createEventDispatcher,
		tick,
		TABS,
		Column: StaticColumn,
		elem_id,
		elem_classes,
		name,
		id,
		dispatch,
		register_tab,
		unregister_tab,
		selected_tab,
		selected_tab_index,
		tab_index,
		$selected_tab_index,
		$selected_tab
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('name' in $$props) $$invalidate(6, name = $$props.name);
		if ('id' in $$props) $$invalidate(2, id = $$props.id);
		if ('tab_index' in $$props) $$invalidate(13, tab_index = $$props.tab_index);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selected_tab_index, name*/ 192) {
			$selected_tab_index === tab_index && tick().then(() => dispatch("select", { value: name, index: tab_index }));
		}
	};

	return [
		elem_id,
		elem_classes,
		id,
		$selected_tab,
		selected_tab,
		selected_tab_index,
		name,
		$selected_tab_index,
		slots,
		$$scope
	];
}

class TabItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			name: 6,
			id: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TabItem",
			options,
			id: create_fragment$1.name
		});
	}

	get elem_id() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/tabitem/static/StaticTabItem.svelte generated by Svelte v4.0.0 */

// (9:0) <TabItem  {elem_id}  {elem_classes}  name={label}  {id}  on:select={({ detail }) => gradio.dispatch("select", detail)} >
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(9:0) <TabItem  {elem_id}  {elem_classes}  name={label}  {id}  on:select={({ detail }) => gradio.dispatch(\\\"select\\\", detail)} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let tabitem;
	let current;

	tabitem = new TabItem({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				name: /*label*/ ctx[2],
				id: /*id*/ ctx[3],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tabitem.$on("select", /*select_handler*/ ctx[6]);

	const block = {
		c: function create() {
			create_component(tabitem.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(tabitem, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const tabitem_changes = {};
			if (dirty & /*elem_id*/ 1) tabitem_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) tabitem_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*label*/ 4) tabitem_changes.name = /*label*/ ctx[2];
			if (dirty & /*id*/ 8) tabitem_changes.id = /*id*/ ctx[3];

			if (dirty & /*$$scope*/ 128) {
				tabitem_changes.$$scope = { dirty, ctx };
			}

			tabitem.$set(tabitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tabitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticTabItem', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { label } = $$props;
	let { id } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticTabItem> was created without expected prop 'label'");
		}

		if (id === undefined && !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])) {
			console.warn("<StaticTabItem> was created without expected prop 'id'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticTabItem> was created without expected prop 'gradio'");
		}
	});

	const writable_props = ['elem_id', 'elem_classes', 'label', 'id', 'gradio'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticTabItem> was created with unknown prop '${key}'`);
	});

	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
		if ('gradio' in $$props) $$invalidate(4, gradio = $$props.gradio);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		TabItem,
		elem_id,
		elem_classes,
		label,
		id,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
		if ('gradio' in $$props) $$invalidate(4, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [elem_id, elem_classes, label, id, gradio, slots, select_handler, $$scope];
}

class StaticTabItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			label: 2,
			id: 3,
			gradio: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticTabItem",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<StaticTabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticTabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticTabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticTabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticTabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticTabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<StaticTabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<StaticTabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticTabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticTabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticTabItem$1 = StaticTabItem;

export { StaticTabItem$1 as default };
//# sourceMappingURL=index-bf1d9235.js.map
