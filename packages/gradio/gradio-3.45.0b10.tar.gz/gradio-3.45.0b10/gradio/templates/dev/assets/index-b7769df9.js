import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, create_component, mount_component, transition_in, transition_out, destroy_component, ensure_array_like_dev, element, svg_element, space, text, empty, attr_dev, add_location, insert_dev, append_dev, set_data_dev, group_outros, check_outros, detach_dev, destroy_each, listen_dev, run_all, construct_svelte_component_dev, toggle_class, noop, set_style, null_to_empty } from '../../../node/dev/svelte-internal.js';
import { B as Block, g as get_fetchable_url_or_file } from './Button-71613b11.js';
import './index-b455ce1a.js';

const Dataset_svelte_svelte_type_style_lang = '';

/* src/components/Dataset/Dataset.svelte generated by Svelte v4.0.0 */
const file = "src/components/Dataset/Dataset.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	child_ctx[39] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i].value;
	child_ctx[41] = list[i].component;
	child_ctx[44] = i;
	const constants_0 = /*components*/ child_ctx[1][/*j*/ child_ctx[44]];
	child_ctx[42] = constants_0;
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	child_ctx[39] = i;
	return child_ctx;
}

// (120:1) {:else}
function create_else_block_1(ctx) {
	let div;
	let table;
	let thead;
	let tr;
	let t;
	let tbody;
	let current;
	let each_value_4 = ensure_array_like_dev(/*headers*/ ctx[4]);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_1[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_2 = ensure_array_like_dev(/*component_meta*/ ctx[16]);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(tr, "class", "tr-head s-fF0No22Lla6n");
			add_location(tr, file, 157, 5, 3389);
			add_location(thead, file, 156, 4, 3376);
			add_location(tbody, file, 165, 4, 3526);
			attr_dev(table, "class", "s-fF0No22Lla6n");
			add_location(table, file, 155, 3, 3364);
			attr_dev(div, "class", "table-wrap s-fF0No22Lla6n");
			add_location(div, file, 154, 2, 3336);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, table);
			append_dev(table, thead);
			append_dev(thead, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(tr, null);
				}
			}

			append_dev(table, t);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tbody, null);
				}
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*headers*/ 16) {
				each_value_4 = ensure_array_like_dev(/*headers*/ ctx[4]);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_4(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tr, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_4.length;
			}

			if (dirty[0] & /*value, page, samples_per_page, gradio, handle_mouseenter, handle_mouseleave, component_meta, components, samples_dir, current_hover, component_map*/ 3512583) {
				each_value_2 = ensure_array_like_dev(/*component_meta*/ ctx[16]);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(120:1) {:else}",
		ctx
	});

	return block;
}

// (94:1) {#if gallery}
function create_if_block_2(ctx) {
	let div;
	let current;
	let each_value_1 = ensure_array_like_dev(/*selected_samples*/ ctx[13]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "gallery s-fF0No22Lla6n");
			add_location(div, file, 128, 2, 2617);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*value, page, samples_per_page, gradio, selected_samples, handle_mouseenter, handle_mouseleave, component_meta, samples_dir, current_hover, component_map, components*/ 3520775) {
				each_value_1 = ensure_array_like_dev(/*selected_samples*/ ctx[13]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(94:1) {#if gallery}",
		ctx
	});

	return block;
}

// (125:6) {#each headers as header}
function create_each_block_4(ctx) {
	let th;
	let t0_value = /*header*/ ctx[45] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(th, "class", "s-fF0No22Lla6n");
			add_location(th, file, 159, 7, 3449);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, t0);
			append_dev(th, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*headers*/ 16 && t0_value !== (t0_value = /*header*/ ctx[45] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(th);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(125:6) {#each headers as header}",
		ctx
	});

	return block;
}

// (145:8) {#if component_name !== undefined && component_map.get(component_name) !== undefined}
function create_if_block_4(ctx) {
	let td;
	let switch_instance;
	let td_class_value;
	let current;
	var switch_value = /*component*/ ctx[41];

	function switch_props(ctx) {
		return {
			props: {
				value: /*value*/ ctx[0],
				samples_dir: /*samples_dir*/ ctx[18],
				type: "table",
				selected: /*current_hover*/ ctx[15] === /*i*/ ctx[39],
				index: /*i*/ ctx[39]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
	}

	const block = {
		c: function create() {
			td = element("td");
			if (switch_instance) create_component(switch_instance.$$.fragment);

			set_style(td, "max-width", /*component_name*/ ctx[42] === 'textbox'
			? '35ch'
			: 'auto');

			attr_dev(td, "class", td_class_value = "" + (null_to_empty(/*component_name*/ ctx[42]) + " s-fF0No22Lla6n"));
			add_location(td, file, 179, 9, 4044);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			if (switch_instance) mount_component(switch_instance, td, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*component_meta*/ 65536) switch_instance_changes.value = /*value*/ ctx[0];
			if (dirty[0] & /*current_hover*/ 32768) switch_instance_changes.selected = /*current_hover*/ ctx[15] === /*i*/ ctx[39];

			if (dirty[0] & /*component_meta*/ 65536 && switch_value !== (switch_value = /*component*/ ctx[41])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, td, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			if (!current || dirty[0] & /*components*/ 2) {
				set_style(td, "max-width", /*component_name*/ ctx[42] === 'textbox'
				? '35ch'
				: 'auto');
			}

			if (!current || dirty[0] & /*components*/ 2 && td_class_value !== (td_class_value = "" + (null_to_empty(/*component_name*/ ctx[42]) + " s-fF0No22Lla6n"))) {
				attr_dev(td, "class", td_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(td);
			}

			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(145:8) {#if component_name !== undefined && component_map.get(component_name) !== undefined}",
		ctx
	});

	return block;
}

// (143:7) {#each sample_row as { value, component }
function create_each_block_3(ctx) {
	let show_if = /*component_name*/ ctx[42] !== undefined && /*component_map*/ ctx[2].get(/*component_name*/ ctx[42]) !== undefined;
	let if_block_anchor;
	let current;
	let if_block = show_if && create_if_block_4(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*components, component_map*/ 6) show_if = /*component_name*/ ctx[42] !== undefined && /*component_map*/ ctx[2].get(/*component_name*/ ctx[42]) !== undefined;

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*components, component_map*/ 6) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(143:7) {#each sample_row as { value, component }",
		ctx
	});

	return block;
}

// (133:5) {#each component_meta as sample_row, i}
function create_each_block_2(ctx) {
	let tr;
	let t;
	let current;
	let mounted;
	let dispose;
	let each_value_3 = ensure_array_like_dev(/*sample_row*/ ctx[37]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function click_handler_1() {
		return /*click_handler_1*/ ctx[29](/*i*/ ctx[39]);
	}

	function mouseenter_handler_1() {
		return /*mouseenter_handler_1*/ ctx[30](/*i*/ ctx[39]);
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr_dev(tr, "class", "tr-body s-fF0No22Lla6n");
			add_location(tr, file, 167, 6, 3585);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr, null);
				}
			}

			append_dev(tr, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(tr, "click", click_handler_1, false, false, false, false),
					listen_dev(tr, "mouseenter", mouseenter_handler_1, false, false, false, false),
					listen_dev(tr, "mouseleave", /*mouseleave_handler_1*/ ctx[31], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*components, component_meta, samples_dir, current_hover, component_map*/ 360454) {
				each_value_3 = ensure_array_like_dev(/*sample_row*/ ctx[37]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tr, t);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(tr);
			}

			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(133:5) {#each component_meta as sample_row, i}",
		ctx
	});

	return block;
}

// (107:5) {#if component_meta.length && component_map.get(components[0])}
function create_if_block_3(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*component_meta*/ ctx[16][0][0].component;

	function switch_props(ctx) {
		return {
			props: {
				value: /*sample_row*/ ctx[37][0],
				samples_dir: /*samples_dir*/ ctx[18],
				type: "gallery",
				selected: /*current_hover*/ ctx[15] === /*i*/ ctx[39],
				index: /*i*/ ctx[39]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*selected_samples*/ 8192) switch_instance_changes.value = /*sample_row*/ ctx[37][0];
			if (dirty[0] & /*current_hover*/ 32768) switch_instance_changes.selected = /*current_hover*/ ctx[15] === /*i*/ ctx[39];

			if (dirty[0] & /*component_meta*/ 65536 && switch_value !== (switch_value = /*component_meta*/ ctx[16][0][0].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(107:5) {#if component_meta.length && component_map.get(components[0])}",
		ctx
	});

	return block;
}

// (96:3) {#each selected_samples as sample_row, i}
function create_each_block_1(ctx) {
	let button;
	let show_if = /*component_meta*/ ctx[16].length && /*component_map*/ ctx[2].get(/*components*/ ctx[1][0]);
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = show_if && create_if_block_3(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[26](/*i*/ ctx[39], /*sample_row*/ ctx[37]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[27](/*i*/ ctx[39]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			attr_dev(button, "class", "gallery-item s-fF0No22Lla6n");
			add_location(button, file, 130, 4, 2688);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append_dev(button, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", click_handler, false, false, false, false),
					listen_dev(button, "mouseenter", mouseenter_handler, false, false, false, false),
					listen_dev(button, "mouseleave", /*mouseleave_handler*/ ctx[28], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*component_meta, component_map, components*/ 65542) show_if = /*component_meta*/ ctx[16].length && /*component_map*/ ctx[2].get(/*components*/ ctx[1][0]);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*component_meta, component_map, components*/ 65542) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(96:3) {#each selected_samples as sample_row, i}",
		ctx
	});

	return block;
}

// (169:1) {#if paginate}
function create_if_block(ctx) {
	let div;
	let t;
	let each_value = ensure_array_like_dev(/*visible_pages*/ ctx[14]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			t = text("Pages:\n\t\t\t");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "paginate s-fF0No22Lla6n");
			add_location(div, file, 203, 2, 4520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*visible_pages, page*/ 20480) {
				each_value = ensure_array_like_dev(/*visible_pages*/ ctx[14]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(169:1) {#if paginate}",
		ctx
	});

	return block;
}

// (175:4) {:else}
function create_else_block(ctx) {
	let button;
	let t0_value = /*visible_page*/ ctx[34] + 1 + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[32](/*visible_page*/ ctx[34]);
	}

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(button, "class", "s-fF0No22Lla6n");
			toggle_class(button, "current-page", /*page*/ ctx[12] === /*visible_page*/ ctx[34]);
			add_location(button, file, 209, 5, 4661);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_2, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*visible_pages*/ 16384 && t0_value !== (t0_value = /*visible_page*/ ctx[34] + 1 + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*page, visible_pages*/ 20480) {
				toggle_class(button, "current-page", /*page*/ ctx[12] === /*visible_page*/ ctx[34]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(175:4) {:else}",
		ctx
	});

	return block;
}

// (173:4) {#if visible_page === -1}
function create_if_block_1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			div.textContent = "...";
			add_location(div, file, 207, 5, 4629);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(173:4) {#if visible_page === -1}",
		ctx
	});

	return block;
}

// (172:3) {#each visible_pages as visible_page}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*visible_page*/ ctx[34] === -1) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(172:3) {#each visible_pages as visible_page}",
		ctx
	});

	return block;
}

// (66:0) <Block  {visible}  padding={false}  {elem_id}  {elem_classes}  {scale}  {min_width}  allow_overflow={false}  container={false} >
function create_default_slot(ctx) {
	let div;
	let svg;
	let path;
	let t0;
	let t1;
	let t2;
	let current_block_type_index;
	let if_block0;
	let t3;
	let if_block1_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*gallery*/ ctx[17]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*paginate*/ ctx[19] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			t1 = text(/*label*/ ctx[3]);
			t2 = space();
			if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "M10 6h18v2H10zm0 18h18v2H10zm0-9h18v2H10zm-6 0h2v2H4zm0-9h2v2H4zm0 18h2v2H4z");
			add_location(path, file, 120, 3, 2452);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "width", "1em");
			attr_dev(svg, "height", "1em");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			attr_dev(svg, "class", "s-fF0No22Lla6n");
			add_location(svg, file, 110, 2, 2227);
			attr_dev(div, "class", "label s-fF0No22Lla6n");
			add_location(div, file, 109, 1, 2205);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, path);
			append_dev(div, t0);
			append_dev(div, t1);
			insert_dev(target, t2, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*label*/ 8) set_data_dev(t1, /*label*/ ctx[3]);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(t3.parentNode, t3);
			}

			if (/*paginate*/ ctx[19]) if_block1.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(if_block1_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(66:0) <Block  {visible}  padding={false}  {elem_id}  {elem_classes}  {scale}  {min_width}  allow_overflow={false}  container={false} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[7],
				padding: false,
				elem_id: /*elem_id*/ ctx[5],
				elem_classes: /*elem_classes*/ ctx[6],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				allow_overflow: false,
				container: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 128) block_changes.visible = /*visible*/ ctx[7];
			if (dirty[0] & /*elem_id*/ 32) block_changes.elem_id = /*elem_id*/ ctx[5];
			if (dirty[0] & /*elem_classes*/ 64) block_changes.elem_classes = /*elem_classes*/ ctx[6];
			if (dirty[0] & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty[0] & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty[0] & /*visible_pages, page, selected_samples, value, samples_per_page, gradio, component_meta, current_hover, component_map, components, gallery, headers, label*/ 260383 | dirty[1] & /*$$scope*/ 131072) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let gallery;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Dataset', slots, []);
	let { components } = $$props;
	let { component_map } = $$props;
	let { label = "Examples" } = $$props;
	let { headers } = $$props;
	let { samples } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let { root } = $$props;
	let { root_url } = $$props;
	let { samples_per_page = 10 } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let samples_dir = get_fetchable_url_or_file(null, root, root_url);
	let page = 0;
	let paginate = samples.length > samples_per_page;
	let selected_samples;
	let page_count;
	let visible_pages = [];
	let current_hover = -1;

	function handle_mouseenter(i) {
		$$invalidate(15, current_hover = i);
	}

	function handle_mouseleave() {
		$$invalidate(15, current_hover = -1);
	}

	let component_meta = [];

	async function get_component_meta(selected_samples) {
		$$invalidate(16, component_meta = await Promise.all(selected_samples.map(async sample_row => await Promise.all(sample_row.map(async (sample_cell, j) => {
			return {
				value: sample_cell,
				component: (await component_map.get(components[j]))?.component?.default
			};
		})))));
	}

	$$self.$$.on_mount.push(function () {
		if (components === undefined && !('components' in $$props || $$self.$$.bound[$$self.$$.props['components']])) {
			console.warn("<Dataset> was created without expected prop 'components'");
		}

		if (component_map === undefined && !('component_map' in $$props || $$self.$$.bound[$$self.$$.props['component_map']])) {
			console.warn("<Dataset> was created without expected prop 'component_map'");
		}

		if (headers === undefined && !('headers' in $$props || $$self.$$.bound[$$self.$$.props['headers']])) {
			console.warn("<Dataset> was created without expected prop 'headers'");
		}

		if (samples === undefined && !('samples' in $$props || $$self.$$.bound[$$self.$$.props['samples']])) {
			console.warn("<Dataset> was created without expected prop 'samples'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Dataset> was created without expected prop 'root'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<Dataset> was created without expected prop 'root_url'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<Dataset> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'components',
		'component_map',
		'label',
		'headers',
		'samples',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'root',
		'root_url',
		'samples_per_page',
		'scale',
		'min_width',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dataset> was created with unknown prop '${key}'`);
	});

	const click_handler = (i, sample_row) => {
		$$invalidate(0, value = i + page * samples_per_page);
		gradio.dispatch("click", value);
		gradio.dispatch("select", { index: value, value: sample_row });
	};

	const mouseenter_handler = i => handle_mouseenter(i);
	const mouseleave_handler = () => handle_mouseleave();

	const click_handler_1 = i => {
		$$invalidate(0, value = i + page * samples_per_page);
		gradio.dispatch("click", value);
	};

	const mouseenter_handler_1 = i => handle_mouseenter(i);
	const mouseleave_handler_1 = () => handle_mouseleave();
	const click_handler_2 = visible_page => $$invalidate(12, page = visible_page);

	$$self.$$set = $$props => {
		if ('components' in $$props) $$invalidate(1, components = $$props.components);
		if ('component_map' in $$props) $$invalidate(2, component_map = $$props.component_map);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('headers' in $$props) $$invalidate(4, headers = $$props.headers);
		if ('samples' in $$props) $$invalidate(22, samples = $$props.samples);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('root' in $$props) $$invalidate(23, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(24, root_url = $$props.root_url);
		if ('samples_per_page' in $$props) $$invalidate(8, samples_per_page = $$props.samples_per_page);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		Block,
		get_fetchable_url_or_file,
		components,
		component_map,
		label,
		headers,
		samples,
		elem_id,
		elem_classes,
		visible,
		value,
		root,
		root_url,
		samples_per_page,
		scale,
		min_width,
		gradio,
		samples_dir,
		page,
		paginate,
		selected_samples,
		page_count,
		visible_pages,
		current_hover,
		handle_mouseenter,
		handle_mouseleave,
		component_meta,
		get_component_meta,
		gallery
	});

	$$self.$inject_state = $$props => {
		if ('components' in $$props) $$invalidate(1, components = $$props.components);
		if ('component_map' in $$props) $$invalidate(2, component_map = $$props.component_map);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('headers' in $$props) $$invalidate(4, headers = $$props.headers);
		if ('samples' in $$props) $$invalidate(22, samples = $$props.samples);
		if ('elem_id' in $$props) $$invalidate(5, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(6, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(7, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('root' in $$props) $$invalidate(23, root = $$props.root);
		if ('root_url' in $$props) $$invalidate(24, root_url = $$props.root_url);
		if ('samples_per_page' in $$props) $$invalidate(8, samples_per_page = $$props.samples_per_page);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
		if ('samples_dir' in $$props) $$invalidate(18, samples_dir = $$props.samples_dir);
		if ('page' in $$props) $$invalidate(12, page = $$props.page);
		if ('paginate' in $$props) $$invalidate(19, paginate = $$props.paginate);
		if ('selected_samples' in $$props) $$invalidate(13, selected_samples = $$props.selected_samples);
		if ('page_count' in $$props) $$invalidate(25, page_count = $$props.page_count);
		if ('visible_pages' in $$props) $$invalidate(14, visible_pages = $$props.visible_pages);
		if ('current_hover' in $$props) $$invalidate(15, current_hover = $$props.current_hover);
		if ('component_meta' in $$props) $$invalidate(16, component_meta = $$props.component_meta);
		if ('gallery' in $$props) $$invalidate(17, gallery = $$props.gallery);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*components*/ 2) {
			$$invalidate(17, gallery = components.length < 2);
		}

		if ($$self.$$.dirty[0] & /*samples, page, samples_per_page, page_count, visible_pages*/ 37769472) {
			{
				if (paginate) {
					$$invalidate(14, visible_pages = []);
					$$invalidate(13, selected_samples = samples.slice(page * samples_per_page, (page + 1) * samples_per_page));
					$$invalidate(25, page_count = Math.ceil(samples.length / samples_per_page));

					[0, page, page_count - 1].forEach(anchor => {
						for (let i = anchor - 2; i <= anchor + 2; i++) {
							if (i >= 0 && i < page_count && !visible_pages.includes(i)) {
								if (visible_pages.length > 0 && i - visible_pages[visible_pages.length - 1] > 1) {
									visible_pages.push(-1);
								}

								visible_pages.push(i);
							}
						}
					});
				} else {
					$$invalidate(13, selected_samples = samples.slice());
				}
			}
		}

		if ($$self.$$.dirty[0] & /*selected_samples*/ 8192) {
			get_component_meta(selected_samples);
		}
	};

	return [
		value,
		components,
		component_map,
		label,
		headers,
		elem_id,
		elem_classes,
		visible,
		samples_per_page,
		scale,
		min_width,
		gradio,
		page,
		selected_samples,
		visible_pages,
		current_hover,
		component_meta,
		gallery,
		samples_dir,
		paginate,
		handle_mouseenter,
		handle_mouseleave,
		samples,
		root,
		root_url,
		page_count,
		click_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2
	];
}

class Dataset extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				components: 1,
				component_map: 2,
				label: 3,
				headers: 4,
				samples: 22,
				elem_id: 5,
				elem_classes: 6,
				visible: 7,
				value: 0,
				root: 23,
				root_url: 24,
				samples_per_page: 8,
				scale: 9,
				min_width: 10,
				gradio: 11
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dataset",
			options,
			id: create_fragment.name
		});
	}

	get components() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set components(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get component_map() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component_map(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get headers() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set headers(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get samples() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set samples(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root_url() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root_url(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get samples_per_page() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set samples_per_page(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scale() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min_width() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min_width(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<Dataset>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<Dataset>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Dataset$1 = Dataset;

export { Dataset$1 as default };
//# sourceMappingURL=index-b7769df9.js.map
