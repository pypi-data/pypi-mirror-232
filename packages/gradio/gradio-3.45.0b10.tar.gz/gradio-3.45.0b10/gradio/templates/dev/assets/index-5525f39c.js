import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, flush, validate_slots, assign, binding_callbacks, bind, create_component, mount_component, transition_in, transition_out, destroy_component, space, insert_dev, get_spread_update, get_spread_object, add_flush_callback, detach_dev } from '../../../node/dev/svelte-internal.js';
import { C as Colorpicker } from './Colorpicker-0513af7f.js';
import { B as Block } from './Button-71613b11.js';
import { S as Static } from './index-b455ce1a.js';
import './BlockTitle-153169b9.js';

const exp = new Proxy({}, {
  get(_, key) {
    throw new Error(`Module "constants" has been externalized for browser compatibility. Cannot access "constants.${key}" in client code.  See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)
  }
});

/* home/runner/work/gradio/gradio/js/colorpicker/static/StaticColorpicker.svelte generated by Svelte v4.0.0 */

// (23:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let colorpicker;
	let updating_value;
	let updating_value_is_output;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[13].autoscroll
		},
		{ i18n: /*gradio*/ ctx[13].i18n },
		/*loading_status*/ ctx[11]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	function colorpicker_value_binding(value) {
		/*colorpicker_value_binding*/ ctx[14](value);
	}

	function colorpicker_value_is_output_binding(value) {
		/*colorpicker_value_is_output_binding*/ ctx[15](value);
	}

	let colorpicker_props = {
		label: /*label*/ ctx[2],
		info: /*info*/ ctx[3],
		show_label: /*show_label*/ ctx[7],
		disabled: !/*interactive*/ ctx[12]
	};

	if (/*value*/ ctx[0] !== void 0) {
		colorpicker_props.value = /*value*/ ctx[0];
	}

	if (/*value_is_output*/ ctx[1] !== void 0) {
		colorpicker_props.value_is_output = /*value_is_output*/ ctx[1];
	}

	colorpicker = new Colorpicker({ props: colorpicker_props, $$inline: true });
	binding_callbacks.push(() => bind(colorpicker, 'value', colorpicker_value_binding));
	binding_callbacks.push(() => bind(colorpicker, 'value_is_output', colorpicker_value_is_output_binding));
	colorpicker.$on("change", /*change_handler*/ ctx[16]);
	colorpicker.$on("input", /*input_handler*/ ctx[17]);
	colorpicker.$on("submit", /*submit_handler*/ ctx[18]);
	colorpicker.$on("blur", /*blur_handler*/ ctx[19]);
	colorpicker.$on("focus", /*focus_handler*/ ctx[20]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(colorpicker.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(colorpicker, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 10240)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 8192 && {
						autoscroll: /*gradio*/ ctx[13].autoscroll
					},
					dirty & /*gradio*/ 8192 && { i18n: /*gradio*/ ctx[13].i18n },
					dirty & /*loading_status*/ 2048 && get_spread_object(/*loading_status*/ ctx[11])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const colorpicker_changes = {};
			if (dirty & /*label*/ 4) colorpicker_changes.label = /*label*/ ctx[2];
			if (dirty & /*info*/ 8) colorpicker_changes.info = /*info*/ ctx[3];
			if (dirty & /*show_label*/ 128) colorpicker_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*interactive*/ 4096) colorpicker_changes.disabled = !/*interactive*/ ctx[12];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				colorpicker_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_value_is_output && dirty & /*value_is_output*/ 2) {
				updating_value_is_output = true;
				colorpicker_changes.value_is_output = /*value_is_output*/ ctx[1];
				add_flush_callback(() => updating_value_is_output = false);
			}

			colorpicker.$set(colorpicker_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(colorpicker.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(colorpicker.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(colorpicker, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(23:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[6],
				elem_id: /*elem_id*/ ctx[4],
				elem_classes: /*elem_classes*/ ctx[5],
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 64) block_changes.visible = /*visible*/ ctx[6];
			if (dirty & /*elem_id*/ 16) block_changes.elem_id = /*elem_id*/ ctx[4];
			if (dirty & /*elem_classes*/ 32) block_changes.elem_classes = /*elem_classes*/ ctx[5];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, label, info, show_label, interactive, value, value_is_output, gradio, loading_status*/ 2111631) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticColorpicker', slots, []);
	let { label = "ColorPicker" } = $$props;
	let { info = undefined } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let { value_is_output = false } = $$props;
	let { show_label } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { interactive = true } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<StaticColorpicker> was created without expected prop 'value'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<StaticColorpicker> was created without expected prop 'show_label'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticColorpicker> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticColorpicker> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'label',
		'info',
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'value_is_output',
		'show_label',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'interactive',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticColorpicker> was created with unknown prop '${key}'`);
	});

	function colorpicker_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function colorpicker_value_is_output_binding(value) {
		value_is_output = value;
		$$invalidate(1, value_is_output);
	}

	const change_handler = () => gradio.dispatch("change");
	const input_handler = () => gradio.dispatch("input");
	const submit_handler = () => gradio.dispatch("submit");
	const blur_handler = () => gradio.dispatch("blur");
	const focus_handler = () => gradio.dispatch("focus");

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('info' in $$props) $$invalidate(3, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(11, loading_status = $$props.loading_status);
		if ('interactive' in $$props) $$invalidate(12, interactive = $$props.interactive);
		if ('gradio' in $$props) $$invalidate(13, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		Colorpicker,
		Block,
		StatusTracker: Static,
		exp,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		value,
		value_is_output,
		show_label,
		container,
		scale,
		min_width,
		loading_status,
		interactive,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('info' in $$props) $$invalidate(3, info = $$props.info);
		if ('elem_id' in $$props) $$invalidate(4, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(5, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(6, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(1, value_is_output = $$props.value_is_output);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(11, loading_status = $$props.loading_status);
		if ('interactive' in $$props) $$invalidate(12, interactive = $$props.interactive);
		if ('gradio' in $$props) $$invalidate(13, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		value_is_output,
		label,
		info,
		elem_id,
		elem_classes,
		visible,
		show_label,
		container,
		scale,
		min_width,
		loading_status,
		interactive,
		gradio,
		colorpicker_value_binding,
		colorpicker_value_is_output_binding,
		change_handler,
		input_handler,
		submit_handler,
		blur_handler,
		focus_handler
	];
}

class StaticColorpicker extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 2,
			info: 3,
			elem_id: 4,
			elem_classes: 5,
			visible: 6,
			value: 0,
			value_is_output: 1,
			show_label: 7,
			container: 8,
			scale: 9,
			min_width: 10,
			loading_status: 11,
			interactive: 12,
			gradio: 13
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticColorpicker",
			options,
			id: create_fragment.name
		});
	}

	get label() {
		return this.$$.ctx[2];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get info() {
		return this.$$.ctx[3];
	}

	set info(info) {
		this.$$set({ info });
		flush();
	}

	get elem_id() {
		return this.$$.ctx[4];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[5];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[6];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get value_is_output() {
		return this.$$.ctx[1];
	}

	set value_is_output(value_is_output) {
		this.$$set({ value_is_output });
		flush();
	}

	get show_label() {
		return this.$$.ctx[7];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get container() {
		return this.$$.ctx[8];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[9];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[10];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[11];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get interactive() {
		return this.$$.ctx[12];
	}

	set interactive(interactive) {
		this.$$set({ interactive });
		flush();
	}

	get gradio() {
		return this.$$.ctx[13];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}
}

const StaticColorpicker$1 = StaticColorpicker;

export { StaticColorpicker$1 as default };
//# sourceMappingURL=index-5525f39c.js.map
