import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, createEventDispatcher, tick, create_component, space, empty, mount_component, insert_dev, transition_in, group_outros, transition_out, check_outros, detach_dev, destroy_component, bubble, element, attr_dev, add_location, append_dev, src_url_equal, action_destroyer, listen_dev, is_function, noop, run_all, flush, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { u as uploadToHuggingFace, B as Block, n as normalise_file } from './Button-71613b11.js';
import { B as BlockLabel } from './BlockLabel-046dac9c.js';
import { I as IconButton } from './IconButton-88b1ebfb.js';
import { E as Empty } from './Empty-f0c1763b.js';
import { S as ShareButton } from './ShareButton-581e5353.js';
import { D as Download } from './Download-b7009333.js';
import { S as Static } from './index-b455ce1a.js';
import { M as Music, l as loaded } from './utils-38e3d184.js';

const AudioPlayer_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/audio/static/AudioPlayer.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/audio/static/AudioPlayer.svelte";

// (35:0) {#if value !== null}
function create_if_block_1(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*show_download_button*/ ctx[4] && create_if_block_3(ctx);
	let if_block1 = /*show_share_button*/ ctx[5] && create_if_block_2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr_dev(div, "class", "icon-buttons s-QRvXe7BQ3u7a");
			add_location(div, file, 56, 1, 909);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*show_download_button*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*show_download_button*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*show_share_button*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*show_share_button*/ 32) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(35:0) {#if value !== null}",
		ctx
	});

	return block;
}

// (37:2) {#if show_download_button}
function create_if_block_3(ctx) {
	let a;
	let iconbutton;
	let a_href_value;
	let a_download_value;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Download,
				label: /*i18n*/ ctx[6]("common.download")
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			create_component(iconbutton.$$.fragment);
			attr_dev(a, "href", a_href_value = /*value*/ ctx[0].data);
			attr_dev(a, "target", window.__is_colab__ ? "_blank" : null);
			attr_dev(a, "download", a_download_value = /*value*/ ctx[0].name);
			add_location(a, file, 58, 3, 968);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(iconbutton, a, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 64) iconbutton_changes.label = /*i18n*/ ctx[6]("common.download");
			iconbutton.$set(iconbutton_changes);

			if (!current || dirty & /*value*/ 1 && a_href_value !== (a_href_value = /*value*/ ctx[0].data)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*value*/ 1 && a_download_value !== (a_download_value = /*value*/ ctx[0].name)) {
				attr_dev(a, "download", a_download_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}

			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(37:2) {#if show_download_button}",
		ctx
	});

	return block;
}

// (46:2) {#if show_share_button}
function create_if_block_2(ctx) {
	let sharebutton;
	let current;

	sharebutton = new ShareButton({
			props: {
				i18n: /*i18n*/ ctx[6],
				formatter: /*func*/ ctx[11],
				value: /*value*/ ctx[0]
			},
			$$inline: true
		});

	sharebutton.$on("error", /*error_handler*/ ctx[12]);
	sharebutton.$on("share", /*share_handler*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(sharebutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sharebutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sharebutton_changes = {};
			if (dirty & /*i18n*/ 64) sharebutton_changes.i18n = /*i18n*/ ctx[6];
			if (dirty & /*value*/ 1) sharebutton_changes.value = /*value*/ ctx[0];
			sharebutton.$set(sharebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sharebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sharebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sharebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(46:2) {#if show_share_button}",
		ctx
	});

	return block;
}

// (66:0) {:else}
function create_else_block(ctx) {
	let audio;
	let audio_src_value;
	let audio_data_testid_value;
	let loaded_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			audio = element("audio");
			audio.controls = true;
			attr_dev(audio, "preload", "metadata");
			if (!src_url_equal(audio.src, audio_src_value = /*value*/ ctx[0]?.data)) attr_dev(audio, "src", audio_src_value);
			attr_dev(audio, "data-testid", audio_data_testid_value = `${/*label*/ ctx[1]}-audio`);
			attr_dev(audio, "class", "s-QRvXe7BQ3u7a");
			add_location(audio, file, 87, 1, 1535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, audio, anchor);

			if (!mounted) {
				dispose = [
					action_destroyer(loaded_action = loaded.call(null, audio, { autoplay: /*autoplay*/ ctx[3] })),
					listen_dev(audio, "play", /*play_handler*/ ctx[9], false, false, false, false),
					listen_dev(audio, "pause", /*pause_handler*/ ctx[10], false, false, false, false),
					listen_dev(audio, "ended", /*handle_ended*/ ctx[7], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && !src_url_equal(audio.src, audio_src_value = /*value*/ ctx[0]?.data)) {
				attr_dev(audio, "src", audio_src_value);
			}

			if (dirty & /*label*/ 2 && audio_data_testid_value !== (audio_data_testid_value = `${/*label*/ ctx[1]}-audio`)) {
				attr_dev(audio, "data-testid", audio_data_testid_value);
			}

			if (loaded_action && is_function(loaded_action.update) && dirty & /*autoplay*/ 8) loaded_action.update.call(null, { autoplay: /*autoplay*/ ctx[3] });
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(audio);
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(66:0) {:else}",
		ctx
	});

	return block;
}

// (62:0) {#if value === null}
function create_if_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				size: "small",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(62:0) {#if value === null}",
		ctx
	});

	return block;
}

// (63:1) <Empty size="small">
function create_default_slot$1(ctx) {
	let music;
	let current;
	music = new Music({ $$inline: true });

	const block = {
		c: function create() {
			create_component(music.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(music, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(music.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(music.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(music, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(63:1) <Empty size=\\\"small\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[2],
				Icon: Music,
				float: false,
				label: /*label*/ ctx[1] || /*i18n*/ ctx[6]("audio.audio")
			},
			$$inline: true
		});

	let if_block0 = /*value*/ ctx[0] !== null && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 4) blocklabel_changes.show_label = /*show_label*/ ctx[2];
			if (dirty & /*label, i18n*/ 66) blocklabel_changes.label = /*label*/ ctx[1] || /*i18n*/ ctx[6]("audio.audio");
			blocklabel.$set(blocklabel_changes);

			if (/*value*/ ctx[0] !== null) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*value*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(if_block1_anchor);
			}

			destroy_component(blocklabel, detaching);
			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AudioPlayer', slots, []);
	let { value = null } = $$props;
	let { label } = $$props;
	let { name } = $$props;
	let { show_label = true } = $$props;
	let { autoplay } = $$props;
	let { show_download_button = true } = $$props;
	let { show_share_button = false } = $$props;
	const dispatch = createEventDispatcher();

	function handle_ended() {
		dispatch("stop");
		dispatch("end");
	}

	let { i18n } = $$props;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<AudioPlayer> was created without expected prop 'label'");
		}

		if (name === undefined && !('name' in $$props || $$self.$$.bound[$$self.$$.props['name']])) {
			console.warn("<AudioPlayer> was created without expected prop 'name'");
		}

		if (autoplay === undefined && !('autoplay' in $$props || $$self.$$.bound[$$self.$$.props['autoplay']])) {
			console.warn("<AudioPlayer> was created without expected prop 'autoplay'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<AudioPlayer> was created without expected prop 'i18n'");
		}
	});

	const writable_props = [
		'value',
		'label',
		'name',
		'show_label',
		'autoplay',
		'show_download_button',
		'show_share_button',
		'i18n'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AudioPlayer> was created with unknown prop '${key}'`);
	});

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	const func = async value => {
		if (!value) return "";
		let url = await uploadToHuggingFace(value.data, "url");
		return `<audio controls src="${url}"></audio>`;
	};

	function error_handler(event) {
		bubble.call(this, $$self, event);
	}

	function share_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('name' in $$props) $$invalidate(8, name = $$props.name);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('autoplay' in $$props) $$invalidate(3, autoplay = $$props.autoplay);
		if ('show_download_button' in $$props) $$invalidate(4, show_download_button = $$props.show_download_button);
		if ('show_share_button' in $$props) $$invalidate(5, show_share_button = $$props.show_share_button);
		if ('i18n' in $$props) $$invalidate(6, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		Empty,
		createEventDispatcher,
		tick,
		uploadToHuggingFace,
		BlockLabel,
		ShareButton,
		IconButton,
		Music,
		Download,
		loaded,
		value,
		label,
		name,
		show_label,
		autoplay,
		show_download_button,
		show_share_button,
		dispatch,
		handle_ended,
		i18n
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('name' in $$props) $$invalidate(8, name = $$props.name);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('autoplay' in $$props) $$invalidate(3, autoplay = $$props.autoplay);
		if ('show_download_button' in $$props) $$invalidate(4, show_download_button = $$props.show_download_button);
		if ('show_share_button' in $$props) $$invalidate(5, show_share_button = $$props.show_share_button);
		if ('i18n' in $$props) $$invalidate(6, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, name*/ 257) {
			value && dispatch("change", { name, data: value?.data });
		}
	};

	return [
		value,
		label,
		show_label,
		autoplay,
		show_download_button,
		show_share_button,
		i18n,
		handle_ended,
		name,
		play_handler,
		pause_handler,
		func,
		error_handler,
		share_handler
	];
}

class AudioPlayer extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			label: 1,
			name: 8,
			show_label: 2,
			autoplay: 3,
			show_download_button: 4,
			show_share_button: 5,
			i18n: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AudioPlayer",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoplay() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoplay(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_download_button() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_download_button(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_share_button() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_share_button(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<AudioPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<AudioPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/audio/static/StaticAudio.svelte generated by Svelte v4.0.0 */

// (37:0) <Block  variant={mode === "interactive" && value === null && source === "upload"   ? "dashed"   : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {visible}  {container}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let staticaudio;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[15].autoscroll
		},
		{ i18n: /*gradio*/ ctx[15].i18n },
		/*loading_status*/ ctx[11]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	staticaudio = new AudioPlayer({
			props: {
				i18n: /*gradio*/ ctx[15].i18n,
				autoplay: /*autoplay*/ ctx[12],
				show_label: /*show_label*/ ctx[7],
				show_download_button: /*show_download_button*/ ctx[13],
				show_share_button: /*show_share_button*/ ctx[14],
				value: /*_value*/ ctx[16],
				name: /*_value*/ ctx[16]?.name || "audio_file",
				label: /*label*/ ctx[6]
			},
			$$inline: true
		});

	staticaudio.$on("share", /*share_handler*/ ctx[21]);
	staticaudio.$on("error", /*error_handler*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(staticaudio.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(staticaudio, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 34816)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 32768 && {
						autoscroll: /*gradio*/ ctx[15].autoscroll
					},
					dirty & /*gradio*/ 32768 && { i18n: /*gradio*/ ctx[15].i18n },
					dirty & /*loading_status*/ 2048 && get_spread_object(/*loading_status*/ ctx[11])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const staticaudio_changes = {};
			if (dirty & /*gradio*/ 32768) staticaudio_changes.i18n = /*gradio*/ ctx[15].i18n;
			if (dirty & /*autoplay*/ 4096) staticaudio_changes.autoplay = /*autoplay*/ ctx[12];
			if (dirty & /*show_label*/ 128) staticaudio_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*show_download_button*/ 8192) staticaudio_changes.show_download_button = /*show_download_button*/ ctx[13];
			if (dirty & /*show_share_button*/ 16384) staticaudio_changes.show_share_button = /*show_share_button*/ ctx[14];
			if (dirty & /*_value*/ 65536) staticaudio_changes.value = /*_value*/ ctx[16];
			if (dirty & /*_value*/ 65536) staticaudio_changes.name = /*_value*/ ctx[16]?.name || "audio_file";
			if (dirty & /*label*/ 64) staticaudio_changes.label = /*label*/ ctx[6];
			staticaudio.$set(staticaudio_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(staticaudio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(staticaudio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(staticaudio, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(37:0) <Block  variant={mode === \\\"interactive\\\" && value === null && source === \\\"upload\\\"   ? \\\"dashed\\\"   : \\\"solid\\\"}  border_mode={dragging ? \\\"focus\\\" : \\\"base\\\"}  padding={false}  {elem_id}  {elem_classes}  {visible}  {container}  {scale}  {min_width} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: /*mode*/ ctx[3] === "interactive" && /*value*/ ctx[4] === null && /*source*/ ctx[5] === "upload"
				? "dashed"
				: "solid",
				border_mode: /*dragging*/ ctx[17] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				visible: /*visible*/ ctx[2],
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*mode, value, source*/ 56) block_changes.variant = /*mode*/ ctx[3] === "interactive" && /*value*/ ctx[4] === null && /*source*/ ctx[5] === "upload"
			? "dashed"
			: "solid";

			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, gradio, autoplay, show_label, show_download_button, show_share_button, _value, label, loading_status*/ 8517824) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticAudio', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { mode } = $$props;
	let { value = null } = $$props;
	let { source } = $$props;
	let { label } = $$props;
	let { root } = $$props;
	let { show_label } = $$props;
	let { root_url } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { autoplay = false } = $$props;
	let { show_download_button = true } = $$props;
	let { show_share_button = false } = $$props;
	let { gradio } = $$props;
	let old_value = null;
	let _value;
	let dragging;

	$$self.$$.on_mount.push(function () {
		if (mode === undefined && !('mode' in $$props || $$self.$$.bound[$$self.$$.props['mode']])) {
			console.warn("<StaticAudio> was created without expected prop 'mode'");
		}

		if (source === undefined && !('source' in $$props || $$self.$$.bound[$$self.$$.props['source']])) {
			console.warn("<StaticAudio> was created without expected prop 'source'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticAudio> was created without expected prop 'label'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<StaticAudio> was created without expected prop 'root'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<StaticAudio> was created without expected prop 'show_label'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<StaticAudio> was created without expected prop 'root_url'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticAudio> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticAudio> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'mode',
		'value',
		'source',
		'label',
		'root',
		'show_label',
		'root_url',
		'container',
		'scale',
		'min_width',
		'loading_status',
		'autoplay',
		'show_download_button',
		'show_share_button',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticAudio> was created with unknown prop '${key}'`);
	});

	const share_handler = e => gradio.dispatch("share", e.detail);
	const error_handler = e => gradio.dispatch("error", e.detail);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('mode' in $$props) $$invalidate(3, mode = $$props.mode);
		if ('value' in $$props) $$invalidate(4, value = $$props.value);
		if ('source' in $$props) $$invalidate(5, source = $$props.source);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('root' in $$props) $$invalidate(18, root = $$props.root);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('root_url' in $$props) $$invalidate(19, root_url = $$props.root_url);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(11, loading_status = $$props.loading_status);
		if ('autoplay' in $$props) $$invalidate(12, autoplay = $$props.autoplay);
		if ('show_download_button' in $$props) $$invalidate(13, show_download_button = $$props.show_download_button);
		if ('show_share_button' in $$props) $$invalidate(14, show_share_button = $$props.show_share_button);
		if ('gradio' in $$props) $$invalidate(15, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		StaticAudio: AudioPlayer,
		StatusTracker: Static,
		Block,
		normalise_file,
		elem_id,
		elem_classes,
		visible,
		mode,
		value,
		source,
		label,
		root,
		show_label,
		root_url,
		container,
		scale,
		min_width,
		loading_status,
		autoplay,
		show_download_button,
		show_share_button,
		gradio,
		old_value,
		_value,
		dragging
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('mode' in $$props) $$invalidate(3, mode = $$props.mode);
		if ('value' in $$props) $$invalidate(4, value = $$props.value);
		if ('source' in $$props) $$invalidate(5, source = $$props.source);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('root' in $$props) $$invalidate(18, root = $$props.root);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('root_url' in $$props) $$invalidate(19, root_url = $$props.root_url);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(11, loading_status = $$props.loading_status);
		if ('autoplay' in $$props) $$invalidate(12, autoplay = $$props.autoplay);
		if ('show_download_button' in $$props) $$invalidate(13, show_download_button = $$props.show_download_button);
		if ('show_share_button' in $$props) $$invalidate(14, show_share_button = $$props.show_share_button);
		if ('gradio' in $$props) $$invalidate(15, gradio = $$props.gradio);
		if ('old_value' in $$props) $$invalidate(20, old_value = $$props.old_value);
		if ('_value' in $$props) $$invalidate(16, _value = $$props._value);
		if ('dragging' in $$props) $$invalidate(17, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, root, root_url*/ 786448) {
			$$invalidate(16, _value = normalise_file(value, root, root_url));
		}

		if ($$self.$$.dirty & /*value, old_value, gradio*/ 1081360) {
			{
				if (JSON.stringify(value) !== JSON.stringify(old_value)) {
					$$invalidate(20, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		mode,
		value,
		source,
		label,
		show_label,
		container,
		scale,
		min_width,
		loading_status,
		autoplay,
		show_download_button,
		show_share_button,
		gradio,
		_value,
		dragging,
		root,
		root_url,
		old_value,
		share_handler,
		error_handler
	];
}

class StaticAudio_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			mode: 3,
			value: 4,
			source: 5,
			label: 6,
			root: 18,
			show_label: 7,
			root_url: 19,
			container: 8,
			scale: 9,
			min_width: 10,
			loading_status: 11,
			autoplay: 12,
			show_download_button: 13,
			show_share_button: 14,
			gradio: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticAudio_1",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		return this.$$.ctx[0];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[1];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[2];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get mode() {
		return this.$$.ctx[3];
	}

	set mode(mode) {
		this.$$set({ mode });
		flush();
	}

	get value() {
		return this.$$.ctx[4];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get source() {
		return this.$$.ctx[5];
	}

	set source(source) {
		this.$$set({ source });
		flush();
	}

	get label() {
		return this.$$.ctx[6];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get root() {
		return this.$$.ctx[18];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get show_label() {
		return this.$$.ctx[7];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get root_url() {
		return this.$$.ctx[19];
	}

	set root_url(root_url) {
		this.$$set({ root_url });
		flush();
	}

	get container() {
		return this.$$.ctx[8];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[9];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[10];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[11];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get autoplay() {
		return this.$$.ctx[12];
	}

	set autoplay(autoplay) {
		this.$$set({ autoplay });
		flush();
	}

	get show_download_button() {
		return this.$$.ctx[13];
	}

	set show_download_button(show_download_button) {
		this.$$set({ show_download_button });
		flush();
	}

	get show_share_button() {
		return this.$$.ctx[14];
	}

	set show_share_button(show_share_button) {
		this.$$set({ show_share_button });
		flush();
	}

	get gradio() {
		return this.$$.ctx[15];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}
}

const StaticAudio_1$1 = StaticAudio_1;

export { StaticAudio_1$1 as default };
//# sourceMappingURL=index-4fb6732d.js.map
