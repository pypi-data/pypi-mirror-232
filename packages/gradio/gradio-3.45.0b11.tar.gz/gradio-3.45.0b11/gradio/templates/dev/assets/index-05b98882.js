import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, text, space, attr_dev, add_location, set_style, toggle_class, insert_dev, append_dev, listen_dev, set_data_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach_dev, assign, create_component, mount_component, destroy_component, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { B as Block } from './Button-4caa11f6.js';
import { S as Static } from './index-ee06c8ff.js';
import StaticColumn from './index-ed012dce.js';

const Accordion_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/accordion/static/Accordion.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/accordion/static/Accordion.svelte";

function create_fragment$1(ctx) {
	let div0;
	let span0;
	let t0;
	let t1;
	let span1;
	let t3;
	let div1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div0 = element("div");
			span0 = element("span");
			t0 = text(/*label*/ ctx[1]);
			t1 = space();
			span1 = element("span");
			span1.textContent = "â–¼";
			t3 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(span0, "class", "s-w-mS6wVXUL2Y");
			add_location(span0, file, 9, 1, 280);
			attr_dev(span1, "class", "icon s-w-mS6wVXUL2Y");
			set_style(span1, "transform", /*open*/ ctx[0] ? "rotate(0)" : "rotate(90deg)");
			add_location(span1, file, 10, 1, 302);
			attr_dev(div0, "class", "label-wrap s-w-mS6wVXUL2Y");
			toggle_class(div0, "open", /*open*/ ctx[0]);
			add_location(div0, file, 8, 0, 211);
			set_style(div1, "display", /*open*/ ctx[0] ? "block" : "none");
			add_location(div1, file, 14, 0, 397);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, span0);
			append_dev(span0, t0);
			append_dev(div0, t1);
			append_dev(div0, span1);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(div0, "click", /*click_handler*/ ctx[4], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1]);

			if (dirty & /*open*/ 1) {
				set_style(span1, "transform", /*open*/ ctx[0] ? "rotate(0)" : "rotate(90deg)");
			}

			if (!current || dirty & /*open*/ 1) {
				toggle_class(div0, "open", /*open*/ ctx[0]);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (dirty & /*open*/ 1) {
				set_style(div1, "display", /*open*/ ctx[0] ? "block" : "none");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t3);
				detach_dev(div1);
			}

			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Accordion', slots, ['default']);
	let { label = "" } = $$props;
	let { open = true } = $$props;
	const writable_props = ['label', 'open'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Accordion> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, open = !open);

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('open' in $$props) $$invalidate(0, open = $$props.open);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ label, open });

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('open' in $$props) $$invalidate(0, open = $$props.open);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [open, label, $$scope, slots, click_handler];
}

class Accordion extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { label: 1, open: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Accordion",
			options,
			id: create_fragment$1.name
		});
	}

	get label() {
		throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open() {
		throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/accordion/static/StaticAccordion.svelte generated by Svelte v4.0.0 */

// (22:2) <Column>
function create_default_slot_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(22:2) <Column>",
		ctx
	});

	return block;
}

// (21:1) <Accordion {label} {open}>
function create_default_slot_1(ctx) {
	let column;
	let current;

	column = new StaticColumn({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope*/ 256) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(21:1) <Accordion {label} {open}>",
		ctx
	});

	return block;
}

// (14:0) <Block {elem_id} {elem_classes} {visible}>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let accordion;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[6].autoscroll },
		{ i18n: /*gradio*/ ctx[6].i18n },
		/*loading_status*/ ctx[5]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	accordion = new Accordion({
			props: {
				label: /*label*/ ctx[0],
				open: /*open*/ ctx[4],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(accordion.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(accordion, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 96)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 64 && { autoscroll: /*gradio*/ ctx[6].autoscroll },
					dirty & /*gradio*/ 64 && { i18n: /*gradio*/ ctx[6].i18n },
					dirty & /*loading_status*/ 32 && get_spread_object(/*loading_status*/ ctx[5])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const accordion_changes = {};
			if (dirty & /*label*/ 1) accordion_changes.label = /*label*/ ctx[0];
			if (dirty & /*open*/ 16) accordion_changes.open = /*open*/ ctx[4];

			if (dirty & /*$$scope*/ 256) {
				accordion_changes.$$scope = { dirty, ctx };
			}

			accordion.$set(accordion_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(accordion.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(accordion.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(accordion, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:0) <Block {elem_id} {elem_classes} {visible}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				visible: /*visible*/ ctx[3],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];

			if (dirty & /*$$scope, label, open, gradio, loading_status*/ 369) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticAccordion', slots, ['default']);
	let { label } = $$props;
	let { elem_id } = $$props;
	let { elem_classes } = $$props;
	let { visible = true } = $$props;
	let { open = true } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticAccordion> was created without expected prop 'label'");
		}

		if (elem_id === undefined && !('elem_id' in $$props || $$self.$$.bound[$$self.$$.props['elem_id']])) {
			console.warn("<StaticAccordion> was created without expected prop 'elem_id'");
		}

		if (elem_classes === undefined && !('elem_classes' in $$props || $$self.$$.bound[$$self.$$.props['elem_classes']])) {
			console.warn("<StaticAccordion> was created without expected prop 'elem_classes'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticAccordion> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticAccordion> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'label',
		'elem_id',
		'elem_classes',
		'visible',
		'open',
		'loading_status',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticAccordion> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('open' in $$props) $$invalidate(4, open = $$props.open);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(6, gradio = $$props.gradio);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Accordion,
		Block,
		StatusTracker: Static,
		Column: StaticColumn,
		label,
		elem_id,
		elem_classes,
		visible,
		open,
		loading_status,
		gradio
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('open' in $$props) $$invalidate(4, open = $$props.open);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(6, gradio = $$props.gradio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		label,
		elem_id,
		elem_classes,
		visible,
		open,
		loading_status,
		gradio,
		slots,
		$$scope
	];
}

class StaticAccordion extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			open: 4,
			loading_status: 5,
			gradio: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticAccordion",
			options,
			id: create_fragment.name
		});
	}

	get label() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_classes() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_classes(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gradio() {
		throw new Error("<StaticAccordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gradio(value) {
		throw new Error("<StaticAccordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const StaticAccordion$1 = StaticAccordion;

export { StaticAccordion$1 as default };
//# sourceMappingURL=index-05b98882.js.map
