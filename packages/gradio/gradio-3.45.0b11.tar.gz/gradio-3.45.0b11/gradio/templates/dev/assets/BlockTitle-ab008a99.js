import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, element, space, empty, attr_dev, toggle_class, add_location, insert_dev, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, group_outros, transition_out, check_outros, detach_dev, create_component, mount_component, destroy_component, text, set_data_dev } from '../../../node/dev/svelte-internal.js';
import { I as Info } from './Button-4caa11f6.js';

/* home/runner/work/gradio/gradio/js/atoms/src/BlockTitle.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/atoms/src/BlockTitle.svelte";

// (14:0) {#if info}
function create_if_block(ctx) {
	let info_1;
	let current;

	info_1 = new Info({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(info_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(info_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const info_1_changes = {};

			if (dirty & /*$$scope, info*/ 10) {
				info_1_changes.$$scope = { dirty, ctx };
			}

			info_1.$set(info_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(info_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(info_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(14:0) {#if info}",
		ctx
	});

	return block;
}

// (15:1) <Info>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*info*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*info*/ 2) set_data_dev(t, /*info*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(15:1) <Info>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let span;
	let t;
	let if_block_anchor;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let if_block = /*info*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span, "data-testid", "block-info");
			attr_dev(span, "class", "s-LeSp2aL0TuZ9");
			toggle_class(span, "sr-only", !/*show_label*/ ctx[0]);
			toggle_class(span, "hide", !/*show_label*/ ctx[0]);
			toggle_class(span, "has-info", /*info*/ ctx[1] != null);
			add_location(span, file, 6, 0, 137);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*show_label*/ 1) {
				toggle_class(span, "sr-only", !/*show_label*/ ctx[0]);
			}

			if (!current || dirty & /*show_label*/ 1) {
				toggle_class(span, "hide", !/*show_label*/ ctx[0]);
			}

			if (!current || dirty & /*info*/ 2) {
				toggle_class(span, "has-info", /*info*/ ctx[1] != null);
			}

			if (/*info*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*info*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BlockTitle', slots, ['default']);
	let { show_label = true } = $$props;
	let { info = undefined } = $$props;
	const writable_props = ['show_label', 'info'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BlockTitle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
		if ('info' in $$props) $$invalidate(1, info = $$props.info);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ Info, show_label, info });

	$$self.$inject_state = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
		if ('info' in $$props) $$invalidate(1, info = $$props.info);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [show_label, info, slots, $$scope];
}

class BlockTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { show_label: 0, info: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlockTitle",
			options,
			id: create_fragment.name
		});
	}

	get show_label() {
		throw new Error("<BlockTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<BlockTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get info() {
		throw new Error("<BlockTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set info(value) {
		throw new Error("<BlockTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { BlockTitle as B };
//# sourceMappingURL=BlockTitle-ab008a99.js.map
