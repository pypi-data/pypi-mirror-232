import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, create_component, space, empty, mount_component, insert_dev, group_outros, transition_out, check_outros, transition_in, detach_dev, destroy_component, bubble, flush, getContext, assign, get_spread_update, get_spread_object } from '../../../node/dev/svelte-internal.js';
import { B as Block, b as blobToBase64, n as normalise_file } from './Button-4caa11f6.js';
import { B as BlockLabel } from './BlockLabel-f6ca64fc.js';
import { E as Empty } from './Empty-83cb2fc8.js';
import { u as upload_files, S as Static } from './index-ee06c8ff.js';
import { F as File } from './File-9ba21648.js';
import { F as FilePreview } from './FilePreview-71156728.js';

/* home/runner/work/gradio/gradio/js/file/static/File.svelte generated by Svelte v4.0.0 */

// (21:0) {:else}
function create_else_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(empty_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(empty_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(21:0) {:else}",
		ctx
	});

	return block;
}

// (19:0) {#if value}
function create_if_block(ctx) {
	let filepreview;
	let current;

	filepreview = new FilePreview({
			props: {
				i18n: /*i18n*/ ctx[5],
				selectable: /*selectable*/ ctx[3],
				value: /*value*/ ctx[0],
				height: /*height*/ ctx[4]
			},
			$$inline: true
		});

	filepreview.$on("select", /*select_handler*/ ctx[6]);

	const block = {
		c: function create() {
			create_component(filepreview.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(filepreview, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const filepreview_changes = {};
			if (dirty & /*i18n*/ 32) filepreview_changes.i18n = /*i18n*/ ctx[5];
			if (dirty & /*selectable*/ 8) filepreview_changes.selectable = /*selectable*/ ctx[3];
			if (dirty & /*value*/ 1) filepreview_changes.value = /*value*/ ctx[0];
			if (dirty & /*height*/ 16) filepreview_changes.height = /*height*/ ctx[4];
			filepreview.$set(filepreview_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(filepreview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(filepreview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(filepreview, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(19:0) {#if value}",
		ctx
	});

	return block;
}

// (22:1) <Empty unpadded_box={true} size="large">
function create_default_slot$1(ctx) {
	let file_1;
	let current;
	file_1 = new File({ $$inline: true });

	const block = {
		c: function create() {
			create_component(file_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(file_1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(file_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(file_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(file_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(22:1) <Empty unpadded_box={true} size=\\\"large\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[2],
				float: /*value*/ ctx[0] === null,
				Icon: File,
				label: /*label*/ ctx[1] || "File"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 4) blocklabel_changes.show_label = /*show_label*/ ctx[2];
			if (dirty & /*value*/ 1) blocklabel_changes.float = /*value*/ ctx[0] === null;
			if (dirty & /*label*/ 2) blocklabel_changes.label = /*label*/ ctx[1] || "File";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block_anchor);
			}

			destroy_component(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('File', slots, []);
	let { value = null } = $$props;
	let { label } = $$props;
	let { show_label = true } = $$props;
	let { selectable = false } = $$props;
	let { height = undefined } = $$props;
	let { i18n } = $$props;

	$$self.$$.on_mount.push(function () {
		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<File> was created without expected prop 'label'");
		}

		if (i18n === undefined && !('i18n' in $$props || $$self.$$.bound[$$self.$$.props['i18n']])) {
			console.warn("<File> was created without expected prop 'i18n'");
		}
	});

	const writable_props = ['value', 'label', 'show_label', 'selectable', 'height', 'i18n'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<File> was created with unknown prop '${key}'`);
	});

	function select_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('selectable' in $$props) $$invalidate(3, selectable = $$props.selectable);
		if ('height' in $$props) $$invalidate(4, height = $$props.height);
		if ('i18n' in $$props) $$invalidate(5, i18n = $$props.i18n);
	};

	$$self.$capture_state = () => ({
		BlockLabel,
		Empty,
		File,
		FilePreview,
		value,
		label,
		show_label,
		selectable,
		height,
		i18n
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('selectable' in $$props) $$invalidate(3, selectable = $$props.selectable);
		if ('height' in $$props) $$invalidate(4, height = $$props.height);
		if ('i18n' in $$props) $$invalidate(5, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, label, show_label, selectable, height, i18n, select_handler];
}

class File_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			value: 0,
			label: 1,
			show_label: 2,
			selectable: 3,
			height: 4,
			i18n: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "File_1",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get i18n() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set i18n(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* home/runner/work/gradio/gradio/js/file/static/StaticFile.svelte generated by Svelte v4.0.0 */

// (78:0) <Block  {visible}  variant={value === null ? "dashed" : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let file_1;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[12].autoscroll
		},
		{ i18n: /*gradio*/ ctx[12].i18n },
		/*loading_status*/ ctx[8],
		{
			status: /*pending_upload*/ ctx[14]
			? "generating"
			: /*loading_status*/ ctx[8]?.status || "complete"
		}
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({
			props: statustracker_props,
			$$inline: true
		});

	file_1 = new File_1({
			props: {
				selectable: /*selectable*/ ctx[7],
				value: /*_value*/ ctx[13],
				label: /*label*/ ctx[4],
				show_label: /*show_label*/ ctx[5],
				height: /*height*/ ctx[6],
				i18n: /*gradio*/ ctx[12].i18n
			},
			$$inline: true
		});

	file_1.$on("select", /*select_handler*/ ctx[20]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(file_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(file_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status, pending_upload*/ 20736)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4096 && {
						autoscroll: /*gradio*/ ctx[12].autoscroll
					},
					dirty & /*gradio*/ 4096 && { i18n: /*gradio*/ ctx[12].i18n },
					dirty & /*loading_status*/ 256 && get_spread_object(/*loading_status*/ ctx[8]),
					dirty & /*pending_upload, loading_status*/ 16640 && {
						status: /*pending_upload*/ ctx[14]
						? "generating"
						: /*loading_status*/ ctx[8]?.status || "complete"
					}
				])
			: {};

			statustracker.$set(statustracker_changes);
			const file_1_changes = {};
			if (dirty & /*selectable*/ 128) file_1_changes.selectable = /*selectable*/ ctx[7];
			if (dirty & /*_value*/ 8192) file_1_changes.value = /*_value*/ ctx[13];
			if (dirty & /*label*/ 16) file_1_changes.label = /*label*/ ctx[4];
			if (dirty & /*show_label*/ 32) file_1_changes.show_label = /*show_label*/ ctx[5];
			if (dirty & /*height*/ 64) file_1_changes.height = /*height*/ ctx[6];
			if (dirty & /*gradio*/ 4096) file_1_changes.i18n = /*gradio*/ ctx[12].i18n;
			file_1.$set(file_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(file_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(file_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(file_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(78:0) <Block  {visible}  variant={value === null ? \\\"dashed\\\" : \\\"solid\\\"}  border_mode={dragging ? \\\"focus\\\" : \\\"base\\\"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				variant: /*value*/ ctx[3] === null ? "dashed" : "solid",
				border_mode: /*dragging*/ ctx[15] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: /*container*/ ctx[9],
				scale: /*scale*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				allow_overflow: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*value*/ 8) block_changes.variant = /*value*/ ctx[3] === null ? "dashed" : "solid";
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*container*/ 512) block_changes.container = /*container*/ ctx[9];
			if (dirty & /*scale*/ 1024) block_changes.scale = /*scale*/ ctx[10];
			if (dirty & /*min_width*/ 2048) block_changes.min_width = /*min_width*/ ctx[11];

			if (dirty & /*$$scope, selectable, _value, label, show_label, height, gradio, loading_status, pending_upload*/ 4223472) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let _value;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticFile', slots, []);
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let old_value;
	let { mode } = $$props;
	let { root } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { height = undefined } = $$props;
	let { root_url } = $$props;
	let { selectable = false } = $$props;
	let { loading_status } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	const upload_files$1 = getContext("upload_files") ?? upload_files;
	let dragging = false;
	let pending_upload = false;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<StaticFile> was created without expected prop 'value'");
		}

		if (mode === undefined && !('mode' in $$props || $$self.$$.bound[$$self.$$.props['mode']])) {
			console.warn("<StaticFile> was created without expected prop 'mode'");
		}

		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<StaticFile> was created without expected prop 'root'");
		}

		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
			console.warn("<StaticFile> was created without expected prop 'label'");
		}

		if (show_label === undefined && !('show_label' in $$props || $$self.$$.bound[$$self.$$.props['show_label']])) {
			console.warn("<StaticFile> was created without expected prop 'show_label'");
		}

		if (root_url === undefined && !('root_url' in $$props || $$self.$$.bound[$$self.$$.props['root_url']])) {
			console.warn("<StaticFile> was created without expected prop 'root_url'");
		}

		if (loading_status === undefined && !('loading_status' in $$props || $$self.$$.bound[$$self.$$.props['loading_status']])) {
			console.warn("<StaticFile> was created without expected prop 'loading_status'");
		}

		if (gradio === undefined && !('gradio' in $$props || $$self.$$.bound[$$self.$$.props['gradio']])) {
			console.warn("<StaticFile> was created without expected prop 'gradio'");
		}
	});

	const writable_props = [
		'elem_id',
		'elem_classes',
		'visible',
		'value',
		'mode',
		'root',
		'label',
		'show_label',
		'height',
		'root_url',
		'selectable',
		'loading_status',
		'container',
		'scale',
		'min_width',
		'gradio'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticFile> was created with unknown prop '${key}'`);
	});

	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('mode' in $$props) $$invalidate(16, mode = $$props.mode);
		if ('root' in $$props) $$invalidate(17, root = $$props.root);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('height' in $$props) $$invalidate(6, height = $$props.height);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('selectable' in $$props) $$invalidate(7, selectable = $$props.selectable);
		if ('loading_status' in $$props) $$invalidate(8, loading_status = $$props.loading_status);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(12, gradio = $$props.gradio);
	};

	$$self.$capture_state = () => ({
		getContext,
		File: File_1,
		blobToBase64,
		normalise_file,
		Block,
		default_upload_files: upload_files,
		StatusTracker: Static,
		elem_id,
		elem_classes,
		visible,
		value,
		old_value,
		mode,
		root,
		label,
		show_label,
		height,
		root_url,
		selectable,
		loading_status,
		container,
		scale,
		min_width,
		gradio,
		upload_files: upload_files$1,
		dragging,
		pending_upload,
		_value
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('old_value' in $$props) $$invalidate(19, old_value = $$props.old_value);
		if ('mode' in $$props) $$invalidate(16, mode = $$props.mode);
		if ('root' in $$props) $$invalidate(17, root = $$props.root);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('height' in $$props) $$invalidate(6, height = $$props.height);
		if ('root_url' in $$props) $$invalidate(18, root_url = $$props.root_url);
		if ('selectable' in $$props) $$invalidate(7, selectable = $$props.selectable);
		if ('loading_status' in $$props) $$invalidate(8, loading_status = $$props.loading_status);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(12, gradio = $$props.gradio);
		if ('dragging' in $$props) $$invalidate(15, dragging = $$props.dragging);
		if ('pending_upload' in $$props) $$invalidate(14, pending_upload = $$props.pending_upload);
		if ('_value' in $$props) $$invalidate(13, _value = $$props._value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, root, root_url*/ 393224) {
			$$invalidate(13, _value = normalise_file(value, root, root_url));
		}

		if ($$self.$$.dirty & /*_value, old_value, gradio, mode, root, value, root_url*/ 995336) {
			{
				if (JSON.stringify(_value) !== JSON.stringify(old_value)) {
					$$invalidate(19, old_value = _value);

					if (_value === null) {
						gradio.dispatch("change");
						$$invalidate(14, pending_upload = false);
					} else if (!(Array.isArray(_value) ? _value : [_value]).every(file_data => file_data.blob)) {
						$$invalidate(14, pending_upload = false);
						gradio.dispatch("change");
					} else if (mode === "interactive") {
						let files = (Array.isArray(_value) ? _value : [_value]).map(file_data => file_data.blob);
						let upload_value = _value;
						$$invalidate(14, pending_upload = true);

						upload_files$1(root, files).then(response => {
							if (upload_value !== _value) {
								// value has changed since upload started
								return;
							}

							$$invalidate(14, pending_upload = false);

							if (response.error) {
								(Array.isArray(_value) ? _value : [_value]).forEach(async (file_data, i) => {
									file_data.data = await blobToBase64(file_data.blob);
									file_data.blob = undefined;
								});
							} else {
								(Array.isArray(_value) ? _value : [_value]).forEach((file_data, i) => {
									if (response.files) {
										file_data.orig_name = file_data.name;
										file_data.name = response.files[i];
										file_data.is_file = true;
										file_data.blob = undefined;
									}
								});

								$$invalidate(19, old_value = $$invalidate(13, _value = normalise_file(value, root, root_url)));
							}

							gradio.dispatch("change");
							gradio.dispatch("upload");
						});
					}
				}
			}
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		label,
		show_label,
		height,
		selectable,
		loading_status,
		container,
		scale,
		min_width,
		gradio,
		_value,
		pending_upload,
		dragging,
		mode,
		root,
		root_url,
		old_value,
		select_handler
	];
}

class StaticFile extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			mode: 16,
			root: 17,
			label: 4,
			show_label: 5,
			height: 6,
			root_url: 18,
			selectable: 7,
			loading_status: 8,
			container: 9,
			scale: 10,
			min_width: 11,
			gradio: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticFile",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		return this.$$.ctx[0];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[1];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[2];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[3];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get mode() {
		return this.$$.ctx[16];
	}

	set mode(mode) {
		this.$$set({ mode });
		flush();
	}

	get root() {
		return this.$$.ctx[17];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get label() {
		return this.$$.ctx[4];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get show_label() {
		return this.$$.ctx[5];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get height() {
		return this.$$.ctx[6];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get root_url() {
		return this.$$.ctx[18];
	}

	set root_url(root_url) {
		this.$$set({ root_url });
		flush();
	}

	get selectable() {
		return this.$$.ctx[7];
	}

	set selectable(selectable) {
		this.$$set({ selectable });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[8];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get container() {
		return this.$$.ctx[9];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[10];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[11];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get gradio() {
		return this.$$.ctx[12];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}
}

const StaticFile$1 = StaticFile;

export { StaticFile$1 as default };
//# sourceMappingURL=index-543c8d75.js.map
