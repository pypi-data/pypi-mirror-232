import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, element, set_style, attr_dev, toggle_class, add_location, insert_dev, noop, detach_dev } from '../../../node/dev/svelte-internal.js';

const Colorpicker_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/colorpicker/example/Colorpicker.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/colorpicker/example/Colorpicker.svelte";

function create_fragment(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			set_style(div, "background-color", /*value*/ ctx[0]);
			attr_dev(div, "class", "s-Ow-CA2YebWJr");
			toggle_class(div, "table", /*type*/ ctx[1] === "table");
			toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			toggle_class(div, "selected", /*selected*/ ctx[2]);
			add_location(div, file, 6, 0, 93);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1) {
				set_style(div, "background-color", /*value*/ ctx[0]);
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "table", /*type*/ ctx[1] === "table");
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(div, "selected", /*selected*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Colorpicker', slots, []);
	let { value } = $$props;
	let { type } = $$props;
	let { selected = false } = $$props;

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Colorpicker> was created without expected prop 'value'");
		}

		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
			console.warn("<Colorpicker> was created without expected prop 'type'");
		}
	});

	const writable_props = ['value', 'type', 'selected'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Colorpicker> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
	};

	$$self.$capture_state = () => ({ value, type, selected });

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, type, selected];
}

class Colorpicker extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0, type: 1, selected: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Colorpicker",
			options,
			id: create_fragment.name
		});
	}

	get value() {
		throw new Error("<Colorpicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Colorpicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Colorpicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Colorpicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Colorpicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Colorpicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const Colorpicker$1 = Colorpicker;

export { Colorpicker$1 as default };
//# sourceMappingURL=index-3a7c83d0.js.map
