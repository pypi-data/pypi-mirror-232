import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, element, create_component, space, text, attr_dev, add_location, toggle_class, insert_dev, append_dev, mount_component, set_data_dev, transition_in, transition_out, detach_dev, destroy_component } from '../../../node/dev/svelte-internal.js';
import './Button-4caa11f6.js';

/* home/runner/work/gradio/gradio/js/atoms/src/BlockLabel.svelte generated by Svelte v4.0.0 */

const file = "home/runner/work/gradio/gradio/js/atoms/src/BlockLabel.svelte";

function create_fragment(ctx) {
	let div;
	let span;
	let icon;
	let t0;
	let t1;
	let current;
	icon = new /*Icon*/ ctx[1]({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			t1 = text(/*label*/ ctx[0]);
			attr_dev(span, "class", "s-bOz2fADLxhOC");
			add_location(span, file, 15, 1, 285);
			attr_dev(div, "data-testid", "block-label");
			attr_dev(div, "class", "s-bOz2fADLxhOC");
			toggle_class(div, "hide", !/*show_label*/ ctx[2]);
			toggle_class(div, "sr-only", !/*show_label*/ ctx[2]);
			toggle_class(div, "float", /*float*/ ctx[4]);
			toggle_class(div, "hide-label", /*disable*/ ctx[3]);
			add_location(div, file, 8, 0, 154);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			mount_component(icon, span, null);
			append_dev(div, t0);
			append_dev(div, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*label*/ 1) set_data_dev(t1, /*label*/ ctx[0]);

			if (!current || dirty & /*show_label*/ 4) {
				toggle_class(div, "hide", !/*show_label*/ ctx[2]);
			}

			if (!current || dirty & /*show_label*/ 4) {
				toggle_class(div, "sr-only", !/*show_label*/ ctx[2]);
			}

			if (!current || dirty & /*float*/ 16) {
				toggle_class(div, "float", /*float*/ ctx[4]);
			}

			if (!current || dirty & /*disable*/ 8) {
				toggle_class(div, "hide-label", /*disable*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BlockLabel', slots, []);
	let { label = null } = $$props;
	let { Icon } = $$props;
	let { show_label = true } = $$props;
	let { disable = false } = $$props;
	let { float = true } = $$props;

	$$self.$$.on_mount.push(function () {
		if (Icon === undefined && !('Icon' in $$props || $$self.$$.bound[$$self.$$.props['Icon']])) {
			console.warn("<BlockLabel> was created without expected prop 'Icon'");
		}
	});

	const writable_props = ['label', 'Icon', 'show_label', 'disable', 'float'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BlockLabel> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('Icon' in $$props) $$invalidate(1, Icon = $$props.Icon);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('disable' in $$props) $$invalidate(3, disable = $$props.disable);
		if ('float' in $$props) $$invalidate(4, float = $$props.float);
	};

	$$self.$capture_state = () => ({ label, Icon, show_label, disable, float });

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('Icon' in $$props) $$invalidate(1, Icon = $$props.Icon);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('disable' in $$props) $$invalidate(3, disable = $$props.disable);
		if ('float' in $$props) $$invalidate(4, float = $$props.float);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [label, Icon, show_label, disable, float];
}

class BlockLabel extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			Icon: 1,
			show_label: 2,
			disable: 3,
			float: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlockLabel",
			options,
			id: create_fragment.name
		});
	}

	get label() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get Icon() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set Icon(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disable() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disable(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get float() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set float(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { BlockLabel as B };
//# sourceMappingURL=BlockLabel-f6ca64fc.js.map
