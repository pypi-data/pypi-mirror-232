import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, create_slot, validate_slots, getContext, createEventDispatcher, tick, element, space, attr_dev, add_location, toggle_class, insert_dev, append_dev, listen_dev, stop_propagation, prevent_default, update_slot_base, get_all_dirty_from_scope, get_slot_changes, prop_dev, transition_in, transition_out, detach_dev, run_all, bubble, binding_callbacks } from '../../../node/dev/svelte-internal.js';
import { b as blobToBase64, n as normalise_file } from './Button-4caa11f6.js';
import { u as upload_files } from './index-ee06c8ff.js';

/* home/runner/work/gradio/gradio/js/upload/src/Upload.svelte generated by Svelte v4.0.0 */
const file = "home/runner/work/gradio/gradio/js/upload/src/Upload.svelte";

function create_fragment(ctx) {
	let div;
	let t;
	let input;
	let input_multiple_value;
	let input_webkitdirectory_value;
	let input_mozdirectory_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			input = element("input");
			attr_dev(input, "type", "file");
			attr_dev(input, "accept", /*filetype*/ ctx[0]);
			input.multiple = input_multiple_value = /*file_count*/ ctx[4] === "multiple" || undefined;
			attr_dev(input, "webkitdirectory", input_webkitdirectory_value = /*file_count*/ ctx[4] === "directory" || undefined);
			attr_dev(input, "mozdirectory", input_mozdirectory_value = /*file_count*/ ctx[4] === "directory" || undefined);
			attr_dev(input, "class", "s-_ydCafhKbrgO");
			add_location(input, file, 116, 1, 3096);
			attr_dev(div, "class", "s-_ydCafhKbrgO");
			toggle_class(div, "center", /*center*/ ctx[2]);
			toggle_class(div, "boundedheight", /*boundedheight*/ ctx[1]);
			toggle_class(div, "flex", /*flex*/ ctx[3]);
			add_location(div, file, 99, 0, 2611);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append_dev(div, t);
			append_dev(div, input);
			/*input_binding*/ ctx[22](input);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*loadFilesFromUpload*/ ctx[8], false, false, false, false),
					listen_dev(div, "drag", stop_propagation(prevent_default(/*drag_handler*/ ctx[15])), false, true, true, false),
					listen_dev(div, "dragstart", stop_propagation(prevent_default(/*dragstart_handler*/ ctx[16])), false, true, true, false),
					listen_dev(div, "dragend", stop_propagation(prevent_default(/*dragend_handler*/ ctx[17])), false, true, true, false),
					listen_dev(div, "dragover", stop_propagation(prevent_default(/*dragover_handler*/ ctx[18])), false, true, true, false),
					listen_dev(div, "dragenter", stop_propagation(prevent_default(/*dragenter_handler*/ ctx[19])), false, true, true, false),
					listen_dev(div, "dragleave", stop_propagation(prevent_default(/*dragleave_handler*/ ctx[20])), false, true, true, false),
					listen_dev(div, "drop", stop_propagation(prevent_default(/*drop_handler*/ ctx[21])), false, true, true, false),
					listen_dev(div, "click", /*openFileUpload*/ ctx[7], false, false, false, false),
					listen_dev(div, "drop", /*loadFilesFromDrop*/ ctx[9], false, false, false, false),
					listen_dev(div, "dragenter", /*updateDragging*/ ctx[6], false, false, false, false),
					listen_dev(div, "dragleave", /*updateDragging*/ ctx[6], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*filetype*/ 1) {
				attr_dev(input, "accept", /*filetype*/ ctx[0]);
			}

			if (!current || dirty & /*file_count*/ 16 && input_multiple_value !== (input_multiple_value = /*file_count*/ ctx[4] === "multiple" || undefined)) {
				prop_dev(input, "multiple", input_multiple_value);
			}

			if (!current || dirty & /*file_count*/ 16 && input_webkitdirectory_value !== (input_webkitdirectory_value = /*file_count*/ ctx[4] === "directory" || undefined)) {
				attr_dev(input, "webkitdirectory", input_webkitdirectory_value);
			}

			if (!current || dirty & /*file_count*/ 16 && input_mozdirectory_value !== (input_mozdirectory_value = /*file_count*/ ctx[4] === "directory" || undefined)) {
				attr_dev(input, "mozdirectory", input_mozdirectory_value);
			}

			if (!current || dirty & /*center*/ 4) {
				toggle_class(div, "center", /*center*/ ctx[2]);
			}

			if (!current || dirty & /*boundedheight*/ 2) {
				toggle_class(div, "boundedheight", /*boundedheight*/ ctx[1]);
			}

			if (!current || dirty & /*flex*/ 8) {
				toggle_class(div, "flex", /*flex*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (default_slot) default_slot.d(detaching);
			/*input_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Upload', slots, ['default']);
	const upload_files$1 = getContext("upload_files") ?? upload_files;
	let { filetype = null } = $$props;
	let { dragging = false } = $$props;
	let { boundedheight = true } = $$props;
	let { center = true } = $$props;
	let { flex = true } = $$props;
	let { file_count = "single" } = $$props;
	let { disable_click = false } = $$props;
	let { root } = $$props;
	let hidden_upload;
	const dispatch = createEventDispatcher();

	function updateDragging() {
		$$invalidate(10, dragging = !dragging);
	}

	function openFileUpload() {
		if (disable_click) return;
		$$invalidate(5, hidden_upload.value = "", hidden_upload);
		hidden_upload.click();
	}

	async function handle_upload(file_data) {
		await tick();
		let files = (Array.isArray(file_data) ? file_data : [file_data]).map(file_data => file_data.blob);

		await upload_files$1(root, files).then(async response => {
			if (response.error) {
				(Array.isArray(file_data) ? file_data : [file_data]).forEach(async (file_data, i) => {
					file_data.data = await blobToBase64(file_data.blob);
					file_data.blob = undefined;
				});
			} else {
				(Array.isArray(file_data) ? file_data : [file_data]).forEach((f, i) => {
					if (response.files) {
						f.orig_name = f.name;
						f.name = response.files[i];
						f.is_file = true;
						f.blob = undefined;
						normalise_file(f, root, null);
					}
				});
			}
		});

		dispatch("load", file_count === "single" ? file_data[0] : file_data);
	}

	async function loadFiles(files) {
		let _files = Array.from(files);

		if (!files.length) {
			return;
		}

		if (file_count === "single") {
			_files = [files[0]];
		}

		var all_file_data = [];

		_files.forEach((f, i) => {
			all_file_data[i] = {
				name: f.name,
				size: f.size,
				data: "",
				blob: f
			};
		});

		await handle_upload(all_file_data);
	}

	async function loadFilesFromUpload(e) {
		const target = e.target;
		if (!target.files) return;
		await loadFiles(target.files);
	}

	async function loadFilesFromDrop(e) {
		$$invalidate(10, dragging = false);
		if (!e.dataTransfer?.files) return;
		await loadFiles(e.dataTransfer.files);
	}

	$$self.$$.on_mount.push(function () {
		if (root === undefined && !('root' in $$props || $$self.$$.bound[$$self.$$.props['root']])) {
			console.warn("<Upload> was created without expected prop 'root'");
		}
	});

	const writable_props = [
		'filetype',
		'dragging',
		'boundedheight',
		'center',
		'flex',
		'file_count',
		'disable_click',
		'root'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Upload> was created with unknown prop '${key}'`);
	});

	function drag_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragstart_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragend_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function drop_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			hidden_upload = $$value;
			$$invalidate(5, hidden_upload);
		});
	}

	$$self.$$set = $$props => {
		if ('filetype' in $$props) $$invalidate(0, filetype = $$props.filetype);
		if ('dragging' in $$props) $$invalidate(10, dragging = $$props.dragging);
		if ('boundedheight' in $$props) $$invalidate(1, boundedheight = $$props.boundedheight);
		if ('center' in $$props) $$invalidate(2, center = $$props.center);
		if ('flex' in $$props) $$invalidate(3, flex = $$props.flex);
		if ('file_count' in $$props) $$invalidate(4, file_count = $$props.file_count);
		if ('disable_click' in $$props) $$invalidate(11, disable_click = $$props.disable_click);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick,
		getContext,
		blobToBase64,
		normalise_file,
		default_upload_files: upload_files,
		upload_files: upload_files$1,
		filetype,
		dragging,
		boundedheight,
		center,
		flex,
		file_count,
		disable_click,
		root,
		hidden_upload,
		dispatch,
		updateDragging,
		openFileUpload,
		handle_upload,
		loadFiles,
		loadFilesFromUpload,
		loadFilesFromDrop
	});

	$$self.$inject_state = $$props => {
		if ('filetype' in $$props) $$invalidate(0, filetype = $$props.filetype);
		if ('dragging' in $$props) $$invalidate(10, dragging = $$props.dragging);
		if ('boundedheight' in $$props) $$invalidate(1, boundedheight = $$props.boundedheight);
		if ('center' in $$props) $$invalidate(2, center = $$props.center);
		if ('flex' in $$props) $$invalidate(3, flex = $$props.flex);
		if ('file_count' in $$props) $$invalidate(4, file_count = $$props.file_count);
		if ('disable_click' in $$props) $$invalidate(11, disable_click = $$props.disable_click);
		if ('root' in $$props) $$invalidate(12, root = $$props.root);
		if ('hidden_upload' in $$props) $$invalidate(5, hidden_upload = $$props.hidden_upload);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		filetype,
		boundedheight,
		center,
		flex,
		file_count,
		hidden_upload,
		updateDragging,
		openFileUpload,
		loadFilesFromUpload,
		loadFilesFromDrop,
		dragging,
		disable_click,
		root,
		$$scope,
		slots,
		drag_handler,
		dragstart_handler,
		dragend_handler,
		dragover_handler,
		dragenter_handler,
		dragleave_handler,
		drop_handler,
		input_binding
	];
}

class Upload extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			filetype: 0,
			dragging: 10,
			boundedheight: 1,
			center: 2,
			flex: 3,
			file_count: 4,
			disable_click: 11,
			root: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Upload",
			options,
			id: create_fragment.name
		});
	}

	get filetype() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set filetype(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dragging() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dragging(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get boundedheight() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set boundedheight(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get center() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set center(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flex() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flex(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get file_count() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set file_count(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disable_click() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disable_click(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Upload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Upload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Upload as U };
//# sourceMappingURL=Upload-ce511598.js.map
