import { SvelteComponentDev, init, safe_not_equal, dispatch_dev, validate_slots, svg_element, attr_dev, add_location, insert_dev, append_dev, noop, detach_dev, createEventDispatcher, element, space, text, create_component, src_url_equal, add_render_callback, toggle_class, mount_component, listen_dev, action_destroyer, prevent_default, stop_propagation, is_function, group_outros, transition_out, check_outros, transition_in, set_data_dev, prop_dev, destroy_component, run_all, bubble, binding_callbacks, globals, raf } from '../../../node/dev/svelte-internal.js';
import './index-ee06c8ff.js';
import { U as Undo } from './Undo-012722f8.js';
import { l as loaded } from './Player.svelte_svelte_type_style_lang-27651c97.js';

/* home/runner/work/gradio/gradio/js/icons/src/Maximise.svelte generated by Svelte v4.0.0 */

const file$4 = "home/runner/work/gradio/gradio/js/icons/src/Maximise.svelte";

function create_fragment$4(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3");
			add_location(path, file$4, 11, 1, 199);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$4, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Maximise', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Maximise> was created with unknown prop '${key}'`);
	});

	return [];
}

class Maximise extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Maximise",
			options,
			id: create_fragment$4.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Pause.svelte generated by Svelte v4.0.0 */

const file$3 = "home/runner/work/gradio/gradio/js/icons/src/Pause.svelte";

function create_fragment$3(ctx) {
	let svg;
	let rect0;
	let rect1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			rect0 = svg_element("rect");
			rect1 = svg_element("rect");
			attr_dev(rect0, "x", "6");
			attr_dev(rect0, "y", "4");
			attr_dev(rect0, "width", "4");
			attr_dev(rect0, "height", "16");
			add_location(rect0, file$3, 11, 1, 199);
			attr_dev(rect1, "x", "14");
			attr_dev(rect1, "y", "4");
			attr_dev(rect1, "width", "4");
			attr_dev(rect1, "height", "16");
			add_location(rect1, file$3, 12, 1, 243);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$3, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, rect0);
			append_dev(svg, rect1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Pause', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pause> was created with unknown prop '${key}'`);
	});

	return [];
}

class Pause extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pause",
			options,
			id: create_fragment$3.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Play.svelte generated by Svelte v4.0.0 */

const file$2 = "home/runner/work/gradio/gradio/js/icons/src/Play.svelte";

function create_fragment$2(ctx) {
	let svg;
	let polygon;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			attr_dev(polygon, "points", "5 3 19 12 5 21 5 3");
			add_location(polygon, file$2, 11, 1, 199);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			add_location(svg, file$2, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polygon);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Play', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Play> was created with unknown prop '${key}'`);
	});

	return [];
}

class Play extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Play",
			options,
			id: create_fragment$2.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Video.svelte generated by Svelte v4.0.0 */

const file$1 = "home/runner/work/gradio/gradio/js/icons/src/Video.svelte";

function create_fragment$1(ctx) {
	let svg;
	let polygon;
	let rect;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			rect = svg_element("rect");
			attr_dev(polygon, "points", "23 7 16 12 23 17 23 7");
			add_location(polygon, file$1, 12, 1, 230);
			attr_dev(rect, "x", "1");
			attr_dev(rect, "y", "5");
			attr_dev(rect, "width", "15");
			attr_dev(rect, "height", "14");
			attr_dev(rect, "rx", "2");
			attr_dev(rect, "ry", "2");
			add_location(rect, file$1, 13, 1, 274);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-video");
			add_location(svg, file$1, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polygon);
			append_dev(svg, rect);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	return [];
}

class Video extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video",
			options,
			id: create_fragment$1.name
		});
	}
}

/* home/runner/work/gradio/gradio/js/video/shared/Player.svelte generated by Svelte v4.0.0 */

const { isNaN: isNaN_1 } = globals;
const file = "home/runner/work/gradio/gradio/js/video/shared/Player.svelte";

// (97:4) {:else}
function create_else_block(ctx) {
	let pause;
	let current;
	pause = new Pause({ $$inline: true });

	const block = {
		c: function create() {
			create_component(pause.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(pause, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pause.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pause.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pause, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(97:4) {:else}",
		ctx
	});

	return block;
}

// (95:21) 
function create_if_block_1(ctx) {
	let play;
	let current;
	play = new Play({ $$inline: true });

	const block = {
		c: function create() {
			create_component(play.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(play, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(play.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(play.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(play, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(95:21) ",
		ctx
	});

	return block;
}

// (93:4) {#if time === duration}
function create_if_block(ctx) {
	let undo;
	let current;
	undo = new Undo({ $$inline: true });

	const block = {
		c: function create() {
			create_component(undo.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(undo, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(undo.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(undo.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(undo, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(93:4) {#if time === duration}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div3;
	let video_1;
	let track;
	let track_src_value;
	let video_1_src_value;
	let video_1_data_testid_value;
	let video_1_updating = false;
	let video_1_animationframe;
	let video_1_is_paused = true;
	let loaded_action;
	let t0;
	let div2;
	let div1;
	let span0;
	let current_block_type_index;
	let if_block;
	let t1;
	let span1;
	let t2_value = format(/*time*/ ctx[5]) + "";
	let t2;
	let t3;
	let t4_value = format(/*duration*/ ctx[6]) + "";
	let t4;
	let t5;
	let progress;
	let progress_value_value;
	let t6;
	let div0;
	let maximise;
	let current;
	let mounted;
	let dispose;

	function video_1_timeupdate_handler() {
		cancelAnimationFrame(video_1_animationframe);

		if (!video_1.paused) {
			video_1_animationframe = raf(video_1_timeupdate_handler);
			video_1_updating = true;
		}

		/*video_1_timeupdate_handler*/ ctx[16].call(video_1);
	}

	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*time*/ ctx[5] === /*duration*/ ctx[6]) return 0;
		if (/*paused*/ ctx[7]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	maximise = new Maximise({ $$inline: true });

	const block = {
		c: function create() {
			div3 = element("div");
			video_1 = element("video");
			track = element("track");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			span0 = element("span");
			if_block.c();
			t1 = space();
			span1 = element("span");
			t2 = text(t2_value);
			t3 = text(" / ");
			t4 = text(t4_value);
			t5 = space();
			progress = element("progress");
			t6 = space();
			div0 = element("div");
			create_component(maximise.$$.fragment);
			attr_dev(track, "kind", "captions");
			if (!src_url_equal(track.src, track_src_value = /*subtitle*/ ctx[1])) attr_dev(track, "src", track_src_value);
			track.default = true;
			add_location(track, file, 100, 2, 2023);
			if (!src_url_equal(video_1.src, video_1_src_value = /*src*/ ctx[0])) attr_dev(video_1, "src", video_1_src_value);
			attr_dev(video_1, "preload", "auto");
			attr_dev(video_1, "data-testid", video_1_data_testid_value = `${/*label*/ ctx[4]}-player`);
			attr_dev(video_1, "class", "s-XpTdTWS37xaa");
			if (/*duration*/ ctx[6] === void 0) add_render_callback(() => /*video_1_durationchange_handler*/ ctx[17].call(video_1));
			toggle_class(video_1, "mirror", /*mirror*/ ctx[2]);
			add_location(video_1, file, 85, 1, 1764);
			attr_dev(span0, "role", "button");
			attr_dev(span0, "tabindex", "0");
			attr_dev(span0, "class", "icon s-XpTdTWS37xaa");
			attr_dev(span0, "aria-label", "play-pause-replay-button");
			add_location(span0, file, 105, 3, 2132);
			attr_dev(span1, "class", "time s-XpTdTWS37xaa");
			add_location(span1, file, 122, 3, 2421);
			progress.value = progress_value_value = /*time*/ ctx[5] / /*duration*/ ctx[6] || 0;
			attr_dev(progress, "class", "s-XpTdTWS37xaa");
			add_location(progress, file, 127, 3, 2679);
			attr_dev(div0, "role", "button");
			attr_dev(div0, "tabindex", "0");
			attr_dev(div0, "class", "icon s-XpTdTWS37xaa");
			attr_dev(div0, "aria-label", "full-screen");
			add_location(div0, file, 134, 3, 2866);
			attr_dev(div1, "class", "inner s-XpTdTWS37xaa");
			add_location(div1, file, 104, 2, 2109);
			attr_dev(div2, "class", "controls s-XpTdTWS37xaa");
			add_location(div2, file, 103, 1, 2084);
			attr_dev(div3, "class", "wrap s-XpTdTWS37xaa");
			add_location(div3, file, 84, 0, 1744);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, video_1);
			append_dev(video_1, track);
			/*video_1_binding*/ ctx[19](video_1);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, span0);
			if_blocks[current_block_type_index].m(span0, null);
			append_dev(div1, t1);
			append_dev(div1, span1);
			append_dev(span1, t2);
			append_dev(span1, t3);
			append_dev(span1, t4);
			append_dev(div1, t5);
			append_dev(div1, progress);
			append_dev(div1, t6);
			append_dev(div1, div0);
			mount_component(maximise, div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(video_1, "click", /*play_pause*/ ctx[10], false, false, false, false),
					listen_dev(video_1, "play", /*play_handler*/ ctx[14], false, false, false, false),
					listen_dev(video_1, "pause", /*pause_handler*/ ctx[15], false, false, false, false),
					listen_dev(video_1, "ended", /*handle_end*/ ctx[12], false, false, false, false),
					listen_dev(video_1, "timeupdate", video_1_timeupdate_handler),
					listen_dev(video_1, "durationchange", /*video_1_durationchange_handler*/ ctx[17]),
					listen_dev(video_1, "play", /*video_1_play_pause_handler*/ ctx[18]),
					listen_dev(video_1, "pause", /*video_1_play_pause_handler*/ ctx[18]),
					action_destroyer(loaded_action = loaded.call(null, video_1, { autoplay: /*autoplay*/ ctx[3] })),
					listen_dev(span0, "click", /*play_pause*/ ctx[10], false, false, false, false),
					listen_dev(span0, "keydown", /*play_pause*/ ctx[10], false, false, false, false),
					listen_dev(progress, "mousemove", /*handleMove*/ ctx[9], false, false, false, false),
					listen_dev(progress, "touchmove", prevent_default(/*handleMove*/ ctx[9]), false, true, false, false),
					listen_dev(progress, "click", stop_propagation(prevent_default(/*handle_click*/ ctx[11])), false, true, true, false),
					listen_dev(div0, "click", /*open_full_screen*/ ctx[13], false, false, false, false),
					listen_dev(div0, "keypress", /*open_full_screen*/ ctx[13], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*subtitle*/ 2 && !src_url_equal(track.src, track_src_value = /*subtitle*/ ctx[1])) {
				attr_dev(track, "src", track_src_value);
			}

			if (!current || dirty & /*src*/ 1 && !src_url_equal(video_1.src, video_1_src_value = /*src*/ ctx[0])) {
				attr_dev(video_1, "src", video_1_src_value);
			}

			if (!current || dirty & /*label*/ 16 && video_1_data_testid_value !== (video_1_data_testid_value = `${/*label*/ ctx[4]}-player`)) {
				attr_dev(video_1, "data-testid", video_1_data_testid_value);
			}

			if (!video_1_updating && dirty & /*time*/ 32 && !isNaN_1(/*time*/ ctx[5])) {
				video_1.currentTime = /*time*/ ctx[5];
			}

			video_1_updating = false;

			if (dirty & /*paused*/ 128 && video_1_is_paused !== (video_1_is_paused = /*paused*/ ctx[7])) {
				video_1[video_1_is_paused ? "pause" : "play"]();
			}

			if (loaded_action && is_function(loaded_action.update) && dirty & /*autoplay*/ 8) loaded_action.update.call(null, { autoplay: /*autoplay*/ ctx[3] });

			if (!current || dirty & /*mirror*/ 4) {
				toggle_class(video_1, "mirror", /*mirror*/ ctx[2]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(span0, null);
			}

			if ((!current || dirty & /*time*/ 32) && t2_value !== (t2_value = format(/*time*/ ctx[5]) + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*duration*/ 64) && t4_value !== (t4_value = format(/*duration*/ ctx[6]) + "")) set_data_dev(t4, t4_value);

			if (!current || dirty & /*time, duration*/ 96 && progress_value_value !== (progress_value_value = /*time*/ ctx[5] / /*duration*/ ctx[6] || 0)) {
				prop_dev(progress, "value", progress_value_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(maximise.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(maximise.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div3);
			}

			/*video_1_binding*/ ctx[19](null);
			if_blocks[current_block_type_index].d();
			destroy_component(maximise);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function format(seconds) {
	if (isNaN(seconds) || !isFinite(seconds)) return "...";
	const minutes = Math.floor(seconds / 60);
	let _seconds = Math.floor(seconds % 60);
	if (_seconds < 10) _seconds = `0${_seconds}`;
	return `${minutes}:${_seconds}`;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Player', slots, []);
	let { src } = $$props;
	let { subtitle = null } = $$props;
	let { mirror } = $$props;
	let { autoplay } = $$props;
	let { label = "test" } = $$props;
	const dispatch = createEventDispatcher();
	let time = 0;
	let duration;
	let paused = true;
	let video;

	function handleMove(e) {
		if (!duration) return;

		if (e.type === "click") {
			handle_click(e);
			return;
		}

		if (e.type !== "touchmove" && !(e.buttons & 1)) return;

		const clientX = e.type === "touchmove"
		? e.touches[0].clientX
		: e.clientX;

		const { left, right } = e.currentTarget.getBoundingClientRect();
		$$invalidate(5, time = duration * (clientX - left) / (right - left));
	}

	async function play_pause() {
		if (document.fullscreenElement != video) {
			const isPlaying = video.currentTime > 0 && !video.paused && !video.ended && video.readyState > video.HAVE_CURRENT_DATA;

			if (!isPlaying) {
				await video.play();
			} else video.pause();
		}
	}

	function handle_click(e) {
		const { left, right } = e.currentTarget.getBoundingClientRect();
		$$invalidate(5, time = duration * (e.clientX - left) / (right - left));
	}

	function handle_end() {
		dispatch("stop");
		dispatch("end");
	}

	function open_full_screen() {
		video.requestFullscreen();
	}

	$$self.$$.on_mount.push(function () {
		if (src === undefined && !('src' in $$props || $$self.$$.bound[$$self.$$.props['src']])) {
			console.warn("<Player> was created without expected prop 'src'");
		}

		if (mirror === undefined && !('mirror' in $$props || $$self.$$.bound[$$self.$$.props['mirror']])) {
			console.warn("<Player> was created without expected prop 'mirror'");
		}

		if (autoplay === undefined && !('autoplay' in $$props || $$self.$$.bound[$$self.$$.props['autoplay']])) {
			console.warn("<Player> was created without expected prop 'autoplay'");
		}
	});

	const writable_props = ['src', 'subtitle', 'mirror', 'autoplay', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Player> was created with unknown prop '${key}'`);
	});

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	function video_1_timeupdate_handler() {
		time = this.currentTime;
		$$invalidate(5, time);
	}

	function video_1_durationchange_handler() {
		duration = this.duration;
		$$invalidate(6, duration);
	}

	function video_1_play_pause_handler() {
		paused = this.paused;
		$$invalidate(7, paused);
	}

	function video_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			video = $$value;
			$$invalidate(8, video);
		});
	}

	$$self.$$set = $$props => {
		if ('src' in $$props) $$invalidate(0, src = $$props.src);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('mirror' in $$props) $$invalidate(2, mirror = $$props.mirror);
		if ('autoplay' in $$props) $$invalidate(3, autoplay = $$props.autoplay);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Play,
		Pause,
		Maximise,
		Undo,
		loaded,
		src,
		subtitle,
		mirror,
		autoplay,
		label,
		dispatch,
		time,
		duration,
		paused,
		video,
		handleMove,
		play_pause,
		handle_click,
		format,
		handle_end,
		open_full_screen
	});

	$$self.$inject_state = $$props => {
		if ('src' in $$props) $$invalidate(0, src = $$props.src);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('mirror' in $$props) $$invalidate(2, mirror = $$props.mirror);
		if ('autoplay' in $$props) $$invalidate(3, autoplay = $$props.autoplay);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('time' in $$props) $$invalidate(5, time = $$props.time);
		if ('duration' in $$props) $$invalidate(6, duration = $$props.duration);
		if ('paused' in $$props) $$invalidate(7, paused = $$props.paused);
		if ('video' in $$props) $$invalidate(8, video = $$props.video);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		src,
		subtitle,
		mirror,
		autoplay,
		label,
		time,
		duration,
		paused,
		video,
		handleMove,
		play_pause,
		handle_click,
		handle_end,
		open_full_screen,
		play_handler,
		pause_handler,
		video_1_timeupdate_handler,
		video_1_durationchange_handler,
		video_1_play_pause_handler,
		video_1_binding
	];
}

class Player extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			src: 0,
			subtitle: 1,
			mirror: 2,
			autoplay: 3,
			label: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Player",
			options,
			id: create_fragment.name
		});
	}

	get src() {
		throw new Error("<Player>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Player>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subtitle() {
		throw new Error("<Player>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtitle(value) {
		throw new Error("<Player>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mirror() {
		throw new Error("<Player>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mirror(value) {
		throw new Error("<Player>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoplay() {
		throw new Error("<Player>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoplay(value) {
		throw new Error("<Player>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Player>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Player>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Player as P, Video as V };
//# sourceMappingURL=Player-e3b17fa3.js.map
