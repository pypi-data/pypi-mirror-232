[tool.poetry]
name = "purrgil"
version = "0.0.0"
description = "Project TBA."
authors = ["Kyle Finley <kyle@finley.sh>"]
maintainers = []
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/ITProKyle/purrgil"
repository = "https://github.com/ITProKyle/purrgil"
documentation = "https://github.com/ITProKyle/purrgil"
keywords = []
classifiers = [
  "Intended Audience :: Developers",
  "Topic :: Utilities",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
]
packages = [
  { include = "purrgil" },
]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.4.0"

[tool.poetry.group.lint.dependencies]
black = "^23.9.1"
ruff = "^0.0.291"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-sugar = "^0.9.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ["py311"]


[tool.coverage.report]
exclude_lines = [
  "cov: ignore",  # standard exclude comment
  "if TYPE_CHECKING:",  # excluded blocks
  "if __name__ == .__main__.:",
  "raise AssertionError",  # defensive exceptions
  "raise NotImplementedError",
  "from pathlib import Path",
  "@overload",
]
fail_under = 100
precision = 2
show_missing = true

[tool.coverage.run]
branch = false  # not correctly reported - https://github.com/nedbat/coveragepy/issues/605


[tool.doc8]
ignore = [
  "D001",  # Line too long
]


[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/.eggs",
  "**/.git",
  "**/.venv",
  "**/docs",
  "**/node_modules",
  "**/typings",
]
pythonPlatform = "All"
pythonVersion = "3.11"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"


[tool.pytest.ini_options]
addopts = [
  "--cov-config=pyproject.toml",
]
filterwarnings = [
  "ignore::pytest_mock.PytestMockWarning",
]
markers = [
  "wip: isolate tests currently being worked on.",
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]


[tool.ruff]  # https://beta.ruff.rs/docs/settings/#top-level
force-exclude = true
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "COM812",  # Trailing comma missing
  "D203",  # 1 blank line required before class docstring
  "D213",  # Multi-line docstring summary should start at the second line
  "D215",  # Section underline is over-indented
  "D403",  # First word of the first line should be capitalized
  "D406",  # Section name should end with a newline
  "D407",  # Missing dashed underline after section
  "D408",  # Section underline should be in the line following the section's name
  "D409",  # Section underline should match the length of its name
  "ERA001",  # Found commented-out code  # NOTE(kyle): incorrectly detects cspell
  "FIX002",  # Line contains TODO
  "TD003",  # Missing issue link on the line following this TODO
  "TID252",  # Relative imports from parent modules are banned
]
ignore-init-module-imports = true
line-length = 120
show-fixes = true
select = ["ALL"]
target-version = "py311"

  [tool.ruff.extend-per-file-ignores]
  "*.py" = [
    "PYI024",  # Use `typing.NamedTuple` instead of `collections.namedtuple` - should only apply to pyi
  ]

  [tool.ruff.flake8-type-checking]  # https://beta.ruff.rs/docs/settings/#flake8-type-checking
  runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "pydantic.BeforeValidator",
  ]

  [tool.ruff.pep8-naming]  # https://beta.ruff.rs/docs/settings/#pep8-naming
  classmethod-decorators = [
    "pydantic.field_validator",
    "pydantic.model_validator",
  ]

  [tool.ruff.pydocstyle]  # https://beta.ruff.rs/docs/settings/#pydocstyle
  convention = "google"
