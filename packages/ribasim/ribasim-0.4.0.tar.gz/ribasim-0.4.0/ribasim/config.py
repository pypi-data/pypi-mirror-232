# generated by datamodel-codegen:
#   filename:  Config.schema.json

from __future__ import annotations

from datetime import datetime
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Output(BaseModel):
    compression: str = "zstd"
    basin: str = "output/basin.arrow"
    flow: str = "output/flow.arrow"
    control: str = "output/control.arrow"
    outstate: Optional[str] = None
    compression_level: int = 6


class LevelBoundary(BaseModel):
    time: Optional[str] = None
    static: Optional[str] = None


class User(BaseModel):
    time: Optional[str] = None
    static: Optional[str] = None


class Pump(BaseModel):
    static: Optional[str] = None


class DiscreteControl(BaseModel):
    logic: Optional[str] = None
    condition: Optional[str] = None


class Solver(BaseModel):
    reltol: float = 0.001
    saveat: Union[List[float], float] = []
    maxiters: int = 1000000000
    autodiff: bool = True
    adaptive: bool = True
    algorithm: str = "QNDF"
    abstol: float = 1e-06
    dt: float = 0
    sparse: bool = True


class FlowBoundary(BaseModel):
    time: Optional[str] = None
    static: Optional[str] = None


class PidControl(BaseModel):
    time: Optional[str] = None
    static: Optional[str] = None


class FractionalFlow(BaseModel):
    static: Optional[str] = None


class ManningResistance(BaseModel):
    static: Optional[str] = None


class TabulatedRatingCurve(BaseModel):
    time: Optional[str] = None
    static: Optional[str] = None


class Logging(BaseModel):
    timing: bool = False
    verbosity: str = "info"


class Outlet(BaseModel):
    static: Optional[str] = None


class Terminal(BaseModel):
    static: Optional[str] = None


class Basin(BaseModel):
    profile: Optional[str] = None
    time: Optional[str] = None
    static: Optional[str] = None
    state: Optional[str] = None


class LinearResistance(BaseModel):
    static: Optional[str] = None


class Config(BaseModel):
    output: Output = Field(
        default_factory=lambda: Output.parse_obj(
            {
                "basin": "output/basin.arrow",
                "flow": "output/flow.arrow",
                "control": "output/control.arrow",
                "outstate": None,
                "compression": "zstd",
                "compression_level": 6,
            }
        )
    )
    starttime: datetime
    update_timestep: float = 86400
    input_dir: str = "."
    output_dir: str = "."
    level_boundary: LevelBoundary = Field(
        default_factory=lambda: LevelBoundary.parse_obj({"static": None, "time": None})
    )
    user: User = Field(
        default_factory=lambda: User.parse_obj({"static": None, "time": None})
    )
    pump: Pump = Field(default_factory=lambda: Pump.parse_obj({"static": None}))
    discrete_control: DiscreteControl = Field(
        default_factory=lambda: DiscreteControl.parse_obj(
            {"condition": None, "logic": None}
        )
    )
    solver: Solver = Field(
        default_factory=lambda: Solver.parse_obj(
            {
                "algorithm": "QNDF",
                "saveat": [],
                "adaptive": True,
                "dt": 0,
                "abstol": 1e-06,
                "reltol": 0.001,
                "maxiters": 1000000000,
                "sparse": True,
                "autodiff": True,
            }
        )
    )
    flow_boundary: FlowBoundary = Field(
        default_factory=lambda: FlowBoundary.parse_obj({"static": None, "time": None})
    )
    pid_control: PidControl = Field(
        default_factory=lambda: PidControl.parse_obj({"static": None, "time": None})
    )
    fractional_flow: FractionalFlow = Field(
        default_factory=lambda: FractionalFlow.parse_obj({"static": None})
    )
    relative_dir: str = "."
    endtime: datetime
    manning_resistance: ManningResistance = Field(
        default_factory=lambda: ManningResistance.parse_obj({"static": None})
    )
    tabulated_rating_curve: TabulatedRatingCurve = Field(
        default_factory=lambda: TabulatedRatingCurve.parse_obj(
            {"static": None, "time": None}
        )
    )
    logging: Logging = Field(
        default_factory=lambda: Logging.parse_obj(
            {"verbosity": {"level": 0}, "timing": False}
        )
    )
    outlet: Outlet = Field(default_factory=lambda: Outlet.parse_obj({"static": None}))
    geopackage: str
    terminal: Terminal = Field(
        default_factory=lambda: Terminal.parse_obj({"static": None})
    )
    basin: Basin = Field(
        default_factory=lambda: Basin.parse_obj(
            {"profile": None, "state": None, "static": None, "time": None}
        )
    )
    linear_resistance: LinearResistance = Field(
        default_factory=lambda: LinearResistance.parse_obj({"static": None})
    )
