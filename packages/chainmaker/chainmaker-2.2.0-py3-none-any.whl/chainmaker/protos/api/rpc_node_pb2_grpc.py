# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chainmaker.protos.common import request_pb2 as chainmaker_dot_protos_dot_common_dot_request__pb2
from chainmaker.protos.common import result_pb2 as chainmaker_dot_protos_dot_common_dot_result__pb2
from chainmaker.protos.config import \
    chainmaker_server_pb2 as chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2
from chainmaker.protos.config import local_config_pb2 as chainmaker_dot_protos_dot_config_dot_local__config__pb2
from chainmaker.protos.config import log_config_pb2 as chainmaker_dot_protos_dot_config_dot_log__config__pb2


class RpcNodeStub(object):
    """rpcNnode is the server API for
    """
    
    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendRequest = channel.unary_unary(
            '/api.RpcNode/SendRequest',
            request_serializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_common_dot_result__pb2.TxResponse.FromString,
        )
        self.Subscribe = channel.unary_stream(
            '/api.RpcNode/Subscribe',
            request_serializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_common_dot_result__pb2.SubscribeResult.FromString,
        )
        self.UpdateDebugConfig = channel.unary_unary(
            '/api.RpcNode/UpdateDebugConfig',
            request_serializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigResponse.FromString,
        )
        self.RefreshLogLevelsConfig = channel.unary_unary(
            '/api.RpcNode/RefreshLogLevelsConfig',
            request_serializer=chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsResponse.FromString,
        )
        self.GetChainMakerVersion = channel.unary_unary(
            '/api.RpcNode/GetChainMakerVersion',
            request_serializer=chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionResponse.FromString,
        )
        self.CheckNewBlockChainConfig = channel.unary_unary(
            '/api.RpcNode/CheckNewBlockChainConfig',
            request_serializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigRequest.SerializeToString,
            response_deserializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigResponse.FromString,
        )


class RpcNodeServicer(object):
    """rpcNnode is the server API for
    """
    
    def SendRequest(self, request, context):
        """processing transaction message requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def Subscribe(self, request, context):
        """processing requests for message subscription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def UpdateDebugConfig(self, request, context):
        """update debug status (development debugging)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def RefreshLogLevelsConfig(self, request, context):
        """refreshLogLevelsConfig
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def GetChainMakerVersion(self, request, context):
        """get chainmaker version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def CheckNewBlockChainConfig(self, request, context):
        """check chain configuration and load new chain dynamically
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SendRequest': grpc.unary_unary_rpc_method_handler(
            servicer.SendRequest,
            request_deserializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_common_dot_result__pb2.TxResponse.SerializeToString,
        ),
        'Subscribe': grpc.unary_stream_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_common_dot_result__pb2.SubscribeResult.SerializeToString,
        ),
        'UpdateDebugConfig': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateDebugConfig,
            request_deserializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigResponse.SerializeToString,
        ),
        'RefreshLogLevelsConfig': grpc.unary_unary_rpc_method_handler(
            servicer.RefreshLogLevelsConfig,
            request_deserializer=chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsResponse.SerializeToString,
        ),
        'GetChainMakerVersion': grpc.unary_unary_rpc_method_handler(
            servicer.GetChainMakerVersion,
            request_deserializer=chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionResponse.SerializeToString,
        ),
        'CheckNewBlockChainConfig': grpc.unary_unary_rpc_method_handler(
            servicer.CheckNewBlockChainConfig,
            request_deserializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigRequest.FromString,
            response_serializer=chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'api.RpcNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RpcNode(object):
    """rpcNnode is the server API for
    """
    
    @staticmethod
    def SendRequest(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.RpcNode/SendRequest',
                                             chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
                                             chainmaker_dot_protos_dot_common_dot_result__pb2.TxResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
    
    @staticmethod
    def Subscribe(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.RpcNode/Subscribe',
                                              chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
                                              chainmaker_dot_protos_dot_common_dot_result__pb2.SubscribeResult.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout,
                                              metadata)
    
    @staticmethod
    def UpdateDebugConfig(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.RpcNode/UpdateDebugConfig',
                                             chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigRequest.SerializeToString,
                                             chainmaker_dot_protos_dot_config_dot_local__config__pb2.DebugConfigResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
    
    @staticmethod
    def RefreshLogLevelsConfig(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.RpcNode/RefreshLogLevelsConfig',
                                             chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsRequest.SerializeToString,
                                             chainmaker_dot_protos_dot_config_dot_log__config__pb2.LogLevelsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
    
    @staticmethod
    def GetChainMakerVersion(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.RpcNode/GetChainMakerVersion',
                                             chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionRequest.SerializeToString,
                                             chainmaker_dot_protos_dot_config_dot_chainmaker__server__pb2.ChainMakerVersionResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
    
    @staticmethod
    def CheckNewBlockChainConfig(request,
                                 target,
                                 options=(),
                                 channel_credentials=None,
                                 call_credentials=None,
                                 insecure=False,
                                 compression=None,
                                 wait_for_ready=None,
                                 timeout=None,
                                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.RpcNode/CheckNewBlockChainConfig',
                                             chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigRequest.SerializeToString,
                                             chainmaker_dot_protos_dot_config_dot_local__config__pb2.CheckNewBlockChainConfigResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
