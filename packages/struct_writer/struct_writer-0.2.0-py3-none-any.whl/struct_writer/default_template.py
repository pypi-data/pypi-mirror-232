import tomllib


def default_template():
    template = """
[enum]
default = '''
/// ${value.description}
${enumeration.name}_${value.label},
'''
footer = '''
} ${enumeration.name}_t;
STATIC_ASSERT_TYPE_SIZE(${enumeration.name}_t, ${enumeration.size});

'''
header = '''
/// ${enumeration.display_name}
/// ${enumeration.description}
typedef enum ${enumeration.name}_e{
'''
valued = '''
/// ${value.description}
${enumeration.name}_${value.label} = 0x${value.value:0X},
'''

[file]
description = '''
/**
* @file
* @brief ${file.brief}
*
* ${file.description}
*
* @note This file is autogenerated using structured_api
*/
'''
footer = '''
#ifdef __cplusplus
}
#endif
#endif // ${out_file.stem.upper()}_H_
'''
header = '''
#ifndef ${out_file.stem.upper()}_H_
#define ${out_file.stem.upper()}_H_
#ifdef __cplusplus
extern "C" {
#endif

#include <static_assert.h>
#include <stdint.h>

'''

[group]
tag_name = '${group.name}_tag'

[structure]
footer = '''
} ${structure.name}_t;
STATIC_ASSERT_TYPE_SIZE(${structure.name}_t, ${structure.size});

'''
header = '''
/// ${structure.display_name}
/// ${structure.description}
typedef struct ${structure.name}_s{
'''
type_name = '${structure.name}_t'

[structure.members]
default = '''
/// ${member.description}
${member.type}_t ${member.name};
'''
empty = '''
/// Structure is intentionally empty (zero sized)
uint8_t empty[0];
'''
int = '''
/// ${member.description}
int${member.size*8}_t ${member.name};
'''
uint = '''
/// ${member.description}
uint${member.size*8}_t ${member.name};
'''
union.footer = '''
} ${union.name};
'''
union.header = '''
union {
'''

    """
    template = tomllib.loads(template)
    return template
