# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IsisVrfArgs', 'IsisVrf']

@pulumi.input_type
class IsisVrfArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 admin_state: Optional[pulumi.Input[str]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net: Optional[pulumi.Input[str]] = None,
                 passive_default: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IsisVrf resource.
        :param pulumi.Input[str] instance_name: IS-IS instance name.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[int] bandwidth_reference: The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
               metric. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] is_type: IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] metric_type: IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        :param pulumi.Input[int] mtu: The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
               bytes. - Range: `256`-`4352` - Default value: `1492`
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] net: Holds IS-IS domain NET (address) value.
        :param pulumi.Input[str] passive_default: IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        pulumi.set(__self__, "instance_name", instance_name)
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if authentication_check_l1 is not None:
            pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 is not None:
            pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key_l1 is not None:
            pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 is not None:
            pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type_l1 is not None:
            pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 is not None:
            pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if bandwidth_reference is not None:
            pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit is not None:
            pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if net is not None:
            pulumi.set(__self__, "net", net)
        if passive_default is not None:
            pulumi.set(__self__, "passive_default", passive_default)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        IS-IS instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @authentication_check_l1.setter
    def authentication_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l1", value)

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @authentication_check_l2.setter
    def authentication_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l2", value)

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @authentication_key_l1.setter
    def authentication_key_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l1", value)

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @authentication_key_l2.setter
    def authentication_key_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l2", value)

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @authentication_type_l1.setter
    def authentication_type_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l1", value)

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @authentication_type_l2.setter
    def authentication_type_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l2", value)

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> Optional[pulumi.Input[int]]:
        """
        The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
        metric. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @bandwidth_reference.setter
    def bandwidth_reference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_reference", value)

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @banwidth_reference_unit.setter
    def banwidth_reference_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banwidth_reference_unit", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
        bytes. - Range: `256`-`4352` - Default value: `1492`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def net(self) -> Optional[pulumi.Input[str]]:
        """
        Holds IS-IS domain NET (address) value.
        """
        return pulumi.get(self, "net")

    @net.setter
    def net(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net", value)

    @property
    @pulumi.getter(name="passiveDefault")
    def passive_default(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "passive_default")

    @passive_default.setter
    def passive_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_default", value)


@pulumi.input_type
class _IsisVrfState:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net: Optional[pulumi.Input[str]] = None,
                 passive_default: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IsisVrf resources.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[int] bandwidth_reference: The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
               metric. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: IS-IS instance name.
        :param pulumi.Input[str] is_type: IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] metric_type: IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        :param pulumi.Input[int] mtu: The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
               bytes. - Range: `256`-`4352` - Default value: `1492`
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] net: Holds IS-IS domain NET (address) value.
        :param pulumi.Input[str] passive_default: IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if authentication_check_l1 is not None:
            pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 is not None:
            pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key_l1 is not None:
            pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 is not None:
            pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type_l1 is not None:
            pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 is not None:
            pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if bandwidth_reference is not None:
            pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit is not None:
            pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if net is not None:
            pulumi.set(__self__, "net", net)
        if passive_default is not None:
            pulumi.set(__self__, "passive_default", passive_default)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @authentication_check_l1.setter
    def authentication_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l1", value)

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @authentication_check_l2.setter
    def authentication_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l2", value)

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @authentication_key_l1.setter
    def authentication_key_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l1", value)

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @authentication_key_l2.setter
    def authentication_key_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l2", value)

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @authentication_type_l1.setter
    def authentication_type_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l1", value)

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @authentication_type_l2.setter
    def authentication_type_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l2", value)

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> Optional[pulumi.Input[int]]:
        """
        The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
        metric. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @bandwidth_reference.setter
    def bandwidth_reference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_reference", value)

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @banwidth_reference_unit.setter
    def banwidth_reference_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banwidth_reference_unit", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
        bytes. - Range: `256`-`4352` - Default value: `1492`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def net(self) -> Optional[pulumi.Input[str]]:
        """
        Holds IS-IS domain NET (address) value.
        """
        return pulumi.get(self, "net")

    @net.setter
    def net(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net", value)

    @property
    @pulumi.getter(name="passiveDefault")
    def passive_default(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "passive_default")

    @passive_default.setter
    def passive_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_default", value)


class IsisVrf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net: Optional[pulumi.Input[str]] = None,
                 passive_default: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the IS-IS VRF configuration.

        - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.IsisVrf("example",
            admin_state="enabled",
            authentication_check_l1=False,
            authentication_check_l2=False,
            authentication_key_l1="",
            authentication_key_l2="",
            authentication_type_l1="unknown",
            authentication_type_l2="unknown",
            bandwidth_reference=400000,
            banwidth_reference_unit="mbps",
            instance_name="ISIS1",
            is_type="l2",
            metric_type="wide",
            mtu=2000,
            net="49.0001.0000.0000.3333.00",
            passive_default="l12")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/isisVrf:IsisVrf example "sys/isis/inst-[ISIS1]/dom-[default]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[int] bandwidth_reference: The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
               metric. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: IS-IS instance name.
        :param pulumi.Input[str] is_type: IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] metric_type: IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        :param pulumi.Input[int] mtu: The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
               bytes. - Range: `256`-`4352` - Default value: `1492`
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] net: Holds IS-IS domain NET (address) value.
        :param pulumi.Input[str] passive_default: IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsisVrfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the IS-IS VRF configuration.

        - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.IsisVrf("example",
            admin_state="enabled",
            authentication_check_l1=False,
            authentication_check_l2=False,
            authentication_key_l1="",
            authentication_key_l2="",
            authentication_type_l1="unknown",
            authentication_type_l2="unknown",
            bandwidth_reference=400000,
            banwidth_reference_unit="mbps",
            instance_name="ISIS1",
            is_type="l2",
            metric_type="wide",
            mtu=2000,
            net="49.0001.0000.0000.3333.00",
            passive_default="l12")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/isisVrf:IsisVrf example "sys/isis/inst-[ISIS1]/dom-[default]"
        ```

        :param str resource_name: The name of the resource.
        :param IsisVrfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsisVrfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net: Optional[pulumi.Input[str]] = None,
                 passive_default: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsisVrfArgs.__new__(IsisVrfArgs)

            __props__.__dict__["admin_state"] = admin_state
            __props__.__dict__["authentication_check_l1"] = authentication_check_l1
            __props__.__dict__["authentication_check_l2"] = authentication_check_l2
            __props__.__dict__["authentication_key_l1"] = authentication_key_l1
            __props__.__dict__["authentication_key_l2"] = authentication_key_l2
            __props__.__dict__["authentication_type_l1"] = authentication_type_l1
            __props__.__dict__["authentication_type_l2"] = authentication_type_l2
            __props__.__dict__["bandwidth_reference"] = bandwidth_reference
            __props__.__dict__["banwidth_reference_unit"] = banwidth_reference_unit
            __props__.__dict__["device"] = device
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["is_type"] = is_type
            __props__.__dict__["metric_type"] = metric_type
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["net"] = net
            __props__.__dict__["passive_default"] = passive_default
        super(IsisVrf, __self__).__init__(
            'nxos:index/isisVrf:IsisVrf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state: Optional[pulumi.Input[str]] = None,
            authentication_check_l1: Optional[pulumi.Input[bool]] = None,
            authentication_check_l2: Optional[pulumi.Input[bool]] = None,
            authentication_key_l1: Optional[pulumi.Input[str]] = None,
            authentication_key_l2: Optional[pulumi.Input[str]] = None,
            authentication_type_l1: Optional[pulumi.Input[str]] = None,
            authentication_type_l2: Optional[pulumi.Input[str]] = None,
            bandwidth_reference: Optional[pulumi.Input[int]] = None,
            banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            is_type: Optional[pulumi.Input[str]] = None,
            metric_type: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            net: Optional[pulumi.Input[str]] = None,
            passive_default: Optional[pulumi.Input[str]] = None) -> 'IsisVrf':
        """
        Get an existing IsisVrf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[int] bandwidth_reference: The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
               metric. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: IS-IS instance name.
        :param pulumi.Input[str] is_type: IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] metric_type: IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        :param pulumi.Input[int] mtu: The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
               bytes. - Range: `256`-`4352` - Default value: `1492`
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] net: Holds IS-IS domain NET (address) value.
        :param pulumi.Input[str] passive_default: IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsisVrfState.__new__(_IsisVrfState)

        __props__.__dict__["admin_state"] = admin_state
        __props__.__dict__["authentication_check_l1"] = authentication_check_l1
        __props__.__dict__["authentication_check_l2"] = authentication_check_l2
        __props__.__dict__["authentication_key_l1"] = authentication_key_l1
        __props__.__dict__["authentication_key_l2"] = authentication_key_l2
        __props__.__dict__["authentication_type_l1"] = authentication_type_l1
        __props__.__dict__["authentication_type_l2"] = authentication_type_l2
        __props__.__dict__["bandwidth_reference"] = bandwidth_reference
        __props__.__dict__["banwidth_reference_unit"] = banwidth_reference_unit
        __props__.__dict__["device"] = device
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["is_type"] = is_type
        __props__.__dict__["metric_type"] = metric_type
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["net"] = net
        __props__.__dict__["passive_default"] = passive_default
        return IsisVrf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> pulumi.Output[str]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> pulumi.Output[bool]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> pulumi.Output[bool]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> pulumi.Output[str]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> pulumi.Output[str]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> pulumi.Output[int]:
        """
        The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost
        metric. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> pulumi.Output[str]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        IS-IS instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> pulumi.Output[str]:
        """
        IS-IS domain type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "is_type")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Output[str]:
        """
        IS-IS metric type. - Choices: `narrow`, `wide`, `transition` - Default value: `wide`
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352
        bytes. - Range: `256`-`4352` - Default value: `1492`
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def net(self) -> pulumi.Output[Optional[str]]:
        """
        Holds IS-IS domain NET (address) value.
        """
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="passiveDefault")
    def passive_default(self) -> pulumi.Output[str]:
        """
        IS-IS Domain passive-interface default level. - Choices: `l1`, `l2`, `l12`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "passive_default")

