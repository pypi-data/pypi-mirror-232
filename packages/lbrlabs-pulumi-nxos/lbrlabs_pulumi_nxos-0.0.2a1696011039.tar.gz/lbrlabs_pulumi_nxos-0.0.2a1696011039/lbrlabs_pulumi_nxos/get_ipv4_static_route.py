# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetIpv4StaticRouteResult',
    'AwaitableGetIpv4StaticRouteResult',
    'get_ipv4_static_route',
    'get_ipv4_static_route_output',
]

@pulumi.output_type
class GetIpv4StaticRouteResult:
    """
    A collection of values returned by getIpv4StaticRoute.
    """
    def __init__(__self__, device=None, id=None, next_hops=None, prefix=None, vrf_name=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if next_hops and not isinstance(next_hops, list):
            raise TypeError("Expected argument 'next_hops' to be a list")
        pulumi.set(__self__, "next_hops", next_hops)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if vrf_name and not isinstance(vrf_name, str):
            raise TypeError("Expected argument 'vrf_name' to be a str")
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetIpv4StaticRouteNextHopResult']:
        """
        List of next hops.
        """
        return pulumi.get(self, "next_hops")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")


class AwaitableGetIpv4StaticRouteResult(GetIpv4StaticRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpv4StaticRouteResult(
            device=self.device,
            id=self.id,
            next_hops=self.next_hops,
            prefix=self.prefix,
            vrf_name=self.vrf_name)


def get_ipv4_static_route(device: Optional[str] = None,
                          prefix: Optional[str] = None,
                          vrf_name: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpv4StaticRouteResult:
    """
    This data source can read an IPv4 static route.

    - API Documentation: [ipv4Route](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Route/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_static_route(prefix="1.1.1.0/24",
        vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str prefix: Prefix.
    :param str vrf_name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['prefix'] = prefix
    __args__['vrfName'] = vrf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIpv4StaticRoute:getIpv4StaticRoute', __args__, opts=opts, typ=GetIpv4StaticRouteResult).value

    return AwaitableGetIpv4StaticRouteResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        next_hops=pulumi.get(__ret__, 'next_hops'),
        prefix=pulumi.get(__ret__, 'prefix'),
        vrf_name=pulumi.get(__ret__, 'vrf_name'))


@_utilities.lift_output_func(get_ipv4_static_route)
def get_ipv4_static_route_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                 prefix: Optional[pulumi.Input[str]] = None,
                                 vrf_name: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpv4StaticRouteResult]:
    """
    This data source can read an IPv4 static route.

    - API Documentation: [ipv4Route](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Route/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_static_route(prefix="1.1.1.0/24",
        vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str prefix: Prefix.
    :param str vrf_name: VRF name.
    """
    ...
