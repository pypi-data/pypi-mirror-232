# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIsisVrfResult',
    'AwaitableGetIsisVrfResult',
    'get_isis_vrf',
    'get_isis_vrf_output',
]

@pulumi.output_type
class GetIsisVrfResult:
    """
    A collection of values returned by getIsisVrf.
    """
    def __init__(__self__, admin_state=None, authentication_check_l1=None, authentication_check_l2=None, authentication_key_l1=None, authentication_key_l2=None, authentication_type_l1=None, authentication_type_l2=None, bandwidth_reference=None, banwidth_reference_unit=None, device=None, id=None, instance_name=None, is_type=None, metric_type=None, mtu=None, name=None, net=None, passive_default=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if authentication_check_l1 and not isinstance(authentication_check_l1, bool):
            raise TypeError("Expected argument 'authentication_check_l1' to be a bool")
        pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 and not isinstance(authentication_check_l2, bool):
            raise TypeError("Expected argument 'authentication_check_l2' to be a bool")
        pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key_l1 and not isinstance(authentication_key_l1, str):
            raise TypeError("Expected argument 'authentication_key_l1' to be a str")
        pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 and not isinstance(authentication_key_l2, str):
            raise TypeError("Expected argument 'authentication_key_l2' to be a str")
        pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type_l1 and not isinstance(authentication_type_l1, str):
            raise TypeError("Expected argument 'authentication_type_l1' to be a str")
        pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 and not isinstance(authentication_type_l2, str):
            raise TypeError("Expected argument 'authentication_type_l2' to be a str")
        pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if bandwidth_reference and not isinstance(bandwidth_reference, int):
            raise TypeError("Expected argument 'bandwidth_reference' to be a int")
        pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit and not isinstance(banwidth_reference_unit, str):
            raise TypeError("Expected argument 'banwidth_reference_unit' to be a str")
        pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if is_type and not isinstance(is_type, str):
            raise TypeError("Expected argument 'is_type' to be a str")
        pulumi.set(__self__, "is_type", is_type)
        if metric_type and not isinstance(metric_type, str):
            raise TypeError("Expected argument 'metric_type' to be a str")
        pulumi.set(__self__, "metric_type", metric_type)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if net and not isinstance(net, str):
            raise TypeError("Expected argument 'net' to be a str")
        pulumi.set(__self__, "net", net)
        if passive_default and not isinstance(passive_default, str):
            raise TypeError("Expected argument 'passive_default' to be a str")
        pulumi.set(__self__, "passive_default", passive_default)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        Administrative state.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> bool:
        """
        Authentication Check for ISIS on Level-1.
        """
        return pulumi.get(self, "authentication_check_l1")

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> bool:
        """
        Authentication Check for ISIS on Level-2.
        """
        return pulumi.get(self, "authentication_check_l2")

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> str:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> str:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> str:
        """
        IS-IS Authentication-Type for Level-1.
        """
        return pulumi.get(self, "authentication_type_l1")

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> str:
        """
        IS-IS Authentication-Type for Level-2.
        """
        return pulumi.get(self, "authentication_type_l2")

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> int:
        """
        The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost metric.
        """
        return pulumi.get(self, "bandwidth_reference")

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> str:
        """
        Bandwidth reference unit.
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        IS-IS instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> str:
        """
        IS-IS domain type.
        """
        return pulumi.get(self, "is_type")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        IS-IS metric type.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352 bytes.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def net(self) -> str:
        """
        Holds IS-IS domain NET (address) value.
        """
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="passiveDefault")
    def passive_default(self) -> str:
        """
        IS-IS Domain passive-interface default level.
        """
        return pulumi.get(self, "passive_default")


class AwaitableGetIsisVrfResult(GetIsisVrfResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsisVrfResult(
            admin_state=self.admin_state,
            authentication_check_l1=self.authentication_check_l1,
            authentication_check_l2=self.authentication_check_l2,
            authentication_key_l1=self.authentication_key_l1,
            authentication_key_l2=self.authentication_key_l2,
            authentication_type_l1=self.authentication_type_l1,
            authentication_type_l2=self.authentication_type_l2,
            bandwidth_reference=self.bandwidth_reference,
            banwidth_reference_unit=self.banwidth_reference_unit,
            device=self.device,
            id=self.id,
            instance_name=self.instance_name,
            is_type=self.is_type,
            metric_type=self.metric_type,
            mtu=self.mtu,
            name=self.name,
            net=self.net,
            passive_default=self.passive_default)


def get_isis_vrf(device: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsisVrfResult:
    """
    This data source can read the IS-IS VRF configuration.

    - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_isis_vrf(instance_name="ISIS1",
        name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: IS-IS instance name.
    :param str name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['instanceName'] = instance_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIsisVrf:getIsisVrf', __args__, opts=opts, typ=GetIsisVrfResult).value

    return AwaitableGetIsisVrfResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        authentication_check_l1=pulumi.get(__ret__, 'authentication_check_l1'),
        authentication_check_l2=pulumi.get(__ret__, 'authentication_check_l2'),
        authentication_key_l1=pulumi.get(__ret__, 'authentication_key_l1'),
        authentication_key_l2=pulumi.get(__ret__, 'authentication_key_l2'),
        authentication_type_l1=pulumi.get(__ret__, 'authentication_type_l1'),
        authentication_type_l2=pulumi.get(__ret__, 'authentication_type_l2'),
        bandwidth_reference=pulumi.get(__ret__, 'bandwidth_reference'),
        banwidth_reference_unit=pulumi.get(__ret__, 'banwidth_reference_unit'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        is_type=pulumi.get(__ret__, 'is_type'),
        metric_type=pulumi.get(__ret__, 'metric_type'),
        mtu=pulumi.get(__ret__, 'mtu'),
        name=pulumi.get(__ret__, 'name'),
        net=pulumi.get(__ret__, 'net'),
        passive_default=pulumi.get(__ret__, 'passive_default'))


@_utilities.lift_output_func(get_isis_vrf)
def get_isis_vrf_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                        instance_name: Optional[pulumi.Input[str]] = None,
                        name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIsisVrfResult]:
    """
    This data source can read the IS-IS VRF configuration.

    - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_isis_vrf(instance_name="ISIS1",
        name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: IS-IS instance name.
    :param str name: VRF name.
    """
    ...
