# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Ipv4StaticRouteArgs', 'Ipv4StaticRoute']

@pulumi.input_type
class Ipv4StaticRouteArgs:
    def __init__(__self__, *,
                 next_hops: pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]],
                 prefix: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ipv4StaticRoute resource.
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]] next_hops: List of next hops.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] vrf_name: VRF name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]]:
        """
        List of next hops.
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]]):
        pulumi.set(self, "next_hops", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


@pulumi.input_type
class _Ipv4StaticRouteState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipv4StaticRoute resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]] next_hops: List of next hops.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]]]:
        """
        List of next hops.
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


class Ipv4StaticRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4StaticRouteNextHopArgs']]]]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage an IPv4 static route.

        - API Documentation: [ipv4Route](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Route/)

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4StaticRoute:Ipv4StaticRoute example "sys/ipv4/inst/dom-[default]/rt-[1.1.1.0/24]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4StaticRouteNextHopArgs']]]] next_hops: List of next hops.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ipv4StaticRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage an IPv4 static route.

        - API Documentation: [ipv4Route](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Route/)

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4StaticRoute:Ipv4StaticRoute example "sys/ipv4/inst/dom-[default]/rt-[1.1.1.0/24]"
        ```

        :param str resource_name: The name of the resource.
        :param Ipv4StaticRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ipv4StaticRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4StaticRouteNextHopArgs']]]]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ipv4StaticRouteArgs.__new__(Ipv4StaticRouteArgs)

            __props__.__dict__["device"] = device
            if next_hops is None and not opts.urn:
                raise TypeError("Missing required property 'next_hops'")
            __props__.__dict__["next_hops"] = next_hops
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            if vrf_name is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_name'")
            __props__.__dict__["vrf_name"] = vrf_name
        super(Ipv4StaticRoute, __self__).__init__(
            'nxos:index/ipv4StaticRoute:Ipv4StaticRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            next_hops: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4StaticRouteNextHopArgs']]]]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            vrf_name: Optional[pulumi.Input[str]] = None) -> 'Ipv4StaticRoute':
        """
        Get an existing Ipv4StaticRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4StaticRouteNextHopArgs']]]] next_hops: List of next hops.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ipv4StaticRouteState.__new__(_Ipv4StaticRouteState)

        __props__.__dict__["device"] = device
        __props__.__dict__["next_hops"] = next_hops
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["vrf_name"] = vrf_name
        return Ipv4StaticRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> pulumi.Output[Sequence['outputs.Ipv4StaticRouteNextHop']]:
        """
        List of next hops.
        """
        return pulumi.get(self, "next_hops")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

