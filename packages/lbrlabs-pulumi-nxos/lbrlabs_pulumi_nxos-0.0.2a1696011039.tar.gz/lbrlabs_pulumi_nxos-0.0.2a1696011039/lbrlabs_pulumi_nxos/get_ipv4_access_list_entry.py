# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIpv4AccessListEntryResult',
    'AwaitableGetIpv4AccessListEntryResult',
    'get_ipv4_access_list_entry',
    'get_ipv4_access_list_entry_output',
]

@pulumi.output_type
class GetIpv4AccessListEntryResult:
    """
    A collection of values returned by getIpv4AccessListEntry.
    """
    def __init__(__self__, ack=None, action=None, destination_address_group=None, destination_port1=None, destination_port2=None, destination_port_group=None, destination_port_mask=None, destination_port_operator=None, destination_prefix=None, destination_prefix_length=None, destination_prefix_mask=None, device=None, dscp=None, est=None, fin=None, fragment=None, http_option_type=None, icmp_code=None, icmp_type=None, id=None, logging=None, name=None, packet_length1=None, packet_length2=None, packet_length_operator=None, precedence=None, protocol=None, protocol_mask=None, psh=None, redirect=None, remark=None, rev=None, rst=None, sequence_number=None, source_address_group=None, source_port1=None, source_port2=None, source_port_group=None, source_port_mask=None, source_port_operator=None, source_prefix=None, source_prefix_length=None, source_prefix_mask=None, syn=None, time_range=None, ttl=None, urg=None, vlan=None, vni=None):
        if ack and not isinstance(ack, bool):
            raise TypeError("Expected argument 'ack' to be a bool")
        pulumi.set(__self__, "ack", ack)
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if destination_address_group and not isinstance(destination_address_group, str):
            raise TypeError("Expected argument 'destination_address_group' to be a str")
        pulumi.set(__self__, "destination_address_group", destination_address_group)
        if destination_port1 and not isinstance(destination_port1, str):
            raise TypeError("Expected argument 'destination_port1' to be a str")
        pulumi.set(__self__, "destination_port1", destination_port1)
        if destination_port2 and not isinstance(destination_port2, str):
            raise TypeError("Expected argument 'destination_port2' to be a str")
        pulumi.set(__self__, "destination_port2", destination_port2)
        if destination_port_group and not isinstance(destination_port_group, str):
            raise TypeError("Expected argument 'destination_port_group' to be a str")
        pulumi.set(__self__, "destination_port_group", destination_port_group)
        if destination_port_mask and not isinstance(destination_port_mask, str):
            raise TypeError("Expected argument 'destination_port_mask' to be a str")
        pulumi.set(__self__, "destination_port_mask", destination_port_mask)
        if destination_port_operator and not isinstance(destination_port_operator, str):
            raise TypeError("Expected argument 'destination_port_operator' to be a str")
        pulumi.set(__self__, "destination_port_operator", destination_port_operator)
        if destination_prefix and not isinstance(destination_prefix, str):
            raise TypeError("Expected argument 'destination_prefix' to be a str")
        pulumi.set(__self__, "destination_prefix", destination_prefix)
        if destination_prefix_length and not isinstance(destination_prefix_length, str):
            raise TypeError("Expected argument 'destination_prefix_length' to be a str")
        pulumi.set(__self__, "destination_prefix_length", destination_prefix_length)
        if destination_prefix_mask and not isinstance(destination_prefix_mask, str):
            raise TypeError("Expected argument 'destination_prefix_mask' to be a str")
        pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if dscp and not isinstance(dscp, int):
            raise TypeError("Expected argument 'dscp' to be a int")
        pulumi.set(__self__, "dscp", dscp)
        if est and not isinstance(est, bool):
            raise TypeError("Expected argument 'est' to be a bool")
        pulumi.set(__self__, "est", est)
        if fin and not isinstance(fin, bool):
            raise TypeError("Expected argument 'fin' to be a bool")
        pulumi.set(__self__, "fin", fin)
        if fragment and not isinstance(fragment, bool):
            raise TypeError("Expected argument 'fragment' to be a bool")
        pulumi.set(__self__, "fragment", fragment)
        if http_option_type and not isinstance(http_option_type, str):
            raise TypeError("Expected argument 'http_option_type' to be a str")
        pulumi.set(__self__, "http_option_type", http_option_type)
        if icmp_code and not isinstance(icmp_code, int):
            raise TypeError("Expected argument 'icmp_code' to be a int")
        pulumi.set(__self__, "icmp_code", icmp_code)
        if icmp_type and not isinstance(icmp_type, int):
            raise TypeError("Expected argument 'icmp_type' to be a int")
        pulumi.set(__self__, "icmp_type", icmp_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if packet_length1 and not isinstance(packet_length1, str):
            raise TypeError("Expected argument 'packet_length1' to be a str")
        pulumi.set(__self__, "packet_length1", packet_length1)
        if packet_length2 and not isinstance(packet_length2, str):
            raise TypeError("Expected argument 'packet_length2' to be a str")
        pulumi.set(__self__, "packet_length2", packet_length2)
        if packet_length_operator and not isinstance(packet_length_operator, str):
            raise TypeError("Expected argument 'packet_length_operator' to be a str")
        pulumi.set(__self__, "packet_length_operator", packet_length_operator)
        if precedence and not isinstance(precedence, str):
            raise TypeError("Expected argument 'precedence' to be a str")
        pulumi.set(__self__, "precedence", precedence)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if protocol_mask and not isinstance(protocol_mask, str):
            raise TypeError("Expected argument 'protocol_mask' to be a str")
        pulumi.set(__self__, "protocol_mask", protocol_mask)
        if psh and not isinstance(psh, bool):
            raise TypeError("Expected argument 'psh' to be a bool")
        pulumi.set(__self__, "psh", psh)
        if redirect and not isinstance(redirect, str):
            raise TypeError("Expected argument 'redirect' to be a str")
        pulumi.set(__self__, "redirect", redirect)
        if remark and not isinstance(remark, str):
            raise TypeError("Expected argument 'remark' to be a str")
        pulumi.set(__self__, "remark", remark)
        if rev and not isinstance(rev, bool):
            raise TypeError("Expected argument 'rev' to be a bool")
        pulumi.set(__self__, "rev", rev)
        if rst and not isinstance(rst, bool):
            raise TypeError("Expected argument 'rst' to be a bool")
        pulumi.set(__self__, "rst", rst)
        if sequence_number and not isinstance(sequence_number, int):
            raise TypeError("Expected argument 'sequence_number' to be a int")
        pulumi.set(__self__, "sequence_number", sequence_number)
        if source_address_group and not isinstance(source_address_group, str):
            raise TypeError("Expected argument 'source_address_group' to be a str")
        pulumi.set(__self__, "source_address_group", source_address_group)
        if source_port1 and not isinstance(source_port1, str):
            raise TypeError("Expected argument 'source_port1' to be a str")
        pulumi.set(__self__, "source_port1", source_port1)
        if source_port2 and not isinstance(source_port2, str):
            raise TypeError("Expected argument 'source_port2' to be a str")
        pulumi.set(__self__, "source_port2", source_port2)
        if source_port_group and not isinstance(source_port_group, str):
            raise TypeError("Expected argument 'source_port_group' to be a str")
        pulumi.set(__self__, "source_port_group", source_port_group)
        if source_port_mask and not isinstance(source_port_mask, str):
            raise TypeError("Expected argument 'source_port_mask' to be a str")
        pulumi.set(__self__, "source_port_mask", source_port_mask)
        if source_port_operator and not isinstance(source_port_operator, str):
            raise TypeError("Expected argument 'source_port_operator' to be a str")
        pulumi.set(__self__, "source_port_operator", source_port_operator)
        if source_prefix and not isinstance(source_prefix, str):
            raise TypeError("Expected argument 'source_prefix' to be a str")
        pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_length and not isinstance(source_prefix_length, str):
            raise TypeError("Expected argument 'source_prefix_length' to be a str")
        pulumi.set(__self__, "source_prefix_length", source_prefix_length)
        if source_prefix_mask and not isinstance(source_prefix_mask, str):
            raise TypeError("Expected argument 'source_prefix_mask' to be a str")
        pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        if syn and not isinstance(syn, bool):
            raise TypeError("Expected argument 'syn' to be a bool")
        pulumi.set(__self__, "syn", syn)
        if time_range and not isinstance(time_range, str):
            raise TypeError("Expected argument 'time_range' to be a str")
        pulumi.set(__self__, "time_range", time_range)
        if ttl and not isinstance(ttl, int):
            raise TypeError("Expected argument 'ttl' to be a int")
        pulumi.set(__self__, "ttl", ttl)
        if urg and not isinstance(urg, bool):
            raise TypeError("Expected argument 'urg' to be a bool")
        pulumi.set(__self__, "urg", urg)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)
        if vni and not isinstance(vni, str):
            raise TypeError("Expected argument 'vni' to be a str")
        pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter
    def ack(self) -> bool:
        """
        Match TCP ACK flag.
        """
        return pulumi.get(self, "ack")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="destinationAddressGroup")
    def destination_address_group(self) -> str:
        """
        Destination address group.
        """
        return pulumi.get(self, "destination_address_group")

    @property
    @pulumi.getter(name="destinationPort1")
    def destination_port1(self) -> str:
        """
        First destination port number or name.
        """
        return pulumi.get(self, "destination_port1")

    @property
    @pulumi.getter(name="destinationPort2")
    def destination_port2(self) -> str:
        """
        Second destination port number or name.
        """
        return pulumi.get(self, "destination_port2")

    @property
    @pulumi.getter(name="destinationPortGroup")
    def destination_port_group(self) -> str:
        """
        Destination port group.
        """
        return pulumi.get(self, "destination_port_group")

    @property
    @pulumi.getter(name="destinationPortMask")
    def destination_port_mask(self) -> str:
        """
        Destination port mask number or name.
        """
        return pulumi.get(self, "destination_port_mask")

    @property
    @pulumi.getter(name="destinationPortOperator")
    def destination_port_operator(self) -> str:
        """
        Destination port operator.
        """
        return pulumi.get(self, "destination_port_operator")

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> str:
        """
        Destination prefix.
        """
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="destinationPrefixLength")
    def destination_prefix_length(self) -> str:
        """
        Destination prefix length.
        """
        return pulumi.get(self, "destination_prefix_length")

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> str:
        """
        Destination prefix mask.
        """
        return pulumi.get(self, "destination_prefix_mask")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        Match DSCP.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def est(self) -> bool:
        """
        Match TCP EST flag.
        """
        return pulumi.get(self, "est")

    @property
    @pulumi.getter
    def fin(self) -> bool:
        """
        Match TCP FIN flag.
        """
        return pulumi.get(self, "fin")

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        """
        Match non-initial fragment.
        """
        return pulumi.get(self, "fragment")

    @property
    @pulumi.getter(name="httpOptionType")
    def http_option_type(self) -> str:
        """
        HTTP option method.
        """
        return pulumi.get(self, "http_option_type")

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> int:
        """
        ICMP code.
        """
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> int:
        """
        ICMP type.
        """
        return pulumi.get(self, "icmp_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        """
        Log matches against ACL entry.
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Access list name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLength1")
    def packet_length1(self) -> str:
        """
        First packet length. Either `invalid` or a number between 19 and 9210.
        """
        return pulumi.get(self, "packet_length1")

    @property
    @pulumi.getter(name="packetLength2")
    def packet_length2(self) -> str:
        """
        Second packet length. Either `invalid` or a number between 19 and 9210.
        """
        return pulumi.get(self, "packet_length2")

    @property
    @pulumi.getter(name="packetLengthOperator")
    def packet_length_operator(self) -> str:
        """
        Packet length operator.
        """
        return pulumi.get(self, "packet_length_operator")

    @property
    @pulumi.getter
    def precedence(self) -> str:
        """
        Precedence. Either `unspecified` or a number between 0 and 7.
        """
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol name or number.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolMask")
    def protocol_mask(self) -> str:
        """
        Protocol mask name or number.
        """
        return pulumi.get(self, "protocol_mask")

    @property
    @pulumi.getter
    def psh(self) -> bool:
        """
        Match TCP PSH flag.
        """
        return pulumi.get(self, "psh")

    @property
    @pulumi.getter
    def redirect(self) -> str:
        """
        Redirect action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        ACL comment.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def rev(self) -> bool:
        """
        Match TCP REV flag.
        """
        return pulumi.get(self, "rev")

    @property
    @pulumi.getter
    def rst(self) -> bool:
        """
        Match TCP RST flag.
        """
        return pulumi.get(self, "rst")

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> int:
        """
        Sequence number.
        """
        return pulumi.get(self, "sequence_number")

    @property
    @pulumi.getter(name="sourceAddressGroup")
    def source_address_group(self) -> str:
        """
        Source address group.
        """
        return pulumi.get(self, "source_address_group")

    @property
    @pulumi.getter(name="sourcePort1")
    def source_port1(self) -> str:
        """
        First source port name or number.
        """
        return pulumi.get(self, "source_port1")

    @property
    @pulumi.getter(name="sourcePort2")
    def source_port2(self) -> str:
        """
        Second source port name or number.
        """
        return pulumi.get(self, "source_port2")

    @property
    @pulumi.getter(name="sourcePortGroup")
    def source_port_group(self) -> str:
        """
        Source port group.
        """
        return pulumi.get(self, "source_port_group")

    @property
    @pulumi.getter(name="sourcePortMask")
    def source_port_mask(self) -> str:
        """
        Source port mask name or number.
        """
        return pulumi.get(self, "source_port_mask")

    @property
    @pulumi.getter(name="sourcePortOperator")
    def source_port_operator(self) -> str:
        """
        Source port operator.
        """
        return pulumi.get(self, "source_port_operator")

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> str:
        """
        Source prefix.
        """
        return pulumi.get(self, "source_prefix")

    @property
    @pulumi.getter(name="sourcePrefixLength")
    def source_prefix_length(self) -> str:
        """
        Source prefix length.
        """
        return pulumi.get(self, "source_prefix_length")

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> str:
        """
        Source prefix mask.
        """
        return pulumi.get(self, "source_prefix_mask")

    @property
    @pulumi.getter
    def syn(self) -> bool:
        """
        Match TCP SYN flag.
        """
        return pulumi.get(self, "syn")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        """
        Time range name.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        TTL.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def urg(self) -> bool:
        """
        Match TCP URG flag.
        """
        return pulumi.get(self, "urg")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter
    def vni(self) -> str:
        """
        NVE VNI ID. Either `invalid` or a number between 0 and 16777216.
        """
        return pulumi.get(self, "vni")


class AwaitableGetIpv4AccessListEntryResult(GetIpv4AccessListEntryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpv4AccessListEntryResult(
            ack=self.ack,
            action=self.action,
            destination_address_group=self.destination_address_group,
            destination_port1=self.destination_port1,
            destination_port2=self.destination_port2,
            destination_port_group=self.destination_port_group,
            destination_port_mask=self.destination_port_mask,
            destination_port_operator=self.destination_port_operator,
            destination_prefix=self.destination_prefix,
            destination_prefix_length=self.destination_prefix_length,
            destination_prefix_mask=self.destination_prefix_mask,
            device=self.device,
            dscp=self.dscp,
            est=self.est,
            fin=self.fin,
            fragment=self.fragment,
            http_option_type=self.http_option_type,
            icmp_code=self.icmp_code,
            icmp_type=self.icmp_type,
            id=self.id,
            logging=self.logging,
            name=self.name,
            packet_length1=self.packet_length1,
            packet_length2=self.packet_length2,
            packet_length_operator=self.packet_length_operator,
            precedence=self.precedence,
            protocol=self.protocol,
            protocol_mask=self.protocol_mask,
            psh=self.psh,
            redirect=self.redirect,
            remark=self.remark,
            rev=self.rev,
            rst=self.rst,
            sequence_number=self.sequence_number,
            source_address_group=self.source_address_group,
            source_port1=self.source_port1,
            source_port2=self.source_port2,
            source_port_group=self.source_port_group,
            source_port_mask=self.source_port_mask,
            source_port_operator=self.source_port_operator,
            source_prefix=self.source_prefix,
            source_prefix_length=self.source_prefix_length,
            source_prefix_mask=self.source_prefix_mask,
            syn=self.syn,
            time_range=self.time_range,
            ttl=self.ttl,
            urg=self.urg,
            vlan=self.vlan,
            vni=self.vni)


def get_ipv4_access_list_entry(device: Optional[str] = None,
                               name: Optional[str] = None,
                               sequence_number: Optional[int] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpv4AccessListEntryResult:
    """
    This data source can read IPv4 Access List Entries.

    - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_access_list_entry(name="ACL1",
        sequence_number=10)
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Access list name.
    :param int sequence_number: Sequence number.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    __args__['sequenceNumber'] = sequence_number
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIpv4AccessListEntry:getIpv4AccessListEntry', __args__, opts=opts, typ=GetIpv4AccessListEntryResult).value

    return AwaitableGetIpv4AccessListEntryResult(
        ack=pulumi.get(__ret__, 'ack'),
        action=pulumi.get(__ret__, 'action'),
        destination_address_group=pulumi.get(__ret__, 'destination_address_group'),
        destination_port1=pulumi.get(__ret__, 'destination_port1'),
        destination_port2=pulumi.get(__ret__, 'destination_port2'),
        destination_port_group=pulumi.get(__ret__, 'destination_port_group'),
        destination_port_mask=pulumi.get(__ret__, 'destination_port_mask'),
        destination_port_operator=pulumi.get(__ret__, 'destination_port_operator'),
        destination_prefix=pulumi.get(__ret__, 'destination_prefix'),
        destination_prefix_length=pulumi.get(__ret__, 'destination_prefix_length'),
        destination_prefix_mask=pulumi.get(__ret__, 'destination_prefix_mask'),
        device=pulumi.get(__ret__, 'device'),
        dscp=pulumi.get(__ret__, 'dscp'),
        est=pulumi.get(__ret__, 'est'),
        fin=pulumi.get(__ret__, 'fin'),
        fragment=pulumi.get(__ret__, 'fragment'),
        http_option_type=pulumi.get(__ret__, 'http_option_type'),
        icmp_code=pulumi.get(__ret__, 'icmp_code'),
        icmp_type=pulumi.get(__ret__, 'icmp_type'),
        id=pulumi.get(__ret__, 'id'),
        logging=pulumi.get(__ret__, 'logging'),
        name=pulumi.get(__ret__, 'name'),
        packet_length1=pulumi.get(__ret__, 'packet_length1'),
        packet_length2=pulumi.get(__ret__, 'packet_length2'),
        packet_length_operator=pulumi.get(__ret__, 'packet_length_operator'),
        precedence=pulumi.get(__ret__, 'precedence'),
        protocol=pulumi.get(__ret__, 'protocol'),
        protocol_mask=pulumi.get(__ret__, 'protocol_mask'),
        psh=pulumi.get(__ret__, 'psh'),
        redirect=pulumi.get(__ret__, 'redirect'),
        remark=pulumi.get(__ret__, 'remark'),
        rev=pulumi.get(__ret__, 'rev'),
        rst=pulumi.get(__ret__, 'rst'),
        sequence_number=pulumi.get(__ret__, 'sequence_number'),
        source_address_group=pulumi.get(__ret__, 'source_address_group'),
        source_port1=pulumi.get(__ret__, 'source_port1'),
        source_port2=pulumi.get(__ret__, 'source_port2'),
        source_port_group=pulumi.get(__ret__, 'source_port_group'),
        source_port_mask=pulumi.get(__ret__, 'source_port_mask'),
        source_port_operator=pulumi.get(__ret__, 'source_port_operator'),
        source_prefix=pulumi.get(__ret__, 'source_prefix'),
        source_prefix_length=pulumi.get(__ret__, 'source_prefix_length'),
        source_prefix_mask=pulumi.get(__ret__, 'source_prefix_mask'),
        syn=pulumi.get(__ret__, 'syn'),
        time_range=pulumi.get(__ret__, 'time_range'),
        ttl=pulumi.get(__ret__, 'ttl'),
        urg=pulumi.get(__ret__, 'urg'),
        vlan=pulumi.get(__ret__, 'vlan'),
        vni=pulumi.get(__ret__, 'vni'))


@_utilities.lift_output_func(get_ipv4_access_list_entry)
def get_ipv4_access_list_entry_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                      name: Optional[pulumi.Input[str]] = None,
                                      sequence_number: Optional[pulumi.Input[int]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpv4AccessListEntryResult]:
    """
    This data source can read IPv4 Access List Entries.

    - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_access_list_entry(name="ACL1",
        sequence_number=10)
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Access list name.
    :param int sequence_number: Sequence number.
    """
    ...
