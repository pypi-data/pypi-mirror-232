# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

import types

__config__ = pulumi.Config('nxos')


class _ExportableConfig(types.ModuleType):
    @property
    def devices(self) -> Optional[str]:
        """
        This can be used to manage a list of devices from a single provider. All devices must use the same credentials. Each
        resource and data source has an optional attribute named `device`, which can then select a device by its name from this
        list.
        """
        return __config__.get('devices')

    @property
    def insecure(self) -> Optional[bool]:
        """
        Allow insecure HTTPS client. This can also be set as the NXOS_INSECURE environment variable. Defaults to `true`.
        """
        return __config__.get_bool('insecure')

    @property
    def password(self) -> Optional[str]:
        """
        Password for the NX-OS device account. This can also be set as the NXOS_PASSWORD environment variable.
        """
        return __config__.get('password')

    @property
    def retries(self) -> Optional[int]:
        """
        Number of retries for REST API calls. This can also be set as the NXOS_RETRIES environment variable. Defaults to `3`.
        """
        return __config__.get_int('retries')

    @property
    def url(self) -> Optional[str]:
        """
        URL of the Cisco NX-OS device. This can also be set as the NXOS_URL environment variable. If no URL is provided, the URL
        of the first device from the `devices` list is being used.
        """
        return __config__.get('url')

    @property
    def username(self) -> Optional[str]:
        """
        Username for the NX-OS device account. This can also be set as the NXOS_USERNAME environment variable.
        """
        return __config__.get('username')

