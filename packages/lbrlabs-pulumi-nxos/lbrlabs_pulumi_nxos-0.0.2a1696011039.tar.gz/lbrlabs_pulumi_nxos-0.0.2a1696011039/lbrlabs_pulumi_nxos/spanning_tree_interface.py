# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SpanningTreeInterfaceArgs', 'SpanningTreeInterface']

@pulumi.input_type
class SpanningTreeInterfaceArgs:
    def __init__(__self__, *,
                 interface_id: pulumi.Input[str],
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bpdu_filter: Optional[pulumi.Input[str]] = None,
                 bpdu_guard: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 guard: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SpanningTreeInterface resource.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] admin_state: The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] bpdu_filter: BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] bpdu_guard: BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[int] cost: Port path cost. - Range: `0`-`200000000` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] guard: Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        :param pulumi.Input[str] link_type: Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        :param pulumi.Input[str] mode: Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        :param pulumi.Input[int] priority: Port priority. - Range: `0`-`224` - Default value: `128`
        """
        pulumi.set(__self__, "interface_id", interface_id)
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if bpdu_filter is not None:
            pulumi.set(__self__, "bpdu_filter", bpdu_filter)
        if bpdu_guard is not None:
            pulumi.set(__self__, "bpdu_guard", bpdu_guard)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if guard is not None:
            pulumi.set(__self__, "guard", guard)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="bpduFilter")
    def bpdu_filter(self) -> Optional[pulumi.Input[str]]:
        """
        BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_filter")

    @bpdu_filter.setter
    def bpdu_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpdu_filter", value)

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> Optional[pulumi.Input[str]]:
        """
        BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_guard")

    @bpdu_guard.setter
    def bpdu_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpdu_guard", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Port path cost. - Range: `0`-`200000000` - Default value: `0`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def guard(self) -> Optional[pulumi.Input[str]]:
        """
        Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        """
        return pulumi.get(self, "guard")

    @guard.setter
    def guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guard", value)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[pulumi.Input[str]]:
        """
        Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        """
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Port priority. - Range: `0`-`224` - Default value: `128`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class _SpanningTreeInterfaceState:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bpdu_filter: Optional[pulumi.Input[str]] = None,
                 bpdu_guard: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 guard: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SpanningTreeInterface resources.
        :param pulumi.Input[str] admin_state: The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] bpdu_filter: BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] bpdu_guard: BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[int] cost: Port path cost. - Range: `0`-`200000000` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] guard: Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] link_type: Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        :param pulumi.Input[str] mode: Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        :param pulumi.Input[int] priority: Port priority. - Range: `0`-`224` - Default value: `128`
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if bpdu_filter is not None:
            pulumi.set(__self__, "bpdu_filter", bpdu_filter)
        if bpdu_guard is not None:
            pulumi.set(__self__, "bpdu_guard", bpdu_guard)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if guard is not None:
            pulumi.set(__self__, "guard", guard)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="bpduFilter")
    def bpdu_filter(self) -> Optional[pulumi.Input[str]]:
        """
        BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_filter")

    @bpdu_filter.setter
    def bpdu_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpdu_filter", value)

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> Optional[pulumi.Input[str]]:
        """
        BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_guard")

    @bpdu_guard.setter
    def bpdu_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bpdu_guard", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Port path cost. - Range: `0`-`200000000` - Default value: `0`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def guard(self) -> Optional[pulumi.Input[str]]:
        """
        Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        """
        return pulumi.get(self, "guard")

    @guard.setter
    def guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guard", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[pulumi.Input[str]]:
        """
        Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        """
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Port priority. - Range: `0`-`224` - Default value: `128`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


class SpanningTreeInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bpdu_filter: Optional[pulumi.Input[str]] = None,
                 bpdu_guard: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 guard: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the Spanning Tree interface configuration.

        - API Documentation: [stpIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Discovery%20Protocols/stp:If/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.SpanningTreeInterface("example",
            admin_state="enabled",
            bpdu_filter="enable",
            bpdu_guard="enable",
            cost=100,
            guard="root",
            interface_id="eth1/9",
            link_type="p2p",
            mode="edge",
            priority=200)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/spanningTreeInterface:SpanningTreeInterface example "sys/stp/inst/if-[eth1/9]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] bpdu_filter: BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] bpdu_guard: BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[int] cost: Port path cost. - Range: `0`-`200000000` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] guard: Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] link_type: Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        :param pulumi.Input[str] mode: Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        :param pulumi.Input[int] priority: Port priority. - Range: `0`-`224` - Default value: `128`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpanningTreeInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Spanning Tree interface configuration.

        - API Documentation: [stpIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Discovery%20Protocols/stp:If/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.SpanningTreeInterface("example",
            admin_state="enabled",
            bpdu_filter="enable",
            bpdu_guard="enable",
            cost=100,
            guard="root",
            interface_id="eth1/9",
            link_type="p2p",
            mode="edge",
            priority=200)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/spanningTreeInterface:SpanningTreeInterface example "sys/stp/inst/if-[eth1/9]"
        ```

        :param str resource_name: The name of the resource.
        :param SpanningTreeInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpanningTreeInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bpdu_filter: Optional[pulumi.Input[str]] = None,
                 bpdu_guard: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 guard: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 link_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpanningTreeInterfaceArgs.__new__(SpanningTreeInterfaceArgs)

            __props__.__dict__["admin_state"] = admin_state
            __props__.__dict__["bpdu_filter"] = bpdu_filter
            __props__.__dict__["bpdu_guard"] = bpdu_guard
            __props__.__dict__["cost"] = cost
            __props__.__dict__["device"] = device
            __props__.__dict__["guard"] = guard
            if interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'interface_id'")
            __props__.__dict__["interface_id"] = interface_id
            __props__.__dict__["link_type"] = link_type
            __props__.__dict__["mode"] = mode
            __props__.__dict__["priority"] = priority
        super(SpanningTreeInterface, __self__).__init__(
            'nxos:index/spanningTreeInterface:SpanningTreeInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state: Optional[pulumi.Input[str]] = None,
            bpdu_filter: Optional[pulumi.Input[str]] = None,
            bpdu_guard: Optional[pulumi.Input[str]] = None,
            cost: Optional[pulumi.Input[int]] = None,
            device: Optional[pulumi.Input[str]] = None,
            guard: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[str]] = None,
            link_type: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None) -> 'SpanningTreeInterface':
        """
        Get an existing SpanningTreeInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] bpdu_filter: BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] bpdu_guard: BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[int] cost: Port path cost. - Range: `0`-`200000000` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] guard: Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] link_type: Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        :param pulumi.Input[str] mode: Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        :param pulumi.Input[int] priority: Port priority. - Range: `0`-`224` - Default value: `128`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpanningTreeInterfaceState.__new__(_SpanningTreeInterfaceState)

        __props__.__dict__["admin_state"] = admin_state
        __props__.__dict__["bpdu_filter"] = bpdu_filter
        __props__.__dict__["bpdu_guard"] = bpdu_guard
        __props__.__dict__["cost"] = cost
        __props__.__dict__["device"] = device
        __props__.__dict__["guard"] = guard
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["link_type"] = link_type
        __props__.__dict__["mode"] = mode
        __props__.__dict__["priority"] = priority
        return SpanningTreeInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> pulumi.Output[str]:
        """
        The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="bpduFilter")
    def bpdu_filter(self) -> pulumi.Output[str]:
        """
        BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_filter")

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> pulumi.Output[str]:
        """
        BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "bpdu_guard")

    @property
    @pulumi.getter
    def cost(self) -> pulumi.Output[int]:
        """
        Port path cost. - Range: `0`-`200000000` - Default value: `0`
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def guard(self) -> pulumi.Output[str]:
        """
        Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
        """
        return pulumi.get(self, "guard")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> pulumi.Output[str]:
        """
        Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
        """
        return pulumi.get(self, "link_type")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Port priority. - Range: `0`-`224` - Default value: `128`
        """
        return pulumi.get(self, "priority")

