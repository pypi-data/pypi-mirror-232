# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNtpServerResult',
    'AwaitableGetNtpServerResult',
    'get_ntp_server',
    'get_ntp_server_output',
]

@pulumi.output_type
class GetNtpServerResult:
    """
    A collection of values returned by getNtpServer.
    """
    def __init__(__self__, device=None, id=None, key_id=None, max_poll=None, min_poll=None, name=None, type=None, vrf=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_id and not isinstance(key_id, int):
            raise TypeError("Expected argument 'key_id' to be a int")
        pulumi.set(__self__, "key_id", key_id)
        if max_poll and not isinstance(max_poll, int):
            raise TypeError("Expected argument 'max_poll' to be a int")
        pulumi.set(__self__, "max_poll", max_poll)
        if min_poll and not isinstance(min_poll, int):
            raise TypeError("Expected argument 'min_poll' to be a int")
        pulumi.set(__self__, "min_poll", min_poll)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vrf and not isinstance(vrf, str):
            raise TypeError("Expected argument 'vrf' to be a str")
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> int:
        """
        NTP provider key ID. Possible range is from `1` to `65535`.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="maxPoll")
    def max_poll(self) -> int:
        """
        NTP maximum interval default in seconds. Possible range is from `4` to `16`.
        """
        return pulumi.get(self, "max_poll")

    @property
    @pulumi.getter(name="minPoll")
    def min_poll(self) -> int:
        """
        NTP minimum interval default in seconds. Possible range is from `4` to `16`.
        """
        return pulumi.get(self, "min_poll")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        NTP server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        NTP provider type. Possible values are `server` or `peer`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Identifies the VRF for the NTP providers.
        """
        return pulumi.get(self, "vrf")


class AwaitableGetNtpServerResult(GetNtpServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNtpServerResult(
            device=self.device,
            id=self.id,
            key_id=self.key_id,
            max_poll=self.max_poll,
            min_poll=self.min_poll,
            name=self.name,
            type=self.type,
            vrf=self.vrf)


def get_ntp_server(device: Optional[str] = None,
                   name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNtpServerResult:
    """
    This data source can read an ntp server or peer.

    - API Documentation: [datetimeNtpProvider](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/datetime:NtpProvider/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ntp_server(name="1.2.3.4")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: NTP server.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getNtpServer:getNtpServer', __args__, opts=opts, typ=GetNtpServerResult).value

    return AwaitableGetNtpServerResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        max_poll=pulumi.get(__ret__, 'max_poll'),
        min_poll=pulumi.get(__ret__, 'min_poll'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'),
        vrf=pulumi.get(__ret__, 'vrf'))


@_utilities.lift_output_func(get_ntp_server)
def get_ntp_server_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                          name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNtpServerResult]:
    """
    This data source can read an ntp server or peer.

    - API Documentation: [datetimeNtpProvider](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/datetime:NtpProvider/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ntp_server(name="1.2.3.4")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: NTP server.
    """
    ...
