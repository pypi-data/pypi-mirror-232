# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IsisInterfaceArgs', 'IsisInterface']

@pulumi.input_type
class IsisInterfaceArgs:
    def __init__(__self__, *,
                 interface_id: pulumi.Input[str],
                 authentication_check: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 mtu_check: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l1: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l2: Optional[pulumi.Input[bool]] = None,
                 network_type_p2p: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IsisInterface resource.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[bool] authentication_check: Authentication Check for ISIS without specific level. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key: Authentication Key for IS-IS without specific level.
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type: IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] circuit_type: Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hello_interval: Hello interval. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l1: Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l2: Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_multiplier: Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l1: Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l2: Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[str] hello_padding: Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        :param pulumi.Input[int] metric_l1: Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[int] metric_l2: Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[bool] mtu_check: MTU Check for IS-IS without specific level. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l1: MTU Check for IS-IS on Level-1. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l2: MTU Check for IS-IS on Level-2. - Default value: `false`
        :param pulumi.Input[str] network_type_p2p: Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        :param pulumi.Input[str] passive: IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
               `inheritDef`
        :param pulumi.Input[int] priority_l1: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[int] priority_l2: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[str] vrf: VRF.
        """
        pulumi.set(__self__, "interface_id", interface_id)
        if authentication_check is not None:
            pulumi.set(__self__, "authentication_check", authentication_check)
        if authentication_check_l1 is not None:
            pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 is not None:
            pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_l1 is not None:
            pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 is not None:
            pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_l1 is not None:
            pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 is not None:
            pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if mtu_check is not None:
            pulumi.set(__self__, "mtu_check", mtu_check)
        if mtu_check_l1 is not None:
            pulumi.set(__self__, "mtu_check_l1", mtu_check_l1)
        if mtu_check_l2 is not None:
            pulumi.set(__self__, "mtu_check_l2", mtu_check_l2)
        if network_type_p2p is not None:
            pulumi.set(__self__, "network_type_p2p", network_type_p2p)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="authenticationCheck")
    def authentication_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS without specific level. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check")

    @authentication_check.setter
    def authentication_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check", value)

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @authentication_check_l1.setter
    def authentication_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l1", value)

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @authentication_check_l2.setter
    def authentication_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l2", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS without specific level.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @authentication_key_l1.setter
    def authentication_key_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l1", value)

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @authentication_key_l2.setter
    def authentication_key_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l2", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @authentication_type_l1.setter
    def authentication_type_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l1", value)

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @authentication_type_l2.setter
    def authentication_type_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l2", value)

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[pulumi.Input[str]]:
        """
        Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "circuit_type")

    @circuit_type.setter
    def circuit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_type", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l1")

    @hello_interval_l1.setter
    def hello_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l1", value)

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l2")

    @hello_interval_l2.setter
    def hello_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l2", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @hello_multiplier_l1.setter
    def hello_multiplier_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l1", value)

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @hello_multiplier_l2.setter
    def hello_multiplier_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l2", value)

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[pulumi.Input[str]]:
        """
        Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        """
        return pulumi.get(self, "hello_padding")

    @hello_padding.setter
    def hello_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hello_padding", value)

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l1")

    @metric_l1.setter
    def metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l1", value)

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l2")

    @metric_l2.setter
    def metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l2", value)

    @property
    @pulumi.getter(name="mtuCheck")
    def mtu_check(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS without specific level. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check")

    @mtu_check.setter
    def mtu_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check", value)

    @property
    @pulumi.getter(name="mtuCheckL1")
    def mtu_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS on Level-1. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l1")

    @mtu_check_l1.setter
    def mtu_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check_l1", value)

    @property
    @pulumi.getter(name="mtuCheckL2")
    def mtu_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS on Level-2. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l2")

    @mtu_check_l2.setter
    def mtu_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check_l2", value)

    @property
    @pulumi.getter(name="networkTypeP2p")
    def network_type_p2p(self) -> Optional[pulumi.Input[str]]:
        """
        Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        """
        return pulumi.get(self, "network_type_p2p")

    @network_type_p2p.setter
    def network_type_p2p(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type_p2p", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
        `inheritDef`
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l1")

    @priority_l1.setter
    def priority_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l1", value)

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l2")

    @priority_l2.setter
    def priority_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l2", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        VRF.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class _IsisInterfaceState:
    def __init__(__self__, *,
                 authentication_check: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 mtu_check: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l1: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l2: Optional[pulumi.Input[bool]] = None,
                 network_type_p2p: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IsisInterface resources.
        :param pulumi.Input[bool] authentication_check: Authentication Check for ISIS without specific level. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key: Authentication Key for IS-IS without specific level.
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type: IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] circuit_type: Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hello_interval: Hello interval. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l1: Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l2: Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_multiplier: Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l1: Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l2: Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[str] hello_padding: Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[int] metric_l1: Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[int] metric_l2: Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[bool] mtu_check: MTU Check for IS-IS without specific level. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l1: MTU Check for IS-IS on Level-1. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l2: MTU Check for IS-IS on Level-2. - Default value: `false`
        :param pulumi.Input[str] network_type_p2p: Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        :param pulumi.Input[str] passive: IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
               `inheritDef`
        :param pulumi.Input[int] priority_l1: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[int] priority_l2: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[str] vrf: VRF.
        """
        if authentication_check is not None:
            pulumi.set(__self__, "authentication_check", authentication_check)
        if authentication_check_l1 is not None:
            pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 is not None:
            pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_l1 is not None:
            pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 is not None:
            pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_l1 is not None:
            pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 is not None:
            pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if mtu_check is not None:
            pulumi.set(__self__, "mtu_check", mtu_check)
        if mtu_check_l1 is not None:
            pulumi.set(__self__, "mtu_check_l1", mtu_check_l1)
        if mtu_check_l2 is not None:
            pulumi.set(__self__, "mtu_check_l2", mtu_check_l2)
        if network_type_p2p is not None:
            pulumi.set(__self__, "network_type_p2p", network_type_p2p)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="authenticationCheck")
    def authentication_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS without specific level. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check")

    @authentication_check.setter
    def authentication_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check", value)

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @authentication_check_l1.setter
    def authentication_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l1", value)

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @authentication_check_l2.setter
    def authentication_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_check_l2", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS without specific level.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @authentication_key_l1.setter
    def authentication_key_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l1", value)

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @authentication_key_l2.setter
    def authentication_key_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key_l2", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @authentication_type_l1.setter
    def authentication_type_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l1", value)

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @authentication_type_l2.setter
    def authentication_type_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type_l2", value)

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[pulumi.Input[str]]:
        """
        Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "circuit_type")

    @circuit_type.setter
    def circuit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_type", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l1")

    @hello_interval_l1.setter
    def hello_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l1", value)

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l2")

    @hello_interval_l2.setter
    def hello_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l2", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @hello_multiplier_l1.setter
    def hello_multiplier_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l1", value)

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @hello_multiplier_l2.setter
    def hello_multiplier_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l2", value)

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[pulumi.Input[str]]:
        """
        Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        """
        return pulumi.get(self, "hello_padding")

    @hello_padding.setter
    def hello_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hello_padding", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l1")

    @metric_l1.setter
    def metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l1", value)

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l2")

    @metric_l2.setter
    def metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l2", value)

    @property
    @pulumi.getter(name="mtuCheck")
    def mtu_check(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS without specific level. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check")

    @mtu_check.setter
    def mtu_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check", value)

    @property
    @pulumi.getter(name="mtuCheckL1")
    def mtu_check_l1(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS on Level-1. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l1")

    @mtu_check_l1.setter
    def mtu_check_l1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check_l1", value)

    @property
    @pulumi.getter(name="mtuCheckL2")
    def mtu_check_l2(self) -> Optional[pulumi.Input[bool]]:
        """
        MTU Check for IS-IS on Level-2. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l2")

    @mtu_check_l2.setter
    def mtu_check_l2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtu_check_l2", value)

    @property
    @pulumi.getter(name="networkTypeP2p")
    def network_type_p2p(self) -> Optional[pulumi.Input[str]]:
        """
        Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        """
        return pulumi.get(self, "network_type_p2p")

    @network_type_p2p.setter
    def network_type_p2p(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type_p2p", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
        `inheritDef`
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l1")

    @priority_l1.setter
    def priority_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l1", value)

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l2")

    @priority_l2.setter
    def priority_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l2", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        VRF.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


class IsisInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_check: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 mtu_check: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l1: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l2: Optional[pulumi.Input[bool]] = None,
                 network_type_p2p: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the IS-IS interface configuration.

        - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.IsisInterface("example",
            authentication_check=False,
            authentication_check_l1=False,
            authentication_check_l2=False,
            authentication_key="",
            authentication_key_l1="",
            authentication_key_l2="",
            authentication_type="unknown",
            authentication_type_l1="unknown",
            authentication_type_l2="unknown",
            circuit_type="l2",
            hello_interval=20,
            hello_interval_l1=20,
            hello_interval_l2=20,
            hello_multiplier=4,
            hello_multiplier_l1=4,
            hello_multiplier_l2=4,
            hello_padding="never",
            interface_id="eth1/10",
            metric_l1=1000,
            metric_l2=1000,
            mtu_check=True,
            mtu_check_l1=True,
            mtu_check_l2=True,
            network_type_p2p="on",
            passive="l1",
            priority_l1=80,
            priority_l2=80,
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/isisInterface:IsisInterface example "sys/isis/if-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authentication_check: Authentication Check for ISIS without specific level. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key: Authentication Key for IS-IS without specific level.
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type: IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] circuit_type: Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hello_interval: Hello interval. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l1: Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l2: Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_multiplier: Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l1: Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l2: Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[str] hello_padding: Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[int] metric_l1: Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[int] metric_l2: Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[bool] mtu_check: MTU Check for IS-IS without specific level. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l1: MTU Check for IS-IS on Level-1. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l2: MTU Check for IS-IS on Level-2. - Default value: `false`
        :param pulumi.Input[str] network_type_p2p: Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        :param pulumi.Input[str] passive: IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
               `inheritDef`
        :param pulumi.Input[int] priority_l1: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[int] priority_l2: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[str] vrf: VRF.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsisInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the IS-IS interface configuration.

        - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.IsisInterface("example",
            authentication_check=False,
            authentication_check_l1=False,
            authentication_check_l2=False,
            authentication_key="",
            authentication_key_l1="",
            authentication_key_l2="",
            authentication_type="unknown",
            authentication_type_l1="unknown",
            authentication_type_l2="unknown",
            circuit_type="l2",
            hello_interval=20,
            hello_interval_l1=20,
            hello_interval_l2=20,
            hello_multiplier=4,
            hello_multiplier_l1=4,
            hello_multiplier_l2=4,
            hello_padding="never",
            interface_id="eth1/10",
            metric_l1=1000,
            metric_l2=1000,
            mtu_check=True,
            mtu_check_l1=True,
            mtu_check_l2=True,
            network_type_p2p="on",
            passive="l1",
            priority_l1=80,
            priority_l2=80,
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/isisInterface:IsisInterface example "sys/isis/if-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param IsisInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsisInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_check: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l1: Optional[pulumi.Input[bool]] = None,
                 authentication_check_l2: Optional[pulumi.Input[bool]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 authentication_key_l1: Optional[pulumi.Input[str]] = None,
                 authentication_key_l2: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 authentication_type_l1: Optional[pulumi.Input[str]] = None,
                 authentication_type_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 mtu_check: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l1: Optional[pulumi.Input[bool]] = None,
                 mtu_check_l2: Optional[pulumi.Input[bool]] = None,
                 network_type_p2p: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsisInterfaceArgs.__new__(IsisInterfaceArgs)

            __props__.__dict__["authentication_check"] = authentication_check
            __props__.__dict__["authentication_check_l1"] = authentication_check_l1
            __props__.__dict__["authentication_check_l2"] = authentication_check_l2
            __props__.__dict__["authentication_key"] = authentication_key
            __props__.__dict__["authentication_key_l1"] = authentication_key_l1
            __props__.__dict__["authentication_key_l2"] = authentication_key_l2
            __props__.__dict__["authentication_type"] = authentication_type
            __props__.__dict__["authentication_type_l1"] = authentication_type_l1
            __props__.__dict__["authentication_type_l2"] = authentication_type_l2
            __props__.__dict__["circuit_type"] = circuit_type
            __props__.__dict__["device"] = device
            __props__.__dict__["hello_interval"] = hello_interval
            __props__.__dict__["hello_interval_l1"] = hello_interval_l1
            __props__.__dict__["hello_interval_l2"] = hello_interval_l2
            __props__.__dict__["hello_multiplier"] = hello_multiplier
            __props__.__dict__["hello_multiplier_l1"] = hello_multiplier_l1
            __props__.__dict__["hello_multiplier_l2"] = hello_multiplier_l2
            __props__.__dict__["hello_padding"] = hello_padding
            if interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'interface_id'")
            __props__.__dict__["interface_id"] = interface_id
            __props__.__dict__["metric_l1"] = metric_l1
            __props__.__dict__["metric_l2"] = metric_l2
            __props__.__dict__["mtu_check"] = mtu_check
            __props__.__dict__["mtu_check_l1"] = mtu_check_l1
            __props__.__dict__["mtu_check_l2"] = mtu_check_l2
            __props__.__dict__["network_type_p2p"] = network_type_p2p
            __props__.__dict__["passive"] = passive
            __props__.__dict__["priority_l1"] = priority_l1
            __props__.__dict__["priority_l2"] = priority_l2
            __props__.__dict__["vrf"] = vrf
        super(IsisInterface, __self__).__init__(
            'nxos:index/isisInterface:IsisInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_check: Optional[pulumi.Input[bool]] = None,
            authentication_check_l1: Optional[pulumi.Input[bool]] = None,
            authentication_check_l2: Optional[pulumi.Input[bool]] = None,
            authentication_key: Optional[pulumi.Input[str]] = None,
            authentication_key_l1: Optional[pulumi.Input[str]] = None,
            authentication_key_l2: Optional[pulumi.Input[str]] = None,
            authentication_type: Optional[pulumi.Input[str]] = None,
            authentication_type_l1: Optional[pulumi.Input[str]] = None,
            authentication_type_l2: Optional[pulumi.Input[str]] = None,
            circuit_type: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            hello_interval: Optional[pulumi.Input[int]] = None,
            hello_interval_l1: Optional[pulumi.Input[int]] = None,
            hello_interval_l2: Optional[pulumi.Input[int]] = None,
            hello_multiplier: Optional[pulumi.Input[int]] = None,
            hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
            hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
            hello_padding: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[str]] = None,
            metric_l1: Optional[pulumi.Input[int]] = None,
            metric_l2: Optional[pulumi.Input[int]] = None,
            mtu_check: Optional[pulumi.Input[bool]] = None,
            mtu_check_l1: Optional[pulumi.Input[bool]] = None,
            mtu_check_l2: Optional[pulumi.Input[bool]] = None,
            network_type_p2p: Optional[pulumi.Input[str]] = None,
            passive: Optional[pulumi.Input[str]] = None,
            priority_l1: Optional[pulumi.Input[int]] = None,
            priority_l2: Optional[pulumi.Input[int]] = None,
            vrf: Optional[pulumi.Input[str]] = None) -> 'IsisInterface':
        """
        Get an existing IsisInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authentication_check: Authentication Check for ISIS without specific level. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l1: Authentication Check for ISIS on Level-1. - Default value: `true`
        :param pulumi.Input[bool] authentication_check_l2: Authentication Check for ISIS on Level-2. - Default value: `true`
        :param pulumi.Input[str] authentication_key: Authentication Key for IS-IS without specific level.
        :param pulumi.Input[str] authentication_key_l1: Authentication Key for IS-IS on Level-1.
        :param pulumi.Input[str] authentication_key_l2: Authentication Key for IS-IS on Level-2.
        :param pulumi.Input[str] authentication_type: IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l1: IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] authentication_type_l2: IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        :param pulumi.Input[str] circuit_type: Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hello_interval: Hello interval. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l1: Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_interval_l2: Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        :param pulumi.Input[int] hello_multiplier: Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l1: Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[int] hello_multiplier_l2: Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        :param pulumi.Input[str] hello_padding: Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[int] metric_l1: Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[int] metric_l2: Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        :param pulumi.Input[bool] mtu_check: MTU Check for IS-IS without specific level. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l1: MTU Check for IS-IS on Level-1. - Default value: `false`
        :param pulumi.Input[bool] mtu_check_l2: MTU Check for IS-IS on Level-2. - Default value: `false`
        :param pulumi.Input[str] network_type_p2p: Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        :param pulumi.Input[str] passive: IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
               `inheritDef`
        :param pulumi.Input[int] priority_l1: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[int] priority_l2: Circuit priority. - Range: `0`-`127` - Default value: `64`
        :param pulumi.Input[str] vrf: VRF.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsisInterfaceState.__new__(_IsisInterfaceState)

        __props__.__dict__["authentication_check"] = authentication_check
        __props__.__dict__["authentication_check_l1"] = authentication_check_l1
        __props__.__dict__["authentication_check_l2"] = authentication_check_l2
        __props__.__dict__["authentication_key"] = authentication_key
        __props__.__dict__["authentication_key_l1"] = authentication_key_l1
        __props__.__dict__["authentication_key_l2"] = authentication_key_l2
        __props__.__dict__["authentication_type"] = authentication_type
        __props__.__dict__["authentication_type_l1"] = authentication_type_l1
        __props__.__dict__["authentication_type_l2"] = authentication_type_l2
        __props__.__dict__["circuit_type"] = circuit_type
        __props__.__dict__["device"] = device
        __props__.__dict__["hello_interval"] = hello_interval
        __props__.__dict__["hello_interval_l1"] = hello_interval_l1
        __props__.__dict__["hello_interval_l2"] = hello_interval_l2
        __props__.__dict__["hello_multiplier"] = hello_multiplier
        __props__.__dict__["hello_multiplier_l1"] = hello_multiplier_l1
        __props__.__dict__["hello_multiplier_l2"] = hello_multiplier_l2
        __props__.__dict__["hello_padding"] = hello_padding
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["metric_l1"] = metric_l1
        __props__.__dict__["metric_l2"] = metric_l2
        __props__.__dict__["mtu_check"] = mtu_check
        __props__.__dict__["mtu_check_l1"] = mtu_check_l1
        __props__.__dict__["mtu_check_l2"] = mtu_check_l2
        __props__.__dict__["network_type_p2p"] = network_type_p2p
        __props__.__dict__["passive"] = passive
        __props__.__dict__["priority_l1"] = priority_l1
        __props__.__dict__["priority_l2"] = priority_l2
        __props__.__dict__["vrf"] = vrf
        return IsisInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationCheck")
    def authentication_check(self) -> pulumi.Output[bool]:
        """
        Authentication Check for ISIS without specific level. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check")

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> pulumi.Output[bool]:
        """
        Authentication Check for ISIS on Level-1. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l1")

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> pulumi.Output[bool]:
        """
        Authentication Check for ISIS on Level-2. - Default value: `true`
        """
        return pulumi.get(self, "authentication_check_l2")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication Key for IS-IS without specific level.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Output[str]:
        """
        IS-IS Authentication-Type without specific level. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> pulumi.Output[str]:
        """
        IS-IS Authentication-Type for Level-1. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l1")

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> pulumi.Output[str]:
        """
        IS-IS Authentication-Type for Level-2. - Choices: `clear`, `md5`, `unknown` - Default value: `unknown`
        """
        return pulumi.get(self, "authentication_type_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> pulumi.Output[str]:
        """
        Circuit type. - Choices: `l1`, `l2`, `l12` - Default value: `l12`
        """
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> pulumi.Output[int]:
        """
        Hello interval. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> pulumi.Output[int]:
        """
        Hello interval Level-1. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> pulumi.Output[int]:
        """
        Hello interval Level-2. - Range: `1`-`65535` - Default value: `10`
        """
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> pulumi.Output[int]:
        """
        Hello multiplier. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> pulumi.Output[int]:
        """
        Hello multiplier Level-1. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> pulumi.Output[int]:
        """
        Hello multiplier Level-2. - Range: `3`-`1000` - Default value: `3`
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> pulumi.Output[str]:
        """
        Hello padding. - Choices: `always`, `transient`, `never` - Default value: `always`
        """
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> pulumi.Output[int]:
        """
        Interface metric Level-1. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> pulumi.Output[int]:
        """
        Interface metric Level-2. - Range: `0`-`16777216` - Default value: `16777216`
        """
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter(name="mtuCheck")
    def mtu_check(self) -> pulumi.Output[bool]:
        """
        MTU Check for IS-IS without specific level. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check")

    @property
    @pulumi.getter(name="mtuCheckL1")
    def mtu_check_l1(self) -> pulumi.Output[bool]:
        """
        MTU Check for IS-IS on Level-1. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l1")

    @property
    @pulumi.getter(name="mtuCheckL2")
    def mtu_check_l2(self) -> pulumi.Output[bool]:
        """
        MTU Check for IS-IS on Level-2. - Default value: `false`
        """
        return pulumi.get(self, "mtu_check_l2")

    @property
    @pulumi.getter(name="networkTypeP2p")
    def network_type_p2p(self) -> pulumi.Output[str]:
        """
        Enabling Point-to-Point Network Type on IS-IS Interface. - Choices: `off`, `on`, `useAllISMac` - Default value: `off`
        """
        return pulumi.get(self, "network_type_p2p")

    @property
    @pulumi.getter
    def passive(self) -> pulumi.Output[str]:
        """
        IS-IS Passive Interface Info. - Choices: `l1`, `l2`, `l12`, `noL1`, `noL2`, `noL12`, `inheritDef` - Default value:
        `inheritDef`
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> pulumi.Output[int]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> pulumi.Output[int]:
        """
        Circuit priority. - Range: `0`-`127` - Default value: `64`
        """
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[Optional[str]]:
        """
        VRF.
        """
        return pulumi.get(self, "vrf")

