# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PhysicalInterfaceArgs', 'PhysicalInterface']

@pulumi.input_type
class PhysicalInterfaceArgs:
    def __init__(__self__, *,
                 interface_id: pulumi.Input[str],
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 auto_negotiation: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 fec_mode: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 link_debounce_down: Optional[pulumi.Input[int]] = None,
                 link_debounce_up: Optional[pulumi.Input[int]] = None,
                 link_logging: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 native_vlan: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_group: Optional[pulumi.Input[str]] = None,
                 trunk_vlans: Optional[pulumi.Input[str]] = None,
                 uni_directional_ethernet: Optional[pulumi.Input[str]] = None,
                 user_configured_flags: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PhysicalInterface resource.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] access_vlan: Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] admin_state: Administrative port state. - Choices: `up`, `down` - Default value: `up`
        :param pulumi.Input[str] auto_negotiation: Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        :param pulumi.Input[int] bandwidth: The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
               value: `0`
        :param pulumi.Input[int] delay: The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        :param pulumi.Input[str] description: Interface description.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] duplex: Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        :param pulumi.Input[str] fec_mode: FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        :param pulumi.Input[str] layer: Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        :param pulumi.Input[int] link_debounce_down: Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        :param pulumi.Input[int] link_debounce_up: Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        :param pulumi.Input[str] link_logging: Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] medium: The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        :param pulumi.Input[str] mode: Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
               `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        :param pulumi.Input[int] mtu: Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        :param pulumi.Input[str] native_vlan: Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] speed: Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
               `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
               `auto`
        :param pulumi.Input[str] speed_group: Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        :param pulumi.Input[str] trunk_vlans: List of trunk VLANs. - Default value: `1-4094`
        :param pulumi.Input[str] uni_directional_ethernet: UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        :param pulumi.Input[str] user_configured_flags: Port User Config Flags.
        """
        pulumi.set(__self__, "interface_id", interface_id)
        if access_vlan is not None:
            pulumi.set(__self__, "access_vlan", access_vlan)
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if auto_negotiation is not None:
            pulumi.set(__self__, "auto_negotiation", auto_negotiation)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if link_debounce_down is not None:
            pulumi.set(__self__, "link_debounce_down", link_debounce_down)
        if link_debounce_up is not None:
            pulumi.set(__self__, "link_debounce_up", link_debounce_up)
        if link_logging is not None:
            pulumi.set(__self__, "link_logging", link_logging)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_group is not None:
            pulumi.set(__self__, "speed_group", speed_group)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)
        if uni_directional_ethernet is not None:
            pulumi.set(__self__, "uni_directional_ethernet", uni_directional_ethernet)
        if user_configured_flags is not None:
            pulumi.set(__self__, "user_configured_flags", user_configured_flags)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "access_vlan")

    @access_vlan.setter
    def access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vlan", value)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port state. - Choices: `up`, `down` - Default value: `up`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="autoNegotiation")
    def auto_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        """
        return pulumi.get(self, "auto_negotiation")

    @auto_negotiation.setter
    def auto_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiation", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        value: `0`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        """
        return pulumi.get(self, "fec_mode")

    @fec_mode.setter
    def fec_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mode", value)

    @property
    @pulumi.getter
    def layer(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        """
        return pulumi.get(self, "layer")

    @layer.setter
    def layer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer", value)

    @property
    @pulumi.getter(name="linkDebounceDown")
    def link_debounce_down(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        """
        return pulumi.get(self, "link_debounce_down")

    @link_debounce_down.setter
    def link_debounce_down(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_debounce_down", value)

    @property
    @pulumi.getter(name="linkDebounceUp")
    def link_debounce_up(self) -> Optional[pulumi.Input[int]]:
        """
        Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        """
        return pulumi.get(self, "link_debounce_up")

    @link_debounce_up.setter
    def link_debounce_up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_debounce_up", value)

    @property
    @pulumi.getter(name="linkLogging")
    def link_logging(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "link_logging")

    @link_logging.setter
    def link_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_logging", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        `auto`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="speedGroup")
    def speed_group(self) -> Optional[pulumi.Input[str]]:
        """
        Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        """
        return pulumi.get(self, "speed_group")

    @speed_group.setter
    def speed_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed_group", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[str]]:
        """
        List of trunk VLANs. - Default value: `1-4094`
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk_vlans", value)

    @property
    @pulumi.getter(name="uniDirectionalEthernet")
    def uni_directional_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        """
        return pulumi.get(self, "uni_directional_ethernet")

    @uni_directional_ethernet.setter
    def uni_directional_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uni_directional_ethernet", value)

    @property
    @pulumi.getter(name="userConfiguredFlags")
    def user_configured_flags(self) -> Optional[pulumi.Input[str]]:
        """
        Port User Config Flags.
        """
        return pulumi.get(self, "user_configured_flags")

    @user_configured_flags.setter
    def user_configured_flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_configured_flags", value)


@pulumi.input_type
class _PhysicalInterfaceState:
    def __init__(__self__, *,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 auto_negotiation: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 fec_mode: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 link_debounce_down: Optional[pulumi.Input[int]] = None,
                 link_debounce_up: Optional[pulumi.Input[int]] = None,
                 link_logging: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 native_vlan: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_group: Optional[pulumi.Input[str]] = None,
                 trunk_vlans: Optional[pulumi.Input[str]] = None,
                 uni_directional_ethernet: Optional[pulumi.Input[str]] = None,
                 user_configured_flags: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PhysicalInterface resources.
        :param pulumi.Input[str] access_vlan: Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] admin_state: Administrative port state. - Choices: `up`, `down` - Default value: `up`
        :param pulumi.Input[str] auto_negotiation: Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        :param pulumi.Input[int] bandwidth: The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
               value: `0`
        :param pulumi.Input[int] delay: The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        :param pulumi.Input[str] description: Interface description.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] duplex: Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        :param pulumi.Input[str] fec_mode: FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] layer: Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        :param pulumi.Input[int] link_debounce_down: Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        :param pulumi.Input[int] link_debounce_up: Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        :param pulumi.Input[str] link_logging: Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] medium: The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        :param pulumi.Input[str] mode: Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
               `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        :param pulumi.Input[int] mtu: Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        :param pulumi.Input[str] native_vlan: Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] speed: Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
               `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
               `auto`
        :param pulumi.Input[str] speed_group: Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        :param pulumi.Input[str] trunk_vlans: List of trunk VLANs. - Default value: `1-4094`
        :param pulumi.Input[str] uni_directional_ethernet: UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        :param pulumi.Input[str] user_configured_flags: Port User Config Flags.
        """
        if access_vlan is not None:
            pulumi.set(__self__, "access_vlan", access_vlan)
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if auto_negotiation is not None:
            pulumi.set(__self__, "auto_negotiation", auto_negotiation)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if link_debounce_down is not None:
            pulumi.set(__self__, "link_debounce_down", link_debounce_down)
        if link_debounce_up is not None:
            pulumi.set(__self__, "link_debounce_up", link_debounce_up)
        if link_logging is not None:
            pulumi.set(__self__, "link_logging", link_logging)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if native_vlan is not None:
            pulumi.set(__self__, "native_vlan", native_vlan)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_group is not None:
            pulumi.set(__self__, "speed_group", speed_group)
        if trunk_vlans is not None:
            pulumi.set(__self__, "trunk_vlans", trunk_vlans)
        if uni_directional_ethernet is not None:
            pulumi.set(__self__, "uni_directional_ethernet", uni_directional_ethernet)
        if user_configured_flags is not None:
            pulumi.set(__self__, "user_configured_flags", user_configured_flags)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "access_vlan")

    @access_vlan.setter
    def access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vlan", value)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port state. - Choices: `up`, `down` - Default value: `up`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="autoNegotiation")
    def auto_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        """
        return pulumi.get(self, "auto_negotiation")

    @auto_negotiation.setter
    def auto_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiation", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        value: `0`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        """
        return pulumi.get(self, "fec_mode")

    @fec_mode.setter
    def fec_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mode", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def layer(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        """
        return pulumi.get(self, "layer")

    @layer.setter
    def layer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer", value)

    @property
    @pulumi.getter(name="linkDebounceDown")
    def link_debounce_down(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        """
        return pulumi.get(self, "link_debounce_down")

    @link_debounce_down.setter
    def link_debounce_down(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_debounce_down", value)

    @property
    @pulumi.getter(name="linkDebounceUp")
    def link_debounce_up(self) -> Optional[pulumi.Input[int]]:
        """
        Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        """
        return pulumi.get(self, "link_debounce_up")

    @link_debounce_up.setter
    def link_debounce_up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_debounce_up", value)

    @property
    @pulumi.getter(name="linkLogging")
    def link_logging(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "link_logging")

    @link_logging.setter
    def link_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_logging", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "native_vlan")

    @native_vlan.setter
    def native_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "native_vlan", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        `auto`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="speedGroup")
    def speed_group(self) -> Optional[pulumi.Input[str]]:
        """
        Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        """
        return pulumi.get(self, "speed_group")

    @speed_group.setter
    def speed_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed_group", value)

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> Optional[pulumi.Input[str]]:
        """
        List of trunk VLANs. - Default value: `1-4094`
        """
        return pulumi.get(self, "trunk_vlans")

    @trunk_vlans.setter
    def trunk_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk_vlans", value)

    @property
    @pulumi.getter(name="uniDirectionalEthernet")
    def uni_directional_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        """
        return pulumi.get(self, "uni_directional_ethernet")

    @uni_directional_ethernet.setter
    def uni_directional_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uni_directional_ethernet", value)

    @property
    @pulumi.getter(name="userConfiguredFlags")
    def user_configured_flags(self) -> Optional[pulumi.Input[str]]:
        """
        Port User Config Flags.
        """
        return pulumi.get(self, "user_configured_flags")

    @user_configured_flags.setter
    def user_configured_flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_configured_flags", value)


class PhysicalInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 auto_negotiation: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 fec_mode: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 link_debounce_down: Optional[pulumi.Input[int]] = None,
                 link_debounce_up: Optional[pulumi.Input[int]] = None,
                 link_logging: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 native_vlan: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_group: Optional[pulumi.Input[str]] = None,
                 trunk_vlans: Optional[pulumi.Input[str]] = None,
                 uni_directional_ethernet: Optional[pulumi.Input[str]] = None,
                 user_configured_flags: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage a physical interface.

        - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PhysicalInterface("example",
            access_vlan="unknown",
            admin_state="up",
            auto_negotiation="on",
            bandwidth=1000,
            delay=10,
            description="My Description",
            duplex="auto",
            fec_mode="auto",
            interface_id="eth1/10",
            layer="Layer3",
            link_debounce_down=200,
            link_debounce_up=0,
            link_logging="enable",
            medium="broadcast",
            mode="access",
            mtu=1500,
            native_vlan="unknown",
            speed="auto",
            speed_group="auto",
            trunk_vlans="1-4094",
            uni_directional_ethernet="disable",
            user_configured_flags="admin_layer,admin_mtu,admin_state")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/physicalInterface:PhysicalInterface example "sys/intf/phys-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_vlan: Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] admin_state: Administrative port state. - Choices: `up`, `down` - Default value: `up`
        :param pulumi.Input[str] auto_negotiation: Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        :param pulumi.Input[int] bandwidth: The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
               value: `0`
        :param pulumi.Input[int] delay: The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        :param pulumi.Input[str] description: Interface description.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] duplex: Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        :param pulumi.Input[str] fec_mode: FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] layer: Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        :param pulumi.Input[int] link_debounce_down: Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        :param pulumi.Input[int] link_debounce_up: Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        :param pulumi.Input[str] link_logging: Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] medium: The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        :param pulumi.Input[str] mode: Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
               `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        :param pulumi.Input[int] mtu: Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        :param pulumi.Input[str] native_vlan: Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] speed: Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
               `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
               `auto`
        :param pulumi.Input[str] speed_group: Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        :param pulumi.Input[str] trunk_vlans: List of trunk VLANs. - Default value: `1-4094`
        :param pulumi.Input[str] uni_directional_ethernet: UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        :param pulumi.Input[str] user_configured_flags: Port User Config Flags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PhysicalInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a physical interface.

        - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PhysicalInterface("example",
            access_vlan="unknown",
            admin_state="up",
            auto_negotiation="on",
            bandwidth=1000,
            delay=10,
            description="My Description",
            duplex="auto",
            fec_mode="auto",
            interface_id="eth1/10",
            layer="Layer3",
            link_debounce_down=200,
            link_debounce_up=0,
            link_logging="enable",
            medium="broadcast",
            mode="access",
            mtu=1500,
            native_vlan="unknown",
            speed="auto",
            speed_group="auto",
            trunk_vlans="1-4094",
            uni_directional_ethernet="disable",
            user_configured_flags="admin_layer,admin_mtu,admin_state")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/physicalInterface:PhysicalInterface example "sys/intf/phys-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param PhysicalInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PhysicalInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 auto_negotiation: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 fec_mode: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 link_debounce_down: Optional[pulumi.Input[int]] = None,
                 link_debounce_up: Optional[pulumi.Input[int]] = None,
                 link_logging: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 native_vlan: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_group: Optional[pulumi.Input[str]] = None,
                 trunk_vlans: Optional[pulumi.Input[str]] = None,
                 uni_directional_ethernet: Optional[pulumi.Input[str]] = None,
                 user_configured_flags: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PhysicalInterfaceArgs.__new__(PhysicalInterfaceArgs)

            __props__.__dict__["access_vlan"] = access_vlan
            __props__.__dict__["admin_state"] = admin_state
            __props__.__dict__["auto_negotiation"] = auto_negotiation
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["delay"] = delay
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["duplex"] = duplex
            __props__.__dict__["fec_mode"] = fec_mode
            if interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'interface_id'")
            __props__.__dict__["interface_id"] = interface_id
            __props__.__dict__["layer"] = layer
            __props__.__dict__["link_debounce_down"] = link_debounce_down
            __props__.__dict__["link_debounce_up"] = link_debounce_up
            __props__.__dict__["link_logging"] = link_logging
            __props__.__dict__["medium"] = medium
            __props__.__dict__["mode"] = mode
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["native_vlan"] = native_vlan
            __props__.__dict__["speed"] = speed
            __props__.__dict__["speed_group"] = speed_group
            __props__.__dict__["trunk_vlans"] = trunk_vlans
            __props__.__dict__["uni_directional_ethernet"] = uni_directional_ethernet
            __props__.__dict__["user_configured_flags"] = user_configured_flags
        super(PhysicalInterface, __self__).__init__(
            'nxos:index/physicalInterface:PhysicalInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_vlan: Optional[pulumi.Input[str]] = None,
            admin_state: Optional[pulumi.Input[str]] = None,
            auto_negotiation: Optional[pulumi.Input[str]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            delay: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            duplex: Optional[pulumi.Input[str]] = None,
            fec_mode: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[str]] = None,
            layer: Optional[pulumi.Input[str]] = None,
            link_debounce_down: Optional[pulumi.Input[int]] = None,
            link_debounce_up: Optional[pulumi.Input[int]] = None,
            link_logging: Optional[pulumi.Input[str]] = None,
            medium: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            native_vlan: Optional[pulumi.Input[str]] = None,
            speed: Optional[pulumi.Input[str]] = None,
            speed_group: Optional[pulumi.Input[str]] = None,
            trunk_vlans: Optional[pulumi.Input[str]] = None,
            uni_directional_ethernet: Optional[pulumi.Input[str]] = None,
            user_configured_flags: Optional[pulumi.Input[str]] = None) -> 'PhysicalInterface':
        """
        Get an existing PhysicalInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_vlan: Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] admin_state: Administrative port state. - Choices: `up`, `down` - Default value: `up`
        :param pulumi.Input[str] auto_negotiation: Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        :param pulumi.Input[int] bandwidth: The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
               value: `0`
        :param pulumi.Input[int] delay: The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        :param pulumi.Input[str] description: Interface description.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] duplex: Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        :param pulumi.Input[str] fec_mode: FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] layer: Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        :param pulumi.Input[int] link_debounce_down: Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        :param pulumi.Input[int] link_debounce_up: Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        :param pulumi.Input[str] link_logging: Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        :param pulumi.Input[str] medium: The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        :param pulumi.Input[str] mode: Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
               `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        :param pulumi.Input[int] mtu: Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        :param pulumi.Input[str] native_vlan: Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        :param pulumi.Input[str] speed: Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
               `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
               `auto`
        :param pulumi.Input[str] speed_group: Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        :param pulumi.Input[str] trunk_vlans: List of trunk VLANs. - Default value: `1-4094`
        :param pulumi.Input[str] uni_directional_ethernet: UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        :param pulumi.Input[str] user_configured_flags: Port User Config Flags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PhysicalInterfaceState.__new__(_PhysicalInterfaceState)

        __props__.__dict__["access_vlan"] = access_vlan
        __props__.__dict__["admin_state"] = admin_state
        __props__.__dict__["auto_negotiation"] = auto_negotiation
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["delay"] = delay
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["duplex"] = duplex
        __props__.__dict__["fec_mode"] = fec_mode
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["layer"] = layer
        __props__.__dict__["link_debounce_down"] = link_debounce_down
        __props__.__dict__["link_debounce_up"] = link_debounce_up
        __props__.__dict__["link_logging"] = link_logging
        __props__.__dict__["medium"] = medium
        __props__.__dict__["mode"] = mode
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["native_vlan"] = native_vlan
        __props__.__dict__["speed"] = speed
        __props__.__dict__["speed_group"] = speed_group
        __props__.__dict__["trunk_vlans"] = trunk_vlans
        __props__.__dict__["uni_directional_ethernet"] = uni_directional_ethernet
        __props__.__dict__["user_configured_flags"] = user_configured_flags
        return PhysicalInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> pulumi.Output[str]:
        """
        Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "access_vlan")

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> pulumi.Output[str]:
        """
        Administrative port state. - Choices: `up`, `down` - Default value: `up`
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="autoNegotiation")
    def auto_negotiation(self) -> pulumi.Output[str]:
        """
        Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        """
        return pulumi.get(self, "auto_negotiation")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        value: `0`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Output[int]:
        """
        The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Interface description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def duplex(self) -> pulumi.Output[str]:
        """
        Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> pulumi.Output[str]:
        """
        FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        """
        return pulumi.get(self, "fec_mode")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def layer(self) -> pulumi.Output[str]:
        """
        Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        """
        return pulumi.get(self, "layer")

    @property
    @pulumi.getter(name="linkDebounceDown")
    def link_debounce_down(self) -> pulumi.Output[int]:
        """
        Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        """
        return pulumi.get(self, "link_debounce_down")

    @property
    @pulumi.getter(name="linkDebounceUp")
    def link_debounce_up(self) -> pulumi.Output[int]:
        """
        Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        """
        return pulumi.get(self, "link_debounce_up")

    @property
    @pulumi.getter(name="linkLogging")
    def link_logging(self) -> pulumi.Output[str]:
        """
        Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        """
        return pulumi.get(self, "link_logging")

    @property
    @pulumi.getter
    def medium(self) -> pulumi.Output[str]:
        """
        The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> pulumi.Output[str]:
        """
        Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        """
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[str]:
        """
        Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        `auto`
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="speedGroup")
    def speed_group(self) -> pulumi.Output[str]:
        """
        Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        """
        return pulumi.get(self, "speed_group")

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> pulumi.Output[str]:
        """
        List of trunk VLANs. - Default value: `1-4094`
        """
        return pulumi.get(self, "trunk_vlans")

    @property
    @pulumi.getter(name="uniDirectionalEthernet")
    def uni_directional_ethernet(self) -> pulumi.Output[str]:
        """
        UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        """
        return pulumi.get(self, "uni_directional_ethernet")

    @property
    @pulumi.getter(name="userConfiguredFlags")
    def user_configured_flags(self) -> pulumi.Output[Optional[str]]:
        """
        Port User Config Flags.
        """
        return pulumi.get(self, "user_configured_flags")

