# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRouteMapRuleEntryResult',
    'AwaitableGetRouteMapRuleEntryResult',
    'get_route_map_rule_entry',
    'get_route_map_rule_entry_output',
]

@pulumi.output_type
class GetRouteMapRuleEntryResult:
    """
    A collection of values returned by getRouteMapRuleEntry.
    """
    def __init__(__self__, action=None, device=None, id=None, order=None, rule_name=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Route-Map Rule Entry action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def order(self) -> int:
        """
        Route-Map Rule Entry order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Route Map rule name.
        """
        return pulumi.get(self, "rule_name")


class AwaitableGetRouteMapRuleEntryResult(GetRouteMapRuleEntryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteMapRuleEntryResult(
            action=self.action,
            device=self.device,
            id=self.id,
            order=self.order,
            rule_name=self.rule_name)


def get_route_map_rule_entry(device: Optional[str] = None,
                             order: Optional[int] = None,
                             rule_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteMapRuleEntryResult:
    """
    This data source can read a Route-Map Rule Entry configuration.

    - API Documentation: [rtmapEntry](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:Entry/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_route_map_rule_entry(order=10,
        rule_name="RULE1")
    ```


    :param str device: A device name from the provider configuration.
    :param int order: Route-Map Rule Entry order.
    :param str rule_name: Route Map rule name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['order'] = order
    __args__['ruleName'] = rule_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getRouteMapRuleEntry:getRouteMapRuleEntry', __args__, opts=opts, typ=GetRouteMapRuleEntryResult).value

    return AwaitableGetRouteMapRuleEntryResult(
        action=pulumi.get(__ret__, 'action'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        order=pulumi.get(__ret__, 'order'),
        rule_name=pulumi.get(__ret__, 'rule_name'))


@_utilities.lift_output_func(get_route_map_rule_entry)
def get_route_map_rule_entry_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                    order: Optional[pulumi.Input[int]] = None,
                                    rule_name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouteMapRuleEntryResult]:
    """
    This data source can read a Route-Map Rule Entry configuration.

    - API Documentation: [rtmapEntry](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:Entry/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_route_map_rule_entry(order=10,
        rule_name="RULE1")
    ```


    :param str device: A device name from the provider configuration.
    :param int order: Route-Map Rule Entry order.
    :param str rule_name: Route Map rule name.
    """
    ...
