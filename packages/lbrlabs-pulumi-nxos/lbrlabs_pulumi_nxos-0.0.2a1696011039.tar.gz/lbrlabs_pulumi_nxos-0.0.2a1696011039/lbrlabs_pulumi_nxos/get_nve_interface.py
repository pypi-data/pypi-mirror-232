# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNveInterfaceResult',
    'AwaitableGetNveInterfaceResult',
    'get_nve_interface',
    'get_nve_interface_output',
]

@pulumi.output_type
class GetNveInterfaceResult:
    """
    A collection of values returned by getNveInterface.
    """
    def __init__(__self__, admin_state=None, advertise_virtual_mac=None, device=None, hold_down_time=None, host_reachability_protocol=None, id=None, ingress_replication_protocol_bgp=None, multicast_group_l2=None, multicast_group_l3=None, multisite_source_interface=None, source_interface=None, suppress_arp=None, suppress_mac_route=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if advertise_virtual_mac and not isinstance(advertise_virtual_mac, bool):
            raise TypeError("Expected argument 'advertise_virtual_mac' to be a bool")
        pulumi.set(__self__, "advertise_virtual_mac", advertise_virtual_mac)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if hold_down_time and not isinstance(hold_down_time, int):
            raise TypeError("Expected argument 'hold_down_time' to be a int")
        pulumi.set(__self__, "hold_down_time", hold_down_time)
        if host_reachability_protocol and not isinstance(host_reachability_protocol, str):
            raise TypeError("Expected argument 'host_reachability_protocol' to be a str")
        pulumi.set(__self__, "host_reachability_protocol", host_reachability_protocol)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_replication_protocol_bgp and not isinstance(ingress_replication_protocol_bgp, bool):
            raise TypeError("Expected argument 'ingress_replication_protocol_bgp' to be a bool")
        pulumi.set(__self__, "ingress_replication_protocol_bgp", ingress_replication_protocol_bgp)
        if multicast_group_l2 and not isinstance(multicast_group_l2, str):
            raise TypeError("Expected argument 'multicast_group_l2' to be a str")
        pulumi.set(__self__, "multicast_group_l2", multicast_group_l2)
        if multicast_group_l3 and not isinstance(multicast_group_l3, str):
            raise TypeError("Expected argument 'multicast_group_l3' to be a str")
        pulumi.set(__self__, "multicast_group_l3", multicast_group_l3)
        if multisite_source_interface and not isinstance(multisite_source_interface, str):
            raise TypeError("Expected argument 'multisite_source_interface' to be a str")
        pulumi.set(__self__, "multisite_source_interface", multisite_source_interface)
        if source_interface and not isinstance(source_interface, str):
            raise TypeError("Expected argument 'source_interface' to be a str")
        pulumi.set(__self__, "source_interface", source_interface)
        if suppress_arp and not isinstance(suppress_arp, bool):
            raise TypeError("Expected argument 'suppress_arp' to be a bool")
        pulumi.set(__self__, "suppress_arp", suppress_arp)
        if suppress_mac_route and not isinstance(suppress_mac_route, bool):
            raise TypeError("Expected argument 'suppress_mac_route' to be a bool")
        pulumi.set(__self__, "suppress_mac_route", suppress_mac_route)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        Administrative state.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="advertiseVirtualMac")
    def advertise_virtual_mac(self) -> bool:
        """
        Enable or disable Virtual MAC Advertisement in VPC mode.
        """
        return pulumi.get(self, "advertise_virtual_mac")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> int:
        """
        Hold Down Time.
        """
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter(name="hostReachabilityProtocol")
    def host_reachability_protocol(self) -> str:
        """
        Host Reachability Protocol.
        """
        return pulumi.get(self, "host_reachability_protocol")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressReplicationProtocolBgp")
    def ingress_replication_protocol_bgp(self) -> bool:
        """
        VxLAN Ingress Replication Protocol BGP.
        """
        return pulumi.get(self, "ingress_replication_protocol_bgp")

    @property
    @pulumi.getter(name="multicastGroupL2")
    def multicast_group_l2(self) -> str:
        """
        Base multicast group address for L2.
        """
        return pulumi.get(self, "multicast_group_l2")

    @property
    @pulumi.getter(name="multicastGroupL3")
    def multicast_group_l3(self) -> str:
        """
        Base multicast group address for L3.
        """
        return pulumi.get(self, "multicast_group_l3")

    @property
    @pulumi.getter(name="multisiteSourceInterface")
    def multisite_source_interface(self) -> str:
        """
        Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`.
        """
        return pulumi.get(self, "multisite_source_interface")

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> str:
        """
        Source Interface associated with the NVE. Must match first field in the output of `show int brief`.
        """
        return pulumi.get(self, "source_interface")

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> bool:
        """
        Suppress ARP.
        """
        return pulumi.get(self, "suppress_arp")

    @property
    @pulumi.getter(name="suppressMacRoute")
    def suppress_mac_route(self) -> bool:
        """
        Suppress MAC Route.
        """
        return pulumi.get(self, "suppress_mac_route")


class AwaitableGetNveInterfaceResult(GetNveInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNveInterfaceResult(
            admin_state=self.admin_state,
            advertise_virtual_mac=self.advertise_virtual_mac,
            device=self.device,
            hold_down_time=self.hold_down_time,
            host_reachability_protocol=self.host_reachability_protocol,
            id=self.id,
            ingress_replication_protocol_bgp=self.ingress_replication_protocol_bgp,
            multicast_group_l2=self.multicast_group_l2,
            multicast_group_l3=self.multicast_group_l3,
            multisite_source_interface=self.multisite_source_interface,
            source_interface=self.source_interface,
            suppress_arp=self.suppress_arp,
            suppress_mac_route=self.suppress_mac_route)


def get_nve_interface(device: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNveInterfaceResult:
    """
    This data source can read the NVE interface configuration.

    - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_nve_interface()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getNveInterface:getNveInterface', __args__, opts=opts, typ=GetNveInterfaceResult).value

    return AwaitableGetNveInterfaceResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        advertise_virtual_mac=pulumi.get(__ret__, 'advertise_virtual_mac'),
        device=pulumi.get(__ret__, 'device'),
        hold_down_time=pulumi.get(__ret__, 'hold_down_time'),
        host_reachability_protocol=pulumi.get(__ret__, 'host_reachability_protocol'),
        id=pulumi.get(__ret__, 'id'),
        ingress_replication_protocol_bgp=pulumi.get(__ret__, 'ingress_replication_protocol_bgp'),
        multicast_group_l2=pulumi.get(__ret__, 'multicast_group_l2'),
        multicast_group_l3=pulumi.get(__ret__, 'multicast_group_l3'),
        multisite_source_interface=pulumi.get(__ret__, 'multisite_source_interface'),
        source_interface=pulumi.get(__ret__, 'source_interface'),
        suppress_arp=pulumi.get(__ret__, 'suppress_arp'),
        suppress_mac_route=pulumi.get(__ret__, 'suppress_mac_route'))


@_utilities.lift_output_func(get_nve_interface)
def get_nve_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNveInterfaceResult]:
    """
    This data source can read the NVE interface configuration.

    - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_nve_interface()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
