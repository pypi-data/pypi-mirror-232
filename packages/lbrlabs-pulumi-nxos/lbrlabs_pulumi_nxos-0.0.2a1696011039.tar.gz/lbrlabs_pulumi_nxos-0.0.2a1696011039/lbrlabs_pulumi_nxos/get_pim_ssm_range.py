# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPimSsmRangeResult',
    'AwaitableGetPimSsmRangeResult',
    'get_pim_ssm_range',
    'get_pim_ssm_range_output',
]

@pulumi.output_type
class GetPimSsmRangeResult:
    """
    A collection of values returned by getPimSsmRange.
    """
    def __init__(__self__, device=None, group_list1=None, group_list2=None, group_list3=None, group_list4=None, id=None, prefix_list=None, route_map=None, ssm_none=None, vrf_name=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if group_list1 and not isinstance(group_list1, str):
            raise TypeError("Expected argument 'group_list1' to be a str")
        pulumi.set(__self__, "group_list1", group_list1)
        if group_list2 and not isinstance(group_list2, str):
            raise TypeError("Expected argument 'group_list2' to be a str")
        pulumi.set(__self__, "group_list2", group_list2)
        if group_list3 and not isinstance(group_list3, str):
            raise TypeError("Expected argument 'group_list3' to be a str")
        pulumi.set(__self__, "group_list3", group_list3)
        if group_list4 and not isinstance(group_list4, str):
            raise TypeError("Expected argument 'group_list4' to be a str")
        pulumi.set(__self__, "group_list4", group_list4)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prefix_list and not isinstance(prefix_list, str):
            raise TypeError("Expected argument 'prefix_list' to be a str")
        pulumi.set(__self__, "prefix_list", prefix_list)
        if route_map and not isinstance(route_map, str):
            raise TypeError("Expected argument 'route_map' to be a str")
        pulumi.set(__self__, "route_map", route_map)
        if ssm_none and not isinstance(ssm_none, bool):
            raise TypeError("Expected argument 'ssm_none' to be a bool")
        pulumi.set(__self__, "ssm_none", ssm_none)
        if vrf_name and not isinstance(vrf_name, str):
            raise TypeError("Expected argument 'vrf_name' to be a str")
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="groupList1")
    def group_list1(self) -> str:
        """
        Group list 1.
        """
        return pulumi.get(self, "group_list1")

    @property
    @pulumi.getter(name="groupList2")
    def group_list2(self) -> str:
        """
        Group list 2.
        """
        return pulumi.get(self, "group_list2")

    @property
    @pulumi.getter(name="groupList3")
    def group_list3(self) -> str:
        """
        Group list 3.
        """
        return pulumi.get(self, "group_list3")

    @property
    @pulumi.getter(name="groupList4")
    def group_list4(self) -> str:
        """
        Group list 4.
        """
        return pulumi.get(self, "group_list4")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="prefixList")
    def prefix_list(self) -> str:
        """
        Prefix list name.
        """
        return pulumi.get(self, "prefix_list")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter(name="ssmNone")
    def ssm_none(self) -> bool:
        """
        Exclude standard SSM range (232.0.0.0/8).
        """
        return pulumi.get(self, "ssm_none")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")


class AwaitableGetPimSsmRangeResult(GetPimSsmRangeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPimSsmRangeResult(
            device=self.device,
            group_list1=self.group_list1,
            group_list2=self.group_list2,
            group_list3=self.group_list3,
            group_list4=self.group_list4,
            id=self.id,
            prefix_list=self.prefix_list,
            route_map=self.route_map,
            ssm_none=self.ssm_none,
            vrf_name=self.vrf_name)


def get_pim_ssm_range(device: Optional[str] = None,
                      vrf_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPimSsmRangeResult:
    """
    This data source can read the PIM SSM range configuration.

    - API Documentation: [pimSSMRangeP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:SSMRangeP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_pim_ssm_range(vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf_name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['vrfName'] = vrf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getPimSsmRange:getPimSsmRange', __args__, opts=opts, typ=GetPimSsmRangeResult).value

    return AwaitableGetPimSsmRangeResult(
        device=pulumi.get(__ret__, 'device'),
        group_list1=pulumi.get(__ret__, 'group_list1'),
        group_list2=pulumi.get(__ret__, 'group_list2'),
        group_list3=pulumi.get(__ret__, 'group_list3'),
        group_list4=pulumi.get(__ret__, 'group_list4'),
        id=pulumi.get(__ret__, 'id'),
        prefix_list=pulumi.get(__ret__, 'prefix_list'),
        route_map=pulumi.get(__ret__, 'route_map'),
        ssm_none=pulumi.get(__ret__, 'ssm_none'),
        vrf_name=pulumi.get(__ret__, 'vrf_name'))


@_utilities.lift_output_func(get_pim_ssm_range)
def get_pim_ssm_range_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                             vrf_name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPimSsmRangeResult]:
    """
    This data source can read the PIM SSM range configuration.

    - API Documentation: [pimSSMRangeP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:SSMRangeP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_pim_ssm_range(vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf_name: VRF name.
    """
    ...
