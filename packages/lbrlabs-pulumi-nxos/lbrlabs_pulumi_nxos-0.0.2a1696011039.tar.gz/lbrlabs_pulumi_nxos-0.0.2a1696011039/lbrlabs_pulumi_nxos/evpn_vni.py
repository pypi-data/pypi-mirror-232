# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EvpnVniArgs', 'EvpnVni']

@pulumi.input_type
class EvpnVniArgs:
    def __init__(__self__, *,
                 encap: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 route_distinguisher: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EvpnVni resource.
        :param pulumi.Input[str] encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] route_distinguisher: Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        pulumi.set(__self__, "encap", encap)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if route_distinguisher is not None:
            pulumi.set(__self__, "route_distinguisher", route_distinguisher)

    @property
    @pulumi.getter
    def encap(self) -> pulumi.Input[str]:
        """
        Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "encap")

    @encap.setter
    def encap(self, value: pulumi.Input[str]):
        pulumi.set(self, "encap", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="routeDistinguisher")
    def route_distinguisher(self) -> Optional[pulumi.Input[str]]:
        """
        Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        return pulumi.get(self, "route_distinguisher")

    @route_distinguisher.setter
    def route_distinguisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_distinguisher", value)


@pulumi.input_type
class _EvpnVniState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 encap: Optional[pulumi.Input[str]] = None,
                 route_distinguisher: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EvpnVni resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        :param pulumi.Input[str] route_distinguisher: Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if encap is not None:
            pulumi.set(__self__, "encap", encap)
        if route_distinguisher is not None:
            pulumi.set(__self__, "route_distinguisher", route_distinguisher)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def encap(self) -> Optional[pulumi.Input[str]]:
        """
        Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "encap")

    @encap.setter
    def encap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap", value)

    @property
    @pulumi.getter(name="routeDistinguisher")
    def route_distinguisher(self) -> Optional[pulumi.Input[str]]:
        """
        Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        return pulumi.get(self, "route_distinguisher")

    @route_distinguisher.setter
    def route_distinguisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_distinguisher", value)


class EvpnVni(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 encap: Optional[pulumi.Input[str]] = None,
                 route_distinguisher: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage a EVPN VNI Route Distinguisher.

        - API Documentation: [rtctrlBDEvi](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:BDEvi/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.EvpnVni("example",
            encap="vxlan-123456",
            route_distinguisher="rd:unknown:0:0")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/evpnVni:EvpnVni example "sys/evpn/bdevi-[vxlan-123456]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        :param pulumi.Input[str] route_distinguisher: Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EvpnVniArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a EVPN VNI Route Distinguisher.

        - API Documentation: [rtctrlBDEvi](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:BDEvi/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.EvpnVni("example",
            encap="vxlan-123456",
            route_distinguisher="rd:unknown:0:0")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/evpnVni:EvpnVni example "sys/evpn/bdevi-[vxlan-123456]"
        ```

        :param str resource_name: The name of the resource.
        :param EvpnVniArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnVniArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 encap: Optional[pulumi.Input[str]] = None,
                 route_distinguisher: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnVniArgs.__new__(EvpnVniArgs)

            __props__.__dict__["device"] = device
            if encap is None and not opts.urn:
                raise TypeError("Missing required property 'encap'")
            __props__.__dict__["encap"] = encap
            __props__.__dict__["route_distinguisher"] = route_distinguisher
        super(EvpnVni, __self__).__init__(
            'nxos:index/evpnVni:EvpnVni',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            encap: Optional[pulumi.Input[str]] = None,
            route_distinguisher: Optional[pulumi.Input[str]] = None) -> 'EvpnVni':
        """
        Get an existing EvpnVni resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        :param pulumi.Input[str] route_distinguisher: Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnVniState.__new__(_EvpnVniState)

        __props__.__dict__["device"] = device
        __props__.__dict__["encap"] = encap
        __props__.__dict__["route_distinguisher"] = route_distinguisher
        return EvpnVni(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def encap(self) -> pulumi.Output[str]:
        """
        Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "encap")

    @property
    @pulumi.getter(name="routeDistinguisher")
    def route_distinguisher(self) -> pulumi.Output[str]:
        """
        Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
        """
        return pulumi.get(self, "route_distinguisher")

