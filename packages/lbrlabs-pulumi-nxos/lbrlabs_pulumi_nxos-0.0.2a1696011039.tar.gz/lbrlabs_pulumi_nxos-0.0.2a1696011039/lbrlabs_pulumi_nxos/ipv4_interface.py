# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['Ipv4InterfaceArgs', 'Ipv4Interface']

@pulumi.input_type
class Ipv4InterfaceArgs:
    def __init__(__self__, *,
                 interface_id: pulumi.Input[str],
                 vrf: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 drop_glean: Optional[pulumi.Input[str]] = None,
                 forward: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 urpf: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ipv4Interface resource.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] vrf: VRF name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] drop_glean: ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] forward: ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] unnumbered: IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
               Default value: `unspecified`
        :param pulumi.Input[str] urpf: URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
               `strict-allow-vni-hosts` - Default value: `disabled`
        """
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "vrf", vrf)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if drop_glean is not None:
            pulumi.set(__self__, "drop_glean", drop_glean)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if unnumbered is not None:
            pulumi.set(__self__, "unnumbered", unnumbered)
        if urpf is not None:
            pulumi.set(__self__, "urpf", urpf)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dropGlean")
    def drop_glean(self) -> Optional[pulumi.Input[str]]:
        """
        ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "drop_glean")

    @drop_glean.setter
    def drop_glean(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_glean", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[str]]:
        """
        ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter
    def unnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
        Default value: `unspecified`
        """
        return pulumi.get(self, "unnumbered")

    @unnumbered.setter
    def unnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unnumbered", value)

    @property
    @pulumi.getter
    def urpf(self) -> Optional[pulumi.Input[str]]:
        """
        URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
        `strict-allow-vni-hosts` - Default value: `disabled`
        """
        return pulumi.get(self, "urpf")

    @urpf.setter
    def urpf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urpf", value)


@pulumi.input_type
class _Ipv4InterfaceState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 drop_glean: Optional[pulumi.Input[str]] = None,
                 forward: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 urpf: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipv4Interface resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] drop_glean: ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] forward: ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] unnumbered: IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
               Default value: `unspecified`
        :param pulumi.Input[str] urpf: URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
               `strict-allow-vni-hosts` - Default value: `disabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if drop_glean is not None:
            pulumi.set(__self__, "drop_glean", drop_glean)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if unnumbered is not None:
            pulumi.set(__self__, "unnumbered", unnumbered)
        if urpf is not None:
            pulumi.set(__self__, "urpf", urpf)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dropGlean")
    def drop_glean(self) -> Optional[pulumi.Input[str]]:
        """
        ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "drop_glean")

    @drop_glean.setter
    def drop_glean(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_glean", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[str]]:
        """
        ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def unnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
        Default value: `unspecified`
        """
        return pulumi.get(self, "unnumbered")

    @unnumbered.setter
    def unnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unnumbered", value)

    @property
    @pulumi.getter
    def urpf(self) -> Optional[pulumi.Input[str]]:
        """
        URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
        `strict-allow-vni-hosts` - Default value: `disabled`
        """
        return pulumi.get(self, "urpf")

    @urpf.setter
    def urpf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urpf", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


class Ipv4Interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 drop_glean: Optional[pulumi.Input[str]] = None,
                 forward: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 urpf: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage an IPv4 interface.

        - API Documentation: [ipv4If](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:If/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.Ipv4Interface("example",
            drop_glean="disabled",
            forward="disabled",
            interface_id="eth1/10",
            unnumbered="unspecified",
            urpf="disabled",
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4Interface:Ipv4Interface example "sys/ipv4/inst/dom-[default]/if-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] drop_glean: ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] forward: ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] unnumbered: IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
               Default value: `unspecified`
        :param pulumi.Input[str] urpf: URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
               `strict-allow-vni-hosts` - Default value: `disabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ipv4InterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage an IPv4 interface.

        - API Documentation: [ipv4If](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:If/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.Ipv4Interface("example",
            drop_glean="disabled",
            forward="disabled",
            interface_id="eth1/10",
            unnumbered="unspecified",
            urpf="disabled",
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4Interface:Ipv4Interface example "sys/ipv4/inst/dom-[default]/if-[eth1/10]"
        ```

        :param str resource_name: The name of the resource.
        :param Ipv4InterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ipv4InterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 drop_glean: Optional[pulumi.Input[str]] = None,
                 forward: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 urpf: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ipv4InterfaceArgs.__new__(Ipv4InterfaceArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["drop_glean"] = drop_glean
            __props__.__dict__["forward"] = forward
            if interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'interface_id'")
            __props__.__dict__["interface_id"] = interface_id
            __props__.__dict__["unnumbered"] = unnumbered
            __props__.__dict__["urpf"] = urpf
            if vrf is None and not opts.urn:
                raise TypeError("Missing required property 'vrf'")
            __props__.__dict__["vrf"] = vrf
        super(Ipv4Interface, __self__).__init__(
            'nxos:index/ipv4Interface:Ipv4Interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            drop_glean: Optional[pulumi.Input[str]] = None,
            forward: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[str]] = None,
            unnumbered: Optional[pulumi.Input[str]] = None,
            urpf: Optional[pulumi.Input[str]] = None,
            vrf: Optional[pulumi.Input[str]] = None) -> 'Ipv4Interface':
        """
        Get an existing Ipv4Interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] drop_glean: ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] forward: ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] unnumbered: IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
               Default value: `unspecified`
        :param pulumi.Input[str] urpf: URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
               `strict-allow-vni-hosts` - Default value: `disabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ipv4InterfaceState.__new__(_Ipv4InterfaceState)

        __props__.__dict__["device"] = device
        __props__.__dict__["drop_glean"] = drop_glean
        __props__.__dict__["forward"] = forward
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["unnumbered"] = unnumbered
        __props__.__dict__["urpf"] = urpf
        __props__.__dict__["vrf"] = vrf
        return Ipv4Interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dropGlean")
    def drop_glean(self) -> pulumi.Output[str]:
        """
        ip drop-glean enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "drop_glean")

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Output[str]:
        """
        ip forward enabled/disabled. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def unnumbered(self) -> pulumi.Output[str]:
        """
        IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`. -
        Default value: `unspecified`
        """
        return pulumi.get(self, "unnumbered")

    @property
    @pulumi.getter
    def urpf(self) -> pulumi.Output[str]:
        """
        URPF (unicast Reverse Path Forwarding). - Choices: `disabled`, `strict`, `loose`, `loose-allow-default`,
        `strict-allow-vni-hosts` - Default value: `disabled`
        """
        return pulumi.get(self, "urpf")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

