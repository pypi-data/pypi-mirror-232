# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEvpnVniRouteTargetDirectionResult',
    'AwaitableGetEvpnVniRouteTargetDirectionResult',
    'get_evpn_vni_route_target_direction',
    'get_evpn_vni_route_target_direction_output',
]

@pulumi.output_type
class GetEvpnVniRouteTargetDirectionResult:
    """
    A collection of values returned by getEvpnVniRouteTargetDirection.
    """
    def __init__(__self__, device=None, direction=None, encap=None, id=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if encap and not isinstance(encap, str):
            raise TypeError("Expected argument 'encap' to be a str")
        pulumi.set(__self__, "encap", encap)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Route Target direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def encap(self) -> str:
        """
        Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "encap")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")


class AwaitableGetEvpnVniRouteTargetDirectionResult(GetEvpnVniRouteTargetDirectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEvpnVniRouteTargetDirectionResult(
            device=self.device,
            direction=self.direction,
            encap=self.encap,
            id=self.id)


def get_evpn_vni_route_target_direction(device: Optional[str] = None,
                                        direction: Optional[str] = None,
                                        encap: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEvpnVniRouteTargetDirectionResult:
    """
    This data source can read a EVPN VNI Route Target direction.

    - API Documentation: [rtctrlRttP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:RttP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_evpn_vni_route_target_direction(direction="import",
        encap="vxlan-123456")
    ```


    :param str device: A device name from the provider configuration.
    :param str direction: Route Target direction.
    :param str encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['direction'] = direction
    __args__['encap'] = encap
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getEvpnVniRouteTargetDirection:getEvpnVniRouteTargetDirection', __args__, opts=opts, typ=GetEvpnVniRouteTargetDirectionResult).value

    return AwaitableGetEvpnVniRouteTargetDirectionResult(
        device=pulumi.get(__ret__, 'device'),
        direction=pulumi.get(__ret__, 'direction'),
        encap=pulumi.get(__ret__, 'encap'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_evpn_vni_route_target_direction)
def get_evpn_vni_route_target_direction_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                               direction: Optional[pulumi.Input[str]] = None,
                                               encap: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEvpnVniRouteTargetDirectionResult]:
    """
    This data source can read a EVPN VNI Route Target direction.

    - API Documentation: [rtctrlRttP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:RttP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_evpn_vni_route_target_direction(direction="import",
        encap="vxlan-123456")
    ```


    :param str device: A device name from the provider configuration.
    :param str direction: Route Target direction.
    :param str encap: Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
    """
    ...
