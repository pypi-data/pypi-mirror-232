# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSpanningTreeInterfaceResult',
    'AwaitableGetSpanningTreeInterfaceResult',
    'get_spanning_tree_interface',
    'get_spanning_tree_interface_output',
]

@pulumi.output_type
class GetSpanningTreeInterfaceResult:
    """
    A collection of values returned by getSpanningTreeInterface.
    """
    def __init__(__self__, admin_state=None, bpdu_filter=None, bpdu_guard=None, cost=None, device=None, guard=None, id=None, interface_id=None, link_type=None, mode=None, priority=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if bpdu_filter and not isinstance(bpdu_filter, str):
            raise TypeError("Expected argument 'bpdu_filter' to be a str")
        pulumi.set(__self__, "bpdu_filter", bpdu_filter)
        if bpdu_guard and not isinstance(bpdu_guard, str):
            raise TypeError("Expected argument 'bpdu_guard' to be a str")
        pulumi.set(__self__, "bpdu_guard", bpdu_guard)
        if cost and not isinstance(cost, int):
            raise TypeError("Expected argument 'cost' to be a int")
        pulumi.set(__self__, "cost", cost)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if guard and not isinstance(guard, str):
            raise TypeError("Expected argument 'guard' to be a str")
        pulumi.set(__self__, "guard", guard)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)
        if link_type and not isinstance(link_type, str):
            raise TypeError("Expected argument 'link_type' to be a str")
        pulumi.set(__self__, "link_type", link_type)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        The administrative state of the object or policy.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="bpduFilter")
    def bpdu_filter(self) -> str:
        """
        BPDU filter mode.
        """
        return pulumi.get(self, "bpdu_filter")

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> str:
        """
        BPDU guard mode.
        """
        return pulumi.get(self, "bpdu_guard")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Port path cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def guard(self) -> str:
        """
        Guard mode.
        """
        return pulumi.get(self, "guard")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> str:
        """
        Link type.
        """
        return pulumi.get(self, "link_type")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Port mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Port priority.
        """
        return pulumi.get(self, "priority")


class AwaitableGetSpanningTreeInterfaceResult(GetSpanningTreeInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpanningTreeInterfaceResult(
            admin_state=self.admin_state,
            bpdu_filter=self.bpdu_filter,
            bpdu_guard=self.bpdu_guard,
            cost=self.cost,
            device=self.device,
            guard=self.guard,
            id=self.id,
            interface_id=self.interface_id,
            link_type=self.link_type,
            mode=self.mode,
            priority=self.priority)


def get_spanning_tree_interface(device: Optional[str] = None,
                                interface_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSpanningTreeInterfaceResult:
    """
    This data source can read the Spanning Tree interface configuration.

    - API Documentation: [stpIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Discovery%20Protocols/stp:If/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_spanning_tree_interface(interface_id="eth1/9")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getSpanningTreeInterface:getSpanningTreeInterface', __args__, opts=opts, typ=GetSpanningTreeInterfaceResult).value

    return AwaitableGetSpanningTreeInterfaceResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        bpdu_filter=pulumi.get(__ret__, 'bpdu_filter'),
        bpdu_guard=pulumi.get(__ret__, 'bpdu_guard'),
        cost=pulumi.get(__ret__, 'cost'),
        device=pulumi.get(__ret__, 'device'),
        guard=pulumi.get(__ret__, 'guard'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'),
        link_type=pulumi.get(__ret__, 'link_type'),
        mode=pulumi.get(__ret__, 'mode'),
        priority=pulumi.get(__ret__, 'priority'))


@_utilities.lift_output_func(get_spanning_tree_interface)
def get_spanning_tree_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                       interface_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSpanningTreeInterfaceResult]:
    """
    This data source can read the Spanning Tree interface configuration.

    - API Documentation: [stpIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Discovery%20Protocols/stp:If/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_spanning_tree_interface(interface_id="eth1/9")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    ...
