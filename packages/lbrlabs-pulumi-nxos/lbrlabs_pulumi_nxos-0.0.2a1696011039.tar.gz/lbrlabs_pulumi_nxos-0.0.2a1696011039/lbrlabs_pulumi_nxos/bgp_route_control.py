# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BgpRouteControlArgs', 'BgpRouteControl']

@pulumi.input_type
class BgpRouteControlArgs:
    def __init__(__self__, *,
                 asn: pulumi.Input[str],
                 vrf: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fib_accelerate: Optional[pulumi.Input[str]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[str]] = None,
                 suppress_routes: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BgpRouteControl resource.
        :param pulumi.Input[str] asn: Autonomous system number.
        :param pulumi.Input[str] vrf: VRF name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] enforce_first_as: Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
               `enabled`
        :param pulumi.Input[str] fib_accelerate: Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
               `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] log_neighbor_changes: Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] suppress_routes: Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
               - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "vrf", vrf)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enforce_first_as is not None:
            pulumi.set(__self__, "enforce_first_as", enforce_first_as)
        if fib_accelerate is not None:
            pulumi.set(__self__, "fib_accelerate", fib_accelerate)
        if log_neighbor_changes is not None:
            pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if suppress_routes is not None:
            pulumi.set(__self__, "suppress_routes", suppress_routes)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Input[str]:
        """
        Autonomous system number.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: pulumi.Input[str]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
        `enabled`
        """
        return pulumi.get(self, "enforce_first_as")

    @enforce_first_as.setter
    def enforce_first_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_first_as", value)

    @property
    @pulumi.getter(name="fibAccelerate")
    def fib_accelerate(self) -> Optional[pulumi.Input[str]]:
        """
        Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
        `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "fib_accelerate")

    @fib_accelerate.setter
    def fib_accelerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fib_accelerate", value)

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "log_neighbor_changes")

    @log_neighbor_changes.setter
    def log_neighbor_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbor_changes", value)

    @property
    @pulumi.getter(name="suppressRoutes")
    def suppress_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
        - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "suppress_routes")

    @suppress_routes.setter
    def suppress_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suppress_routes", value)


@pulumi.input_type
class _BgpRouteControlState:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fib_accelerate: Optional[pulumi.Input[str]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[str]] = None,
                 suppress_routes: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BgpRouteControl resources.
        :param pulumi.Input[str] asn: Autonomous system number.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] enforce_first_as: Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
               `enabled`
        :param pulumi.Input[str] fib_accelerate: Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
               `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] log_neighbor_changes: Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] suppress_routes: Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
               - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enforce_first_as is not None:
            pulumi.set(__self__, "enforce_first_as", enforce_first_as)
        if fib_accelerate is not None:
            pulumi.set(__self__, "fib_accelerate", fib_accelerate)
        if log_neighbor_changes is not None:
            pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if suppress_routes is not None:
            pulumi.set(__self__, "suppress_routes", suppress_routes)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[str]]:
        """
        Autonomous system number.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
        `enabled`
        """
        return pulumi.get(self, "enforce_first_as")

    @enforce_first_as.setter
    def enforce_first_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_first_as", value)

    @property
    @pulumi.getter(name="fibAccelerate")
    def fib_accelerate(self) -> Optional[pulumi.Input[str]]:
        """
        Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
        `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "fib_accelerate")

    @fib_accelerate.setter
    def fib_accelerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fib_accelerate", value)

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "log_neighbor_changes")

    @log_neighbor_changes.setter
    def log_neighbor_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbor_changes", value)

    @property
    @pulumi.getter(name="suppressRoutes")
    def suppress_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
        - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "suppress_routes")

    @suppress_routes.setter
    def suppress_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suppress_routes", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


class BgpRouteControl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fib_accelerate: Optional[pulumi.Input[str]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[str]] = None,
                 suppress_routes: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the BGP Route Control configuration.

        - API Documentation: [bgpRtCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:RtCtrl/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.BgpRouteControl("example",
            asn="65001",
            enforce_first_as="disabled",
            fib_accelerate="enabled",
            log_neighbor_changes="enabled",
            suppress_routes="disabled",
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/bgpRouteControl:BgpRouteControl example "sys/bgp/inst/dom-[default]/rtctrl"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asn: Autonomous system number.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] enforce_first_as: Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
               `enabled`
        :param pulumi.Input[str] fib_accelerate: Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
               `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] log_neighbor_changes: Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] suppress_routes: Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
               - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BgpRouteControlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the BGP Route Control configuration.

        - API Documentation: [bgpRtCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:RtCtrl/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.BgpRouteControl("example",
            asn="65001",
            enforce_first_as="disabled",
            fib_accelerate="enabled",
            log_neighbor_changes="enabled",
            suppress_routes="disabled",
            vrf="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/bgpRouteControl:BgpRouteControl example "sys/bgp/inst/dom-[default]/rtctrl"
        ```

        :param str resource_name: The name of the resource.
        :param BgpRouteControlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BgpRouteControlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fib_accelerate: Optional[pulumi.Input[str]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[str]] = None,
                 suppress_routes: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BgpRouteControlArgs.__new__(BgpRouteControlArgs)

            if asn is None and not opts.urn:
                raise TypeError("Missing required property 'asn'")
            __props__.__dict__["asn"] = asn
            __props__.__dict__["device"] = device
            __props__.__dict__["enforce_first_as"] = enforce_first_as
            __props__.__dict__["fib_accelerate"] = fib_accelerate
            __props__.__dict__["log_neighbor_changes"] = log_neighbor_changes
            __props__.__dict__["suppress_routes"] = suppress_routes
            if vrf is None and not opts.urn:
                raise TypeError("Missing required property 'vrf'")
            __props__.__dict__["vrf"] = vrf
        super(BgpRouteControl, __self__).__init__(
            'nxos:index/bgpRouteControl:BgpRouteControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asn: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            enforce_first_as: Optional[pulumi.Input[str]] = None,
            fib_accelerate: Optional[pulumi.Input[str]] = None,
            log_neighbor_changes: Optional[pulumi.Input[str]] = None,
            suppress_routes: Optional[pulumi.Input[str]] = None,
            vrf: Optional[pulumi.Input[str]] = None) -> 'BgpRouteControl':
        """
        Get an existing BgpRouteControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asn: Autonomous system number.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] enforce_first_as: Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
               `enabled`
        :param pulumi.Input[str] fib_accelerate: Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
               `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] log_neighbor_changes: Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[str] suppress_routes: Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
               - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[str] vrf: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BgpRouteControlState.__new__(_BgpRouteControlState)

        __props__.__dict__["asn"] = asn
        __props__.__dict__["device"] = device
        __props__.__dict__["enforce_first_as"] = enforce_first_as
        __props__.__dict__["fib_accelerate"] = fib_accelerate
        __props__.__dict__["log_neighbor_changes"] = log_neighbor_changes
        __props__.__dict__["suppress_routes"] = suppress_routes
        __props__.__dict__["vrf"] = vrf
        return BgpRouteControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Output[str]:
        """
        Autonomous system number.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> pulumi.Output[str]:
        """
        Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
        `enabled`
        """
        return pulumi.get(self, "enforce_first_as")

    @property
    @pulumi.getter(name="fibAccelerate")
    def fib_accelerate(self) -> pulumi.Output[str]:
        """
        Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
        `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "fib_accelerate")

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> pulumi.Output[str]:
        """
        Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "log_neighbor_changes")

    @property
    @pulumi.getter(name="suppressRoutes")
    def suppress_routes(self) -> pulumi.Output[str]:
        """
        Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
        - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "suppress_routes")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")

