# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RestArgs', 'Rest']

@pulumi.input_type
class RestArgs:
    def __init__(__self__, *,
                 class_name: pulumi.Input[str],
                 dn: pulumi.Input[str],
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rest resource.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        :param pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]] childrens: List of children.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs that need to be passed to the Model object as parameters.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "dn", dn)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Input[str]:
        """
        Which class object is being created. (Make sure there is no colon in the classname)
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Input[str]:
        """
        Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        return pulumi.get(self, "dn")

    @dn.setter
    def dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "dn", value)

    @property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]]:
        """
        List of children.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]]):
        pulumi.set(self, "childrens", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs that need to be passed to the Model object as parameters.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


@pulumi.input_type
class _RestState:
    def __init__(__self__, *,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Rest resources.
        :param pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]] childrens: List of children.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs that need to be passed to the Model object as parameters.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if class_name is not None:
            pulumi.set(__self__, "class_name", class_name)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dn is not None:
            pulumi.set(__self__, "dn", dn)

    @property
    @pulumi.getter
    def childrens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]]:
        """
        List of children.
        """
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestChildrenArgs']]]]):
        pulumi.set(self, "childrens", value)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Which class object is being created. (Make sure there is no colon in the classname)
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs that need to be passed to the Model object as parameters.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def dn(self) -> Optional[pulumi.Input[str]]:
        """
        Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        return pulumi.get(self, "dn")

    @dn.setter
    def dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dn", value)


class Rest(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestChildrenArgs']]]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages NX-OS DME Objects via REST API calls. This resource can manage a single API object and its children. It is able to read the state and therefore reconcile configuration drift.

        ## Import

        ```sh
         $ pulumi import nxos:index/rest:Rest l1PhysIf" "l1PhysIf:sys/intf/phys-[eth1/1]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestChildrenArgs']]]] childrens: List of children.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs that need to be passed to the Model object as parameters.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages NX-OS DME Objects via REST API calls. This resource can manage a single API object and its children. It is able to read the state and therefore reconcile configuration drift.

        ## Import

        ```sh
         $ pulumi import nxos:index/rest:Rest l1PhysIf" "l1PhysIf:sys/intf/phys-[eth1/1]"
        ```

        :param str resource_name: The name of the resource.
        :param RestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 childrens: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestChildrenArgs']]]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestArgs.__new__(RestArgs)

            __props__.__dict__["childrens"] = childrens
            if class_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_name'")
            __props__.__dict__["class_name"] = class_name
            __props__.__dict__["content"] = content
            __props__.__dict__["delete"] = delete
            __props__.__dict__["device"] = device
            if dn is None and not opts.urn:
                raise TypeError("Missing required property 'dn'")
            __props__.__dict__["dn"] = dn
        super(Rest, __self__).__init__(
            'nxos:index/rest:Rest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            childrens: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestChildrenArgs']]]]] = None,
            class_name: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            delete: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dn: Optional[pulumi.Input[str]] = None) -> 'Rest':
        """
        Get an existing Rest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestChildrenArgs']]]] childrens: List of children.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs that need to be passed to the Model object as parameters.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestState.__new__(_RestState)

        __props__.__dict__["childrens"] = childrens
        __props__.__dict__["class_name"] = class_name
        __props__.__dict__["content"] = content
        __props__.__dict__["delete"] = delete
        __props__.__dict__["device"] = device
        __props__.__dict__["dn"] = dn
        return Rest(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def childrens(self) -> pulumi.Output[Optional[Sequence['outputs.RestChildren']]]:
        """
        List of children.
        """
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Output[str]:
        """
        Which class object is being created. (Make sure there is no colon in the classname)
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of key-value pairs that need to be passed to the Model object as parameters.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def delete(self) -> pulumi.Output[bool]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Output[str]:
        """
        Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        """
        return pulumi.get(self, "dn")

