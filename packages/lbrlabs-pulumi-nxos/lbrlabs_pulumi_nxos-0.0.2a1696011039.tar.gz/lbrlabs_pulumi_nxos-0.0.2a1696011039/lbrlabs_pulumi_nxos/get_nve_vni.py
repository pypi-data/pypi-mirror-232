# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNveVniResult',
    'AwaitableGetNveVniResult',
    'get_nve_vni',
    'get_nve_vni_output',
]

@pulumi.output_type
class GetNveVniResult:
    """
    A collection of values returned by getNveVni.
    """
    def __init__(__self__, associate_vrf=None, device=None, id=None, multicast_group=None, multisite_ingress_replication=None, suppress_arp=None, vni=None):
        if associate_vrf and not isinstance(associate_vrf, bool):
            raise TypeError("Expected argument 'associate_vrf' to be a bool")
        pulumi.set(__self__, "associate_vrf", associate_vrf)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if multicast_group and not isinstance(multicast_group, str):
            raise TypeError("Expected argument 'multicast_group' to be a str")
        pulumi.set(__self__, "multicast_group", multicast_group)
        if multisite_ingress_replication and not isinstance(multisite_ingress_replication, str):
            raise TypeError("Expected argument 'multisite_ingress_replication' to be a str")
        pulumi.set(__self__, "multisite_ingress_replication", multisite_ingress_replication)
        if suppress_arp and not isinstance(suppress_arp, str):
            raise TypeError("Expected argument 'suppress_arp' to be a str")
        pulumi.set(__self__, "suppress_arp", suppress_arp)
        if vni and not isinstance(vni, int):
            raise TypeError("Expected argument 'vni' to be a int")
        pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="associateVrf")
    def associate_vrf(self) -> bool:
        """
        Configures VNI as L3 VNI.
        """
        return pulumi.get(self, "associate_vrf")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multicastGroup")
    def multicast_group(self) -> str:
        """
        Configures multicast group address for VNI.
        """
        return pulumi.get(self, "multicast_group")

    @property
    @pulumi.getter(name="multisiteIngressReplication")
    def multisite_ingress_replication(self) -> str:
        """
        Enable or disable Multisite Ingress Replication for VNI(s).
        """
        return pulumi.get(self, "multisite_ingress_replication")

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> str:
        """
        Enable or disable ARP suppression for VNI(s).
        """
        return pulumi.get(self, "suppress_arp")

    @property
    @pulumi.getter
    def vni(self) -> int:
        """
        Virtual Network ID.
        """
        return pulumi.get(self, "vni")


class AwaitableGetNveVniResult(GetNveVniResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNveVniResult(
            associate_vrf=self.associate_vrf,
            device=self.device,
            id=self.id,
            multicast_group=self.multicast_group,
            multisite_ingress_replication=self.multisite_ingress_replication,
            suppress_arp=self.suppress_arp,
            vni=self.vni)


def get_nve_vni(device: Optional[str] = None,
                vni: Optional[int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNveVniResult:
    """
    This data source can read the configuration of Virtual Network ID (VNI).

    - API Documentation: [nvoNw](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Nw/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_nve_vni(vni=103100)
    ```


    :param str device: A device name from the provider configuration.
    :param int vni: Virtual Network ID.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['vni'] = vni
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getNveVni:getNveVni', __args__, opts=opts, typ=GetNveVniResult).value

    return AwaitableGetNveVniResult(
        associate_vrf=pulumi.get(__ret__, 'associate_vrf'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        multicast_group=pulumi.get(__ret__, 'multicast_group'),
        multisite_ingress_replication=pulumi.get(__ret__, 'multisite_ingress_replication'),
        suppress_arp=pulumi.get(__ret__, 'suppress_arp'),
        vni=pulumi.get(__ret__, 'vni'))


@_utilities.lift_output_func(get_nve_vni)
def get_nve_vni_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                       vni: Optional[pulumi.Input[int]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNveVniResult]:
    """
    This data source can read the configuration of Virtual Network ID (VNI).

    - API Documentation: [nvoNw](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Nw/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_nve_vni(vni=103100)
    ```


    :param str device: A device name from the provider configuration.
    :param int vni: Virtual Network ID.
    """
    ...
