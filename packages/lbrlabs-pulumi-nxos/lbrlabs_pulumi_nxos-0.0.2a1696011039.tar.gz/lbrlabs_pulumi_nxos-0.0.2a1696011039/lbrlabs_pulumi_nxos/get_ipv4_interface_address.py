# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIpv4InterfaceAddressResult',
    'AwaitableGetIpv4InterfaceAddressResult',
    'get_ipv4_interface_address',
    'get_ipv4_interface_address_output',
]

@pulumi.output_type
class GetIpv4InterfaceAddressResult:
    """
    A collection of values returned by getIpv4InterfaceAddress.
    """
    def __init__(__self__, address=None, device=None, id=None, interface_id=None, type=None, vrf=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vrf and not isinstance(vrf, str):
            raise TypeError("Expected argument 'vrf' to be a str")
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        IPv4 address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Address type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf")


class AwaitableGetIpv4InterfaceAddressResult(GetIpv4InterfaceAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpv4InterfaceAddressResult(
            address=self.address,
            device=self.device,
            id=self.id,
            interface_id=self.interface_id,
            type=self.type,
            vrf=self.vrf)


def get_ipv4_interface_address(address: Optional[str] = None,
                               device: Optional[str] = None,
                               interface_id: Optional[str] = None,
                               vrf: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpv4InterfaceAddressResult:
    """
    This data source can read an IPv4 interface address.

    - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_interface_address(address="24.63.46.49/30",
        interface_id="eth1/10",
        vrf="default")
    ```


    :param str address: IPv4 address.
    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    :param str vrf: VRF name.
    """
    __args__ = dict()
    __args__['address'] = address
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    __args__['vrf'] = vrf
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIpv4InterfaceAddress:getIpv4InterfaceAddress', __args__, opts=opts, typ=GetIpv4InterfaceAddressResult).value

    return AwaitableGetIpv4InterfaceAddressResult(
        address=pulumi.get(__ret__, 'address'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'),
        type=pulumi.get(__ret__, 'type'),
        vrf=pulumi.get(__ret__, 'vrf'))


@_utilities.lift_output_func(get_ipv4_interface_address)
def get_ipv4_interface_address_output(address: Optional[pulumi.Input[str]] = None,
                                      device: Optional[pulumi.Input[Optional[str]]] = None,
                                      interface_id: Optional[pulumi.Input[str]] = None,
                                      vrf: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpv4InterfaceAddressResult]:
    """
    This data source can read an IPv4 interface address.

    - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_interface_address(address="24.63.46.49/30",
        interface_id="eth1/10",
        vrf="default")
    ```


    :param str address: IPv4 address.
    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    :param str vrf: VRF name.
    """
    ...
