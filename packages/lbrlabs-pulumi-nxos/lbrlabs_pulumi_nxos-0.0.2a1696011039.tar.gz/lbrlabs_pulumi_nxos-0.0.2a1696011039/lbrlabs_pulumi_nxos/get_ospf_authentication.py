# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOspfAuthenticationResult',
    'AwaitableGetOspfAuthenticationResult',
    'get_ospf_authentication',
    'get_ospf_authentication_output',
]

@pulumi.output_type
class GetOspfAuthenticationResult:
    """
    A collection of values returned by getOspfAuthentication.
    """
    def __init__(__self__, device=None, id=None, instance_name=None, interface_id=None, key=None, key_id=None, key_secure_mode=None, keychain=None, md5_key=None, md5_key_secure_mode=None, type=None, vrf_name=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if key_id and not isinstance(key_id, int):
            raise TypeError("Expected argument 'key_id' to be a int")
        pulumi.set(__self__, "key_id", key_id)
        if key_secure_mode and not isinstance(key_secure_mode, bool):
            raise TypeError("Expected argument 'key_secure_mode' to be a bool")
        pulumi.set(__self__, "key_secure_mode", key_secure_mode)
        if keychain and not isinstance(keychain, str):
            raise TypeError("Expected argument 'keychain' to be a str")
        pulumi.set(__self__, "keychain", keychain)
        if md5_key and not isinstance(md5_key, str):
            raise TypeError("Expected argument 'md5_key' to be a str")
        pulumi.set(__self__, "md5_key", md5_key)
        if md5_key_secure_mode and not isinstance(md5_key_secure_mode, bool):
            raise TypeError("Expected argument 'md5_key_secure_mode' to be a bool")
        pulumi.set(__self__, "md5_key_secure_mode", md5_key_secure_mode)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vrf_name and not isinstance(vrf_name, str):
            raise TypeError("Expected argument 'vrf_name' to be a str")
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key used for authentication.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> int:
        """
        Key ID used for authentication.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keySecureMode")
    def key_secure_mode(self) -> bool:
        """
        Encrypted authentication key or plain text key.
        """
        return pulumi.get(self, "key_secure_mode")

    @property
    @pulumi.getter
    def keychain(self) -> str:
        """
        Authentication keychain.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        """
        Key used for md5 authentication.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5KeySecureMode")
    def md5_key_secure_mode(self) -> bool:
        """
        Encrypted authentication md5 key or plain text key.
        """
        return pulumi.get(self, "md5_key_secure_mode")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Authentication type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")


class AwaitableGetOspfAuthenticationResult(GetOspfAuthenticationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOspfAuthenticationResult(
            device=self.device,
            id=self.id,
            instance_name=self.instance_name,
            interface_id=self.interface_id,
            key=self.key,
            key_id=self.key_id,
            key_secure_mode=self.key_secure_mode,
            keychain=self.keychain,
            md5_key=self.md5_key,
            md5_key_secure_mode=self.md5_key_secure_mode,
            type=self.type,
            vrf_name=self.vrf_name)


def get_ospf_authentication(device: Optional[str] = None,
                            instance_name: Optional[str] = None,
                            interface_id: Optional[str] = None,
                            vrf_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOspfAuthenticationResult:
    """
    This data source can read the OSPF authentication configuration.

    - API Documentation: [ospfAuthNewP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:AuthNewP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ospf_authentication(instance_name="OSPF1",
        interface_id="eth1/10",
        vrf_name="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: OSPF instance name.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    :param str vrf_name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['instanceName'] = instance_name
    __args__['interfaceId'] = interface_id
    __args__['vrfName'] = vrf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getOspfAuthentication:getOspfAuthentication', __args__, opts=opts, typ=GetOspfAuthenticationResult).value

    return AwaitableGetOspfAuthenticationResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        interface_id=pulumi.get(__ret__, 'interface_id'),
        key=pulumi.get(__ret__, 'key'),
        key_id=pulumi.get(__ret__, 'key_id'),
        key_secure_mode=pulumi.get(__ret__, 'key_secure_mode'),
        keychain=pulumi.get(__ret__, 'keychain'),
        md5_key=pulumi.get(__ret__, 'md5_key'),
        md5_key_secure_mode=pulumi.get(__ret__, 'md5_key_secure_mode'),
        type=pulumi.get(__ret__, 'type'),
        vrf_name=pulumi.get(__ret__, 'vrf_name'))


@_utilities.lift_output_func(get_ospf_authentication)
def get_ospf_authentication_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                   instance_name: Optional[pulumi.Input[str]] = None,
                                   interface_id: Optional[pulumi.Input[str]] = None,
                                   vrf_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOspfAuthenticationResult]:
    """
    This data source can read the OSPF authentication configuration.

    - API Documentation: [ospfAuthNewP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:AuthNewP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ospf_authentication(instance_name="OSPF1",
        interface_id="eth1/10",
        vrf_name="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: OSPF instance name.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    :param str vrf_name: VRF name.
    """
    ...
