# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetVpcDomainResult',
    'AwaitableGetVpcDomainResult',
    'get_vpc_domain',
    'get_vpc_domain_output',
]

@pulumi.output_type
class GetVpcDomainResult:
    """
    A collection of values returned by getVpcDomain.
    """
    def __init__(__self__, admin_state=None, auto_recovery=None, auto_recovery_interval=None, delay_restore_orphan_port=None, delay_restore_svi=None, delay_restore_vpc=None, device=None, domain_id=None, dscp=None, fast_convergence=None, graceful_consistency_check=None, id=None, l3_peer_router=None, l3_peer_router_syslog=None, l3_peer_router_syslog_interval=None, peer_gateway=None, peer_ip=None, peer_switch=None, role_priority=None, sys_mac=None, system_priority=None, track=None, virtual_ip=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if auto_recovery and not isinstance(auto_recovery, str):
            raise TypeError("Expected argument 'auto_recovery' to be a str")
        pulumi.set(__self__, "auto_recovery", auto_recovery)
        if auto_recovery_interval and not isinstance(auto_recovery_interval, int):
            raise TypeError("Expected argument 'auto_recovery_interval' to be a int")
        pulumi.set(__self__, "auto_recovery_interval", auto_recovery_interval)
        if delay_restore_orphan_port and not isinstance(delay_restore_orphan_port, int):
            raise TypeError("Expected argument 'delay_restore_orphan_port' to be a int")
        pulumi.set(__self__, "delay_restore_orphan_port", delay_restore_orphan_port)
        if delay_restore_svi and not isinstance(delay_restore_svi, int):
            raise TypeError("Expected argument 'delay_restore_svi' to be a int")
        pulumi.set(__self__, "delay_restore_svi", delay_restore_svi)
        if delay_restore_vpc and not isinstance(delay_restore_vpc, int):
            raise TypeError("Expected argument 'delay_restore_vpc' to be a int")
        pulumi.set(__self__, "delay_restore_vpc", delay_restore_vpc)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if domain_id and not isinstance(domain_id, int):
            raise TypeError("Expected argument 'domain_id' to be a int")
        pulumi.set(__self__, "domain_id", domain_id)
        if dscp and not isinstance(dscp, int):
            raise TypeError("Expected argument 'dscp' to be a int")
        pulumi.set(__self__, "dscp", dscp)
        if fast_convergence and not isinstance(fast_convergence, str):
            raise TypeError("Expected argument 'fast_convergence' to be a str")
        pulumi.set(__self__, "fast_convergence", fast_convergence)
        if graceful_consistency_check and not isinstance(graceful_consistency_check, str):
            raise TypeError("Expected argument 'graceful_consistency_check' to be a str")
        pulumi.set(__self__, "graceful_consistency_check", graceful_consistency_check)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if l3_peer_router and not isinstance(l3_peer_router, str):
            raise TypeError("Expected argument 'l3_peer_router' to be a str")
        pulumi.set(__self__, "l3_peer_router", l3_peer_router)
        if l3_peer_router_syslog and not isinstance(l3_peer_router_syslog, str):
            raise TypeError("Expected argument 'l3_peer_router_syslog' to be a str")
        pulumi.set(__self__, "l3_peer_router_syslog", l3_peer_router_syslog)
        if l3_peer_router_syslog_interval and not isinstance(l3_peer_router_syslog_interval, int):
            raise TypeError("Expected argument 'l3_peer_router_syslog_interval' to be a int")
        pulumi.set(__self__, "l3_peer_router_syslog_interval", l3_peer_router_syslog_interval)
        if peer_gateway and not isinstance(peer_gateway, str):
            raise TypeError("Expected argument 'peer_gateway' to be a str")
        pulumi.set(__self__, "peer_gateway", peer_gateway)
        if peer_ip and not isinstance(peer_ip, str):
            raise TypeError("Expected argument 'peer_ip' to be a str")
        pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_switch and not isinstance(peer_switch, str):
            raise TypeError("Expected argument 'peer_switch' to be a str")
        pulumi.set(__self__, "peer_switch", peer_switch)
        if role_priority and not isinstance(role_priority, int):
            raise TypeError("Expected argument 'role_priority' to be a int")
        pulumi.set(__self__, "role_priority", role_priority)
        if sys_mac and not isinstance(sys_mac, str):
            raise TypeError("Expected argument 'sys_mac' to be a str")
        pulumi.set(__self__, "sys_mac", sys_mac)
        if system_priority and not isinstance(system_priority, int):
            raise TypeError("Expected argument 'system_priority' to be a int")
        pulumi.set(__self__, "system_priority", system_priority)
        if track and not isinstance(track, int):
            raise TypeError("Expected argument 'track' to be a int")
        pulumi.set(__self__, "track", track)
        if virtual_ip and not isinstance(virtual_ip, str):
            raise TypeError("Expected argument 'virtual_ip' to be a str")
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        vPC suspend locally.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="autoRecovery")
    def auto_recovery(self) -> str:
        """
        Auto Recovery.
        """
        return pulumi.get(self, "auto_recovery")

    @property
    @pulumi.getter(name="autoRecoveryInterval")
    def auto_recovery_interval(self) -> int:
        """
        Auto Recovery interval.
        """
        return pulumi.get(self, "auto_recovery_interval")

    @property
    @pulumi.getter(name="delayRestoreOrphanPort")
    def delay_restore_orphan_port(self) -> int:
        """
        Delay restore for orphan ports.
        """
        return pulumi.get(self, "delay_restore_orphan_port")

    @property
    @pulumi.getter(name="delayRestoreSvi")
    def delay_restore_svi(self) -> int:
        """
        Delay restore for SVI.
        """
        return pulumi.get(self, "delay_restore_svi")

    @property
    @pulumi.getter(name="delayRestoreVpc")
    def delay_restore_vpc(self) -> int:
        """
        Delay restore for vPC links.
        """
        return pulumi.get(self, "delay_restore_vpc")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> int:
        """
        Domain id.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        """
        DSCP.
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="fastConvergence")
    def fast_convergence(self) -> str:
        """
        Fast Convergence.
        """
        return pulumi.get(self, "fast_convergence")

    @property
    @pulumi.getter(name="gracefulConsistencyCheck")
    def graceful_consistency_check(self) -> str:
        """
        Graceful Type-1 Consistency Check.
        """
        return pulumi.get(self, "graceful_consistency_check")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="l3PeerRouter")
    def l3_peer_router(self) -> str:
        """
        L3 Peer Router.
        """
        return pulumi.get(self, "l3_peer_router")

    @property
    @pulumi.getter(name="l3PeerRouterSyslog")
    def l3_peer_router_syslog(self) -> str:
        """
        L3 Peer Router Syslog.
        """
        return pulumi.get(self, "l3_peer_router_syslog")

    @property
    @pulumi.getter(name="l3PeerRouterSyslogInterval")
    def l3_peer_router_syslog_interval(self) -> int:
        """
        L3 Peer Router Syslog Interval.
        """
        return pulumi.get(self, "l3_peer_router_syslog_interval")

    @property
    @pulumi.getter(name="peerGateway")
    def peer_gateway(self) -> str:
        """
        Peer Gateway.
        """
        return pulumi.get(self, "peer_gateway")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> str:
        """
        vPC peer IP address.
        """
        return pulumi.get(self, "peer_ip")

    @property
    @pulumi.getter(name="peerSwitch")
    def peer_switch(self) -> str:
        """
        vPC pair switches.
        """
        return pulumi.get(self, "peer_switch")

    @property
    @pulumi.getter(name="rolePriority")
    def role_priority(self) -> int:
        """
        Role priority.
        """
        return pulumi.get(self, "role_priority")

    @property
    @pulumi.getter(name="sysMac")
    def sys_mac(self) -> str:
        """
        System MAC.
        """
        return pulumi.get(self, "sys_mac")

    @property
    @pulumi.getter(name="systemPriority")
    def system_priority(self) -> int:
        """
        System priority.
        """
        return pulumi.get(self, "system_priority")

    @property
    @pulumi.getter
    def track(self) -> int:
        """
        Tracking object to suspend vPC if object goes down.
        """
        return pulumi.get(self, "track")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        """
        vPC virtual IP address (vIP).
        """
        return pulumi.get(self, "virtual_ip")


class AwaitableGetVpcDomainResult(GetVpcDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcDomainResult(
            admin_state=self.admin_state,
            auto_recovery=self.auto_recovery,
            auto_recovery_interval=self.auto_recovery_interval,
            delay_restore_orphan_port=self.delay_restore_orphan_port,
            delay_restore_svi=self.delay_restore_svi,
            delay_restore_vpc=self.delay_restore_vpc,
            device=self.device,
            domain_id=self.domain_id,
            dscp=self.dscp,
            fast_convergence=self.fast_convergence,
            graceful_consistency_check=self.graceful_consistency_check,
            id=self.id,
            l3_peer_router=self.l3_peer_router,
            l3_peer_router_syslog=self.l3_peer_router_syslog,
            l3_peer_router_syslog_interval=self.l3_peer_router_syslog_interval,
            peer_gateway=self.peer_gateway,
            peer_ip=self.peer_ip,
            peer_switch=self.peer_switch,
            role_priority=self.role_priority,
            sys_mac=self.sys_mac,
            system_priority=self.system_priority,
            track=self.track,
            virtual_ip=self.virtual_ip)


def get_vpc_domain(device: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcDomainResult:
    """
    This data source can read the vPC domain configuration.

    - API Documentation: [vpcDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_vpc_domain()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getVpcDomain:getVpcDomain', __args__, opts=opts, typ=GetVpcDomainResult).value

    return AwaitableGetVpcDomainResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        auto_recovery=pulumi.get(__ret__, 'auto_recovery'),
        auto_recovery_interval=pulumi.get(__ret__, 'auto_recovery_interval'),
        delay_restore_orphan_port=pulumi.get(__ret__, 'delay_restore_orphan_port'),
        delay_restore_svi=pulumi.get(__ret__, 'delay_restore_svi'),
        delay_restore_vpc=pulumi.get(__ret__, 'delay_restore_vpc'),
        device=pulumi.get(__ret__, 'device'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        dscp=pulumi.get(__ret__, 'dscp'),
        fast_convergence=pulumi.get(__ret__, 'fast_convergence'),
        graceful_consistency_check=pulumi.get(__ret__, 'graceful_consistency_check'),
        id=pulumi.get(__ret__, 'id'),
        l3_peer_router=pulumi.get(__ret__, 'l3_peer_router'),
        l3_peer_router_syslog=pulumi.get(__ret__, 'l3_peer_router_syslog'),
        l3_peer_router_syslog_interval=pulumi.get(__ret__, 'l3_peer_router_syslog_interval'),
        peer_gateway=pulumi.get(__ret__, 'peer_gateway'),
        peer_ip=pulumi.get(__ret__, 'peer_ip'),
        peer_switch=pulumi.get(__ret__, 'peer_switch'),
        role_priority=pulumi.get(__ret__, 'role_priority'),
        sys_mac=pulumi.get(__ret__, 'sys_mac'),
        system_priority=pulumi.get(__ret__, 'system_priority'),
        track=pulumi.get(__ret__, 'track'),
        virtual_ip=pulumi.get(__ret__, 'virtual_ip'))


@_utilities.lift_output_func(get_vpc_domain)
def get_vpc_domain_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVpcDomainResult]:
    """
    This data source can read the vPC domain configuration.

    - API Documentation: [vpcDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_vpc_domain()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
