# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetLoopbackInterfaceResult',
    'AwaitableGetLoopbackInterfaceResult',
    'get_loopback_interface',
    'get_loopback_interface_output',
]

@pulumi.output_type
class GetLoopbackInterfaceResult:
    """
    A collection of values returned by getLoopbackInterface.
    """
    def __init__(__self__, admin_state=None, description=None, device=None, id=None, interface_id=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        Administrative state.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Interface description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `lo123`.
        """
        return pulumi.get(self, "interface_id")


class AwaitableGetLoopbackInterfaceResult(GetLoopbackInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoopbackInterfaceResult(
            admin_state=self.admin_state,
            description=self.description,
            device=self.device,
            id=self.id,
            interface_id=self.interface_id)


def get_loopback_interface(device: Optional[str] = None,
                           interface_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoopbackInterfaceResult:
    """
    This data source can read a loopback interface.

    - API Documentation: [l3LbRtdIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/l3:LbRtdIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_loopback_interface(interface_id="lo123")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `lo123`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getLoopbackInterface:getLoopbackInterface', __args__, opts=opts, typ=GetLoopbackInterfaceResult).value

    return AwaitableGetLoopbackInterfaceResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'))


@_utilities.lift_output_func(get_loopback_interface)
def get_loopback_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                  interface_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoopbackInterfaceResult]:
    """
    This data source can read a loopback interface.

    - API Documentation: [l3LbRtdIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/l3:LbRtdIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_loopback_interface(interface_id="lo123")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `lo123`.
    """
    ...
