# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPhysicalInterfaceResult',
    'AwaitableGetPhysicalInterfaceResult',
    'get_physical_interface',
    'get_physical_interface_output',
]

@pulumi.output_type
class GetPhysicalInterfaceResult:
    """
    A collection of values returned by getPhysicalInterface.
    """
    def __init__(__self__, access_vlan=None, admin_state=None, auto_negotiation=None, bandwidth=None, delay=None, description=None, device=None, duplex=None, fec_mode=None, id=None, interface_id=None, layer=None, link_debounce_down=None, link_debounce_up=None, link_logging=None, medium=None, mode=None, mtu=None, native_vlan=None, speed=None, speed_group=None, trunk_vlans=None, uni_directional_ethernet=None, user_configured_flags=None):
        if access_vlan and not isinstance(access_vlan, str):
            raise TypeError("Expected argument 'access_vlan' to be a str")
        pulumi.set(__self__, "access_vlan", access_vlan)
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if auto_negotiation and not isinstance(auto_negotiation, str):
            raise TypeError("Expected argument 'auto_negotiation' to be a str")
        pulumi.set(__self__, "auto_negotiation", auto_negotiation)
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if delay and not isinstance(delay, int):
            raise TypeError("Expected argument 'delay' to be a int")
        pulumi.set(__self__, "delay", delay)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if duplex and not isinstance(duplex, str):
            raise TypeError("Expected argument 'duplex' to be a str")
        pulumi.set(__self__, "duplex", duplex)
        if fec_mode and not isinstance(fec_mode, str):
            raise TypeError("Expected argument 'fec_mode' to be a str")
        pulumi.set(__self__, "fec_mode", fec_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)
        if layer and not isinstance(layer, str):
            raise TypeError("Expected argument 'layer' to be a str")
        pulumi.set(__self__, "layer", layer)
        if link_debounce_down and not isinstance(link_debounce_down, int):
            raise TypeError("Expected argument 'link_debounce_down' to be a int")
        pulumi.set(__self__, "link_debounce_down", link_debounce_down)
        if link_debounce_up and not isinstance(link_debounce_up, int):
            raise TypeError("Expected argument 'link_debounce_up' to be a int")
        pulumi.set(__self__, "link_debounce_up", link_debounce_up)
        if link_logging and not isinstance(link_logging, str):
            raise TypeError("Expected argument 'link_logging' to be a str")
        pulumi.set(__self__, "link_logging", link_logging)
        if medium and not isinstance(medium, str):
            raise TypeError("Expected argument 'medium' to be a str")
        pulumi.set(__self__, "medium", medium)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if native_vlan and not isinstance(native_vlan, str):
            raise TypeError("Expected argument 'native_vlan' to be a str")
        pulumi.set(__self__, "native_vlan", native_vlan)
        if speed and not isinstance(speed, str):
            raise TypeError("Expected argument 'speed' to be a str")
        pulumi.set(__self__, "speed", speed)
        if speed_group and not isinstance(speed_group, str):
            raise TypeError("Expected argument 'speed_group' to be a str")
        pulumi.set(__self__, "speed_group", speed_group)
        if trunk_vlans and not isinstance(trunk_vlans, str):
            raise TypeError("Expected argument 'trunk_vlans' to be a str")
        pulumi.set(__self__, "trunk_vlans", trunk_vlans)
        if uni_directional_ethernet and not isinstance(uni_directional_ethernet, str):
            raise TypeError("Expected argument 'uni_directional_ethernet' to be a str")
        pulumi.set(__self__, "uni_directional_ethernet", uni_directional_ethernet)
        if user_configured_flags and not isinstance(user_configured_flags, str):
            raise TypeError("Expected argument 'user_configured_flags' to be a str")
        pulumi.set(__self__, "user_configured_flags", user_configured_flags)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> str:
        """
        Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "access_vlan")

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        Administrative port state.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="autoNegotiation")
    def auto_negotiation(self) -> str:
        """
        Administrative port auto-negotiation.
        """
        return pulumi.get(self, "auto_negotiation")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The bandwidth parameter for a routed interface, port channel, or subinterface.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        The administrative port delay time.
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Interface description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def duplex(self) -> str:
        """
        Duplex.
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> str:
        """
        FEC mode.
        """
        return pulumi.get(self, "fec_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def layer(self) -> str:
        """
        Administrative port layer.
        """
        return pulumi.get(self, "layer")

    @property
    @pulumi.getter(name="linkDebounceDown")
    def link_debounce_down(self) -> int:
        """
        Administrative port link debounce interval.
        """
        return pulumi.get(self, "link_debounce_down")

    @property
    @pulumi.getter(name="linkDebounceUp")
    def link_debounce_up(self) -> int:
        """
        Link Debounce Interval - LinkUp Event.
        """
        return pulumi.get(self, "link_debounce_up")

    @property
    @pulumi.getter(name="linkLogging")
    def link_logging(self) -> str:
        """
        Administrative link logging.
        """
        return pulumi.get(self, "link_logging")

    @property
    @pulumi.getter
    def medium(self) -> str:
        """
        The administrative port medium type.
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Administrative port mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        Administrative port MTU.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> str:
        """
        Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter
    def speed(self) -> str:
        """
        Administrative port speed.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="speedGroup")
    def speed_group(self) -> str:
        """
        Speed group.
        """
        return pulumi.get(self, "speed_group")

    @property
    @pulumi.getter(name="trunkVlans")
    def trunk_vlans(self) -> str:
        """
        List of trunk VLANs.
        """
        return pulumi.get(self, "trunk_vlans")

    @property
    @pulumi.getter(name="uniDirectionalEthernet")
    def uni_directional_ethernet(self) -> str:
        """
        UDE (Uni-Directional Ethernet).
        """
        return pulumi.get(self, "uni_directional_ethernet")

    @property
    @pulumi.getter(name="userConfiguredFlags")
    def user_configured_flags(self) -> str:
        """
        Port User Config Flags.
        """
        return pulumi.get(self, "user_configured_flags")


class AwaitableGetPhysicalInterfaceResult(GetPhysicalInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPhysicalInterfaceResult(
            access_vlan=self.access_vlan,
            admin_state=self.admin_state,
            auto_negotiation=self.auto_negotiation,
            bandwidth=self.bandwidth,
            delay=self.delay,
            description=self.description,
            device=self.device,
            duplex=self.duplex,
            fec_mode=self.fec_mode,
            id=self.id,
            interface_id=self.interface_id,
            layer=self.layer,
            link_debounce_down=self.link_debounce_down,
            link_debounce_up=self.link_debounce_up,
            link_logging=self.link_logging,
            medium=self.medium,
            mode=self.mode,
            mtu=self.mtu,
            native_vlan=self.native_vlan,
            speed=self.speed,
            speed_group=self.speed_group,
            trunk_vlans=self.trunk_vlans,
            uni_directional_ethernet=self.uni_directional_ethernet,
            user_configured_flags=self.user_configured_flags)


def get_physical_interface(device: Optional[str] = None,
                           interface_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPhysicalInterfaceResult:
    """
    This data source can read the configuration of a physical interface.

    - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_physical_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getPhysicalInterface:getPhysicalInterface', __args__, opts=opts, typ=GetPhysicalInterfaceResult).value

    return AwaitableGetPhysicalInterfaceResult(
        access_vlan=pulumi.get(__ret__, 'access_vlan'),
        admin_state=pulumi.get(__ret__, 'admin_state'),
        auto_negotiation=pulumi.get(__ret__, 'auto_negotiation'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        delay=pulumi.get(__ret__, 'delay'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        duplex=pulumi.get(__ret__, 'duplex'),
        fec_mode=pulumi.get(__ret__, 'fec_mode'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'),
        layer=pulumi.get(__ret__, 'layer'),
        link_debounce_down=pulumi.get(__ret__, 'link_debounce_down'),
        link_debounce_up=pulumi.get(__ret__, 'link_debounce_up'),
        link_logging=pulumi.get(__ret__, 'link_logging'),
        medium=pulumi.get(__ret__, 'medium'),
        mode=pulumi.get(__ret__, 'mode'),
        mtu=pulumi.get(__ret__, 'mtu'),
        native_vlan=pulumi.get(__ret__, 'native_vlan'),
        speed=pulumi.get(__ret__, 'speed'),
        speed_group=pulumi.get(__ret__, 'speed_group'),
        trunk_vlans=pulumi.get(__ret__, 'trunk_vlans'),
        uni_directional_ethernet=pulumi.get(__ret__, 'uni_directional_ethernet'),
        user_configured_flags=pulumi.get(__ret__, 'user_configured_flags'))


@_utilities.lift_output_func(get_physical_interface)
def get_physical_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                  interface_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPhysicalInterfaceResult]:
    """
    This data source can read the configuration of a physical interface.

    - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_physical_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    ...
