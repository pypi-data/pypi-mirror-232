# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PimStaticRpGroupListArgs', 'PimStaticRpGroupList']

@pulumi.input_type
class PimStaticRpGroupListArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 rp_address: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 bidir: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a PimStaticRpGroupList resource.
        :param pulumi.Input[str] address: Group list address information.
        :param pulumi.Input[str] rp_address: RP address.
        :param pulumi.Input[str] vrf_name: VRF name.
        :param pulumi.Input[bool] bidir: Flag to treat Group Ranges as BiDir. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] override: Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "rp_address", rp_address)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if override is not None:
            pulumi.set(__self__, "override", override)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        Group list address information.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> pulumi.Input[str]:
        """
        RP address.
        """
        return pulumi.get(self, "rp_address")

    @rp_address.setter
    def rp_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "rp_address", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to treat Group Ranges as BiDir. - Default value: `false`
        """
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override", value)


@pulumi.input_type
class _PimStaticRpGroupListState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 bidir: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 rp_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PimStaticRpGroupList resources.
        :param pulumi.Input[str] address: Group list address information.
        :param pulumi.Input[bool] bidir: Flag to treat Group Ranges as BiDir. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] override: Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        :param pulumi.Input[str] rp_address: RP address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if rp_address is not None:
            pulumi.set(__self__, "rp_address", rp_address)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Group list address information.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to treat Group Ranges as BiDir. - Default value: `false`
        """
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> Optional[pulumi.Input[str]]:
        """
        RP address.
        """
        return pulumi.get(self, "rp_address")

    @rp_address.setter
    def rp_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_address", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


class PimStaticRpGroupList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 bidir: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 rp_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the PIM Static RP group list configuration.

        - API Documentation: [pimRPGrpList](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:RPGrpList/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PimStaticRpGroupList("example",
            address="224.0.0.0/4",
            bidir=True,
            override=True,
            rp_address="1.2.3.4",
            vrf_name="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/pimStaticRpGroupList:PimStaticRpGroupList example "sys/pim/inst/dom-[default]/staticrp/rp-[1.2.3.4]/rpgrplist-[224.0.0.0/4]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Group list address information.
        :param pulumi.Input[bool] bidir: Flag to treat Group Ranges as BiDir. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] override: Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        :param pulumi.Input[str] rp_address: RP address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PimStaticRpGroupListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the PIM Static RP group list configuration.

        - API Documentation: [pimRPGrpList](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:RPGrpList/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PimStaticRpGroupList("example",
            address="224.0.0.0/4",
            bidir=True,
            override=True,
            rp_address="1.2.3.4",
            vrf_name="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/pimStaticRpGroupList:PimStaticRpGroupList example "sys/pim/inst/dom-[default]/staticrp/rp-[1.2.3.4]/rpgrplist-[224.0.0.0/4]"
        ```

        :param str resource_name: The name of the resource.
        :param PimStaticRpGroupListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PimStaticRpGroupListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 bidir: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 rp_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PimStaticRpGroupListArgs.__new__(PimStaticRpGroupListArgs)

            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["bidir"] = bidir
            __props__.__dict__["device"] = device
            __props__.__dict__["override"] = override
            if rp_address is None and not opts.urn:
                raise TypeError("Missing required property 'rp_address'")
            __props__.__dict__["rp_address"] = rp_address
            if vrf_name is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_name'")
            __props__.__dict__["vrf_name"] = vrf_name
        super(PimStaticRpGroupList, __self__).__init__(
            'nxos:index/pimStaticRpGroupList:PimStaticRpGroupList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            bidir: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            override: Optional[pulumi.Input[bool]] = None,
            rp_address: Optional[pulumi.Input[str]] = None,
            vrf_name: Optional[pulumi.Input[str]] = None) -> 'PimStaticRpGroupList':
        """
        Get an existing PimStaticRpGroupList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Group list address information.
        :param pulumi.Input[bool] bidir: Flag to treat Group Ranges as BiDir. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] override: Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        :param pulumi.Input[str] rp_address: RP address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PimStaticRpGroupListState.__new__(_PimStaticRpGroupListState)

        __props__.__dict__["address"] = address
        __props__.__dict__["bidir"] = bidir
        __props__.__dict__["device"] = device
        __props__.__dict__["override"] = override
        __props__.__dict__["rp_address"] = rp_address
        __props__.__dict__["vrf_name"] = vrf_name
        return PimStaticRpGroupList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        Group list address information.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def bidir(self) -> pulumi.Output[bool]:
        """
        Flag to treat Group Ranges as BiDir. - Default value: `false`
        """
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def override(self) -> pulumi.Output[bool]:
        """
        Flag to override RP preference to use Static over Dynamic RP. - Default value: `false`
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> pulumi.Output[str]:
        """
        RP address.
        """
        return pulumi.get(self, "rp_address")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

