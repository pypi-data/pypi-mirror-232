# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBridgeDomainResult',
    'AwaitableGetBridgeDomainResult',
    'get_bridge_domain',
    'get_bridge_domain_output',
]

@pulumi.output_type
class GetBridgeDomainResult:
    """
    A collection of values returned by getBridgeDomain.
    """
    def __init__(__self__, access_encap=None, device=None, fabric_encap=None, id=None, name=None):
        if access_encap and not isinstance(access_encap, str):
            raise TypeError("Expected argument 'access_encap' to be a str")
        pulumi.set(__self__, "access_encap", access_encap)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if fabric_encap and not isinstance(fabric_encap, str):
            raise TypeError("Expected argument 'fabric_encap' to be a str")
        pulumi.set(__self__, "fabric_encap", fabric_encap)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessEncap")
    def access_encap(self) -> str:
        """
        Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "access_encap")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="fabricEncap")
    def fabric_encap(self) -> str:
        """
        Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        """
        return pulumi.get(self, "fabric_encap")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Bridge domain name.
        """
        return pulumi.get(self, "name")


class AwaitableGetBridgeDomainResult(GetBridgeDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBridgeDomainResult(
            access_encap=self.access_encap,
            device=self.device,
            fabric_encap=self.fabric_encap,
            id=self.id,
            name=self.name)


def get_bridge_domain(device: Optional[str] = None,
                      fabric_encap: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBridgeDomainResult:
    """
    This data source can read a bridge domain.

    - API Documentation: [l2BD](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%202/l2:BD/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_bridge_domain(fabric_encap="vlan-10")
    ```


    :param str device: A device name from the provider configuration.
    :param str fabric_encap: Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['fabricEncap'] = fabric_encap
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getBridgeDomain:getBridgeDomain', __args__, opts=opts, typ=GetBridgeDomainResult).value

    return AwaitableGetBridgeDomainResult(
        access_encap=pulumi.get(__ret__, 'access_encap'),
        device=pulumi.get(__ret__, 'device'),
        fabric_encap=pulumi.get(__ret__, 'fabric_encap'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_bridge_domain)
def get_bridge_domain_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                             fabric_encap: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBridgeDomainResult]:
    """
    This data source can read a bridge domain.

    - API Documentation: [l2BD](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%202/l2:BD/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_bridge_domain(fabric_encap="vlan-10")
    ```


    :param str device: A device name from the provider configuration.
    :param str fabric_encap: Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
    """
    ...
