# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NtpServerArgs', 'NtpServer']

@pulumi.input_type
class NtpServerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 max_poll: Optional[pulumi.Input[int]] = None,
                 min_poll: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NtpServer resource.
        :param pulumi.Input[str] type: NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] key_id: NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        :param pulumi.Input[int] max_poll: NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        :param pulumi.Input[int] min_poll: NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        :param pulumi.Input[str] name: NTP server.
        :param pulumi.Input[str] vrf: Identifies the VRF for the NTP providers. - Default value: `default`
        """
        pulumi.set(__self__, "type", type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if max_poll is not None:
            pulumi.set(__self__, "max_poll", max_poll)
        if min_poll is not None:
            pulumi.set(__self__, "min_poll", min_poll)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="maxPoll")
    def max_poll(self) -> Optional[pulumi.Input[int]]:
        """
        NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        """
        return pulumi.get(self, "max_poll")

    @max_poll.setter
    def max_poll(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_poll", value)

    @property
    @pulumi.getter(name="minPoll")
    def min_poll(self) -> Optional[pulumi.Input[int]]:
        """
        NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        """
        return pulumi.get(self, "min_poll")

    @min_poll.setter
    def min_poll(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_poll", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the VRF for the NTP providers. - Default value: `default`
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class _NtpServerState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 max_poll: Optional[pulumi.Input[int]] = None,
                 min_poll: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NtpServer resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] key_id: NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        :param pulumi.Input[int] max_poll: NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        :param pulumi.Input[int] min_poll: NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        :param pulumi.Input[str] name: NTP server.
        :param pulumi.Input[str] type: NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        :param pulumi.Input[str] vrf: Identifies the VRF for the NTP providers. - Default value: `default`
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if max_poll is not None:
            pulumi.set(__self__, "max_poll", max_poll)
        if min_poll is not None:
            pulumi.set(__self__, "min_poll", min_poll)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="maxPoll")
    def max_poll(self) -> Optional[pulumi.Input[int]]:
        """
        NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        """
        return pulumi.get(self, "max_poll")

    @max_poll.setter
    def max_poll(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_poll", value)

    @property
    @pulumi.getter(name="minPoll")
    def min_poll(self) -> Optional[pulumi.Input[int]]:
        """
        NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        """
        return pulumi.get(self, "min_poll")

    @min_poll.setter
    def min_poll(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_poll", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the VRF for the NTP providers. - Default value: `default`
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


class NtpServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 max_poll: Optional[pulumi.Input[int]] = None,
                 min_poll: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage an ntp server or peer.

        - API Documentation: [datetimeNtpProvider](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/datetime:NtpProvider/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NtpServer("example",
            key_id=10,
            max_poll=6,
            min_poll=4,
            type="server",
            vrf="management")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ntpServer:NtpServer example "sys/time/prov-[1.2.3.4]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] key_id: NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        :param pulumi.Input[int] max_poll: NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        :param pulumi.Input[int] min_poll: NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        :param pulumi.Input[str] name: NTP server.
        :param pulumi.Input[str] type: NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        :param pulumi.Input[str] vrf: Identifies the VRF for the NTP providers. - Default value: `default`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NtpServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage an ntp server or peer.

        - API Documentation: [datetimeNtpProvider](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/datetime:NtpProvider/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NtpServer("example",
            key_id=10,
            max_poll=6,
            min_poll=4,
            type="server",
            vrf="management")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ntpServer:NtpServer example "sys/time/prov-[1.2.3.4]"
        ```

        :param str resource_name: The name of the resource.
        :param NtpServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NtpServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 max_poll: Optional[pulumi.Input[int]] = None,
                 min_poll: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NtpServerArgs.__new__(NtpServerArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["max_poll"] = max_poll
            __props__.__dict__["min_poll"] = min_poll
            __props__.__dict__["name"] = name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vrf"] = vrf
        super(NtpServer, __self__).__init__(
            'nxos:index/ntpServer:NtpServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[int]] = None,
            max_poll: Optional[pulumi.Input[int]] = None,
            min_poll: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vrf: Optional[pulumi.Input[str]] = None) -> 'NtpServer':
        """
        Get an existing NtpServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] key_id: NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        :param pulumi.Input[int] max_poll: NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        :param pulumi.Input[int] min_poll: NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        :param pulumi.Input[str] name: NTP server.
        :param pulumi.Input[str] type: NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        :param pulumi.Input[str] vrf: Identifies the VRF for the NTP providers. - Default value: `default`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NtpServerState.__new__(_NtpServerState)

        __props__.__dict__["device"] = device
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["max_poll"] = max_poll
        __props__.__dict__["min_poll"] = min_poll
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["vrf"] = vrf
        return NtpServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[int]]:
        """
        NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="maxPoll")
    def max_poll(self) -> pulumi.Output[int]:
        """
        NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
        """
        return pulumi.get(self, "max_poll")

    @property
    @pulumi.getter(name="minPoll")
    def min_poll(self) -> pulumi.Output[int]:
        """
        NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
        """
        return pulumi.get(self, "min_poll")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NTP server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[str]:
        """
        Identifies the VRF for the NTP providers. - Default value: `default`
        """
        return pulumi.get(self, "vrf")

