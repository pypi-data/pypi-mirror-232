# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RouteMapRuleEntryMatchRoutePrefixListArgs', 'RouteMapRuleEntryMatchRoutePrefixList']

@pulumi.input_type
class RouteMapRuleEntryMatchRoutePrefixListArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[int],
                 prefix_list_dn: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouteMapRuleEntryMatchRoutePrefixList resource.
        :param pulumi.Input[int] order: Route-Map Rule Entry order. - Range: `0`-`65535`
        :param pulumi.Input[str] prefix_list_dn: DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        :param pulumi.Input[str] rule_name: Route Map rule name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "prefix_list_dn", prefix_list_dn)
        pulumi.set(__self__, "rule_name", rule_name)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        """
        Route-Map Rule Entry order. - Range: `0`-`65535`
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="prefixListDn")
    def prefix_list_dn(self) -> pulumi.Input[str]:
        """
        DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        """
        return pulumi.get(self, "prefix_list_dn")

    @prefix_list_dn.setter
    def prefix_list_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix_list_dn", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Route Map rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


@pulumi.input_type
class _RouteMapRuleEntryMatchRoutePrefixListState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 prefix_list_dn: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteMapRuleEntryMatchRoutePrefixList resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] order: Route-Map Rule Entry order. - Range: `0`-`65535`
        :param pulumi.Input[str] prefix_list_dn: DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        :param pulumi.Input[str] rule_name: Route Map rule name.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if prefix_list_dn is not None:
            pulumi.set(__self__, "prefix_list_dn", prefix_list_dn)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        Route-Map Rule Entry order. - Range: `0`-`65535`
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="prefixListDn")
    def prefix_list_dn(self) -> Optional[pulumi.Input[str]]:
        """
        DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        """
        return pulumi.get(self, "prefix_list_dn")

    @prefix_list_dn.setter
    def prefix_list_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_dn", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Route Map rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)


class RouteMapRuleEntryMatchRoutePrefixList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 prefix_list_dn: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage a Match Route Prefix List in  Route-Map Rule Entry configuration.

        - API Documentation: [rtmapRsRtDstAtt](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:RsRtDstAtt/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.RouteMapRuleEntryMatchRoutePrefixList("example",
            order=10,
            prefix_list_dn="sys/rpm/pfxlistv4-[LIST1]",
            rule_name="RULE1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList example "sys/rpm/rtmap-[RULE1]/ent-[10]/mrtdst/rsrtDstAtt-[sys/rpm/pfxlistv4-[LIST1]]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] order: Route-Map Rule Entry order. - Range: `0`-`65535`
        :param pulumi.Input[str] prefix_list_dn: DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        :param pulumi.Input[str] rule_name: Route Map rule name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteMapRuleEntryMatchRoutePrefixListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Match Route Prefix List in  Route-Map Rule Entry configuration.

        - API Documentation: [rtmapRsRtDstAtt](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:RsRtDstAtt/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.RouteMapRuleEntryMatchRoutePrefixList("example",
            order=10,
            prefix_list_dn="sys/rpm/pfxlistv4-[LIST1]",
            rule_name="RULE1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList example "sys/rpm/rtmap-[RULE1]/ent-[10]/mrtdst/rsrtDstAtt-[sys/rpm/pfxlistv4-[LIST1]]"
        ```

        :param str resource_name: The name of the resource.
        :param RouteMapRuleEntryMatchRoutePrefixListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteMapRuleEntryMatchRoutePrefixListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 prefix_list_dn: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteMapRuleEntryMatchRoutePrefixListArgs.__new__(RouteMapRuleEntryMatchRoutePrefixListArgs)

            __props__.__dict__["device"] = device
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            if prefix_list_dn is None and not opts.urn:
                raise TypeError("Missing required property 'prefix_list_dn'")
            __props__.__dict__["prefix_list_dn"] = prefix_list_dn
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
        super(RouteMapRuleEntryMatchRoutePrefixList, __self__).__init__(
            'nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            order: Optional[pulumi.Input[int]] = None,
            prefix_list_dn: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None) -> 'RouteMapRuleEntryMatchRoutePrefixList':
        """
        Get an existing RouteMapRuleEntryMatchRoutePrefixList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] order: Route-Map Rule Entry order. - Range: `0`-`65535`
        :param pulumi.Input[str] prefix_list_dn: DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        :param pulumi.Input[str] rule_name: Route Map rule name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteMapRuleEntryMatchRoutePrefixListState.__new__(_RouteMapRuleEntryMatchRoutePrefixListState)

        __props__.__dict__["device"] = device
        __props__.__dict__["order"] = order
        __props__.__dict__["prefix_list_dn"] = prefix_list_dn
        __props__.__dict__["rule_name"] = rule_name
        return RouteMapRuleEntryMatchRoutePrefixList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        Route-Map Rule Entry order. - Range: `0`-`65535`
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="prefixListDn")
    def prefix_list_dn(self) -> pulumi.Output[str]:
        """
        DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
        """
        return pulumi.get(self, "prefix_list_dn")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Route Map rule name.
        """
        return pulumi.get(self, "rule_name")

