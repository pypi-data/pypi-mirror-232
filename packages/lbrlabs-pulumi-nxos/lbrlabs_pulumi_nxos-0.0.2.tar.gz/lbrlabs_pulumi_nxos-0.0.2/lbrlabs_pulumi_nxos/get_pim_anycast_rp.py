# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPimAnycastRpResult',
    'AwaitableGetPimAnycastRpResult',
    'get_pim_anycast_rp',
    'get_pim_anycast_rp_output',
]

@pulumi.output_type
class GetPimAnycastRpResult:
    """
    A collection of values returned by getPimAnycastRp.
    """
    def __init__(__self__, device=None, id=None, local_interface=None, source_interface=None, vrf_name=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_interface and not isinstance(local_interface, str):
            raise TypeError("Expected argument 'local_interface' to be a str")
        pulumi.set(__self__, "local_interface", local_interface)
        if source_interface and not isinstance(source_interface, str):
            raise TypeError("Expected argument 'source_interface' to be a str")
        pulumi.set(__self__, "source_interface", source_interface)
        if vrf_name and not isinstance(vrf_name, str):
            raise TypeError("Expected argument 'vrf_name' to be a str")
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localInterface")
    def local_interface(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "local_interface")

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "source_interface")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")


class AwaitableGetPimAnycastRpResult(GetPimAnycastRpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPimAnycastRpResult(
            device=self.device,
            id=self.id,
            local_interface=self.local_interface,
            source_interface=self.source_interface,
            vrf_name=self.vrf_name)


def get_pim_anycast_rp(device: Optional[str] = None,
                       vrf_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPimAnycastRpResult:
    """
    This data source can read the PIM Anycast RP configuration.

    - API Documentation: [pimAcastRPFuncP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:AcastRPFuncP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_pim_anycast_rp(vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf_name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['vrfName'] = vrf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getPimAnycastRp:getPimAnycastRp', __args__, opts=opts, typ=GetPimAnycastRpResult).value

    return AwaitableGetPimAnycastRpResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        local_interface=pulumi.get(__ret__, 'local_interface'),
        source_interface=pulumi.get(__ret__, 'source_interface'),
        vrf_name=pulumi.get(__ret__, 'vrf_name'))


@_utilities.lift_output_func(get_pim_anycast_rp)
def get_pim_anycast_rp_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                              vrf_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPimAnycastRpResult]:
    """
    This data source can read the PIM Anycast RP configuration.

    - API Documentation: [pimAcastRPFuncP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:AcastRPFuncP/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_pim_anycast_rp(vrf_name="default")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf_name: VRF name.
    """
    ...
