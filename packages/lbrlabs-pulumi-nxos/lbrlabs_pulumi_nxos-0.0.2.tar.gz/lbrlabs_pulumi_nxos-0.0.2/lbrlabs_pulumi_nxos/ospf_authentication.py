# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OspfAuthenticationArgs', 'OspfAuthentication']

@pulumi.input_type
class OspfAuthenticationArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 interface_id: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OspfAuthentication resource.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] vrf_name: VRF name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] key: Key used for authentication.
        :param pulumi.Input[int] key_id: Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] key_secure_mode: Encrypted authentication key or plain text key. - Default value: `false`
        :param pulumi.Input[str] keychain: Authentication keychain.
        :param pulumi.Input[str] md5_key: Key used for md5 authentication.
        :param pulumi.Input[bool] md5_key_secure_mode: Encrypted authentication md5 key or plain text key. - Default value: `false`
        :param pulumi.Input[str] type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secure_mode is not None:
            pulumi.set(__self__, "key_secure_mode", key_secure_mode)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_key_secure_mode is not None:
            pulumi.set(__self__, "md5_key_secure_mode", md5_key_secure_mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key used for authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecureMode")
    def key_secure_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted authentication key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "key_secure_mode")

    @key_secure_mode.setter
    def key_secure_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_secure_mode", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication keychain.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key used for md5 authentication.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5KeySecureMode")
    def md5_key_secure_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted authentication md5 key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "md5_key_secure_mode")

    @md5_key_secure_mode.setter
    def md5_key_secure_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "md5_key_secure_mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _OspfAuthenticationState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OspfAuthentication resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] key: Key used for authentication.
        :param pulumi.Input[int] key_id: Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] key_secure_mode: Encrypted authentication key or plain text key. - Default value: `false`
        :param pulumi.Input[str] keychain: Authentication keychain.
        :param pulumi.Input[str] md5_key: Key used for md5 authentication.
        :param pulumi.Input[bool] md5_key_secure_mode: Encrypted authentication md5 key or plain text key. - Default value: `false`
        :param pulumi.Input[str] type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_secure_mode is not None:
            pulumi.set(__self__, "key_secure_mode", key_secure_mode)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_key_secure_mode is not None:
            pulumi.set(__self__, "md5_key_secure_mode", md5_key_secure_mode)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key used for authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecureMode")
    def key_secure_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted authentication key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "key_secure_mode")

    @key_secure_mode.setter
    def key_secure_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_secure_mode", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication keychain.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key used for md5 authentication.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5KeySecureMode")
    def md5_key_secure_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted authentication md5 key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "md5_key_secure_mode")

    @md5_key_secure_mode.setter
    def md5_key_secure_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "md5_key_secure_mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


class OspfAuthentication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the OSPF authentication configuration.

        - API Documentation: [ospfAuthNewP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:AuthNewP/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfAuthentication("example",
            instance_name="OSPF1",
            interface_id="eth1/10",
            key="0 mykey",
            key_id=1,
            key_secure_mode=False,
            keychain="mykeychain",
            md5_key="0 mymd5key",
            md5_key_secure_mode=False,
            type="none",
            vrf_name="VRF1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfAuthentication:OspfAuthentication example "sys/ospf/inst-[OSPF1]/dom-[VRF1]/if-[eth1/10]/authnew"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] key: Key used for authentication.
        :param pulumi.Input[int] key_id: Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] key_secure_mode: Encrypted authentication key or plain text key. - Default value: `false`
        :param pulumi.Input[str] keychain: Authentication keychain.
        :param pulumi.Input[str] md5_key: Key used for md5 authentication.
        :param pulumi.Input[bool] md5_key_secure_mode: Encrypted authentication md5 key or plain text key. - Default value: `false`
        :param pulumi.Input[str] type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OspfAuthenticationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the OSPF authentication configuration.

        - API Documentation: [ospfAuthNewP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:AuthNewP/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfAuthentication("example",
            instance_name="OSPF1",
            interface_id="eth1/10",
            key="0 mykey",
            key_id=1,
            key_secure_mode=False,
            keychain="mykeychain",
            md5_key="0 mymd5key",
            md5_key_secure_mode=False,
            type="none",
            vrf_name="VRF1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfAuthentication:OspfAuthentication example "sys/ospf/inst-[OSPF1]/dom-[VRF1]/if-[eth1/10]/authnew"
        ```

        :param str resource_name: The name of the resource.
        :param OspfAuthenticationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfAuthenticationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_key_secure_mode: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfAuthenticationArgs.__new__(OspfAuthenticationArgs)

            __props__.__dict__["device"] = device
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'interface_id'")
            __props__.__dict__["interface_id"] = interface_id
            __props__.__dict__["key"] = key
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["key_secure_mode"] = key_secure_mode
            __props__.__dict__["keychain"] = keychain
            __props__.__dict__["md5_key"] = md5_key
            __props__.__dict__["md5_key_secure_mode"] = md5_key_secure_mode
            __props__.__dict__["type"] = type
            if vrf_name is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_name'")
            __props__.__dict__["vrf_name"] = vrf_name
        super(OspfAuthentication, __self__).__init__(
            'nxos:index/ospfAuthentication:OspfAuthentication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[int]] = None,
            key_secure_mode: Optional[pulumi.Input[bool]] = None,
            keychain: Optional[pulumi.Input[str]] = None,
            md5_key: Optional[pulumi.Input[str]] = None,
            md5_key_secure_mode: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vrf_name: Optional[pulumi.Input[str]] = None) -> 'OspfAuthentication':
        """
        Get an existing OspfAuthentication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        :param pulumi.Input[str] key: Key used for authentication.
        :param pulumi.Input[int] key_id: Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] key_secure_mode: Encrypted authentication key or plain text key. - Default value: `false`
        :param pulumi.Input[str] keychain: Authentication keychain.
        :param pulumi.Input[str] md5_key: Key used for md5 authentication.
        :param pulumi.Input[bool] md5_key_secure_mode: Encrypted authentication md5 key or plain text key. - Default value: `false`
        :param pulumi.Input[str] type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OspfAuthenticationState.__new__(_OspfAuthenticationState)

        __props__.__dict__["device"] = device
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["key"] = key
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_secure_mode"] = key_secure_mode
        __props__.__dict__["keychain"] = keychain
        __props__.__dict__["md5_key"] = md5_key
        __props__.__dict__["md5_key_secure_mode"] = md5_key_secure_mode
        __props__.__dict__["type"] = type
        __props__.__dict__["vrf_name"] = vrf_name
        return OspfAuthentication(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[str]:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        Key used for authentication.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[int]:
        """
        Key ID used for authentication. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keySecureMode")
    def key_secure_mode(self) -> pulumi.Output[bool]:
        """
        Encrypted authentication key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "key_secure_mode")

    @property
    @pulumi.getter
    def keychain(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication keychain.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> pulumi.Output[Optional[str]]:
        """
        Key used for md5 authentication.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5KeySecureMode")
    def md5_key_secure_mode(self) -> pulumi.Output[bool]:
        """
        Encrypted authentication md5 key or plain text key. - Default value: `false`
        """
        return pulumi.get(self, "md5_key_secure_mode")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

