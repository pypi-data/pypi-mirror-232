# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIsisInterfaceResult',
    'AwaitableGetIsisInterfaceResult',
    'get_isis_interface',
    'get_isis_interface_output',
]

@pulumi.output_type
class GetIsisInterfaceResult:
    """
    A collection of values returned by getIsisInterface.
    """
    def __init__(__self__, authentication_check=None, authentication_check_l1=None, authentication_check_l2=None, authentication_key=None, authentication_key_l1=None, authentication_key_l2=None, authentication_type=None, authentication_type_l1=None, authentication_type_l2=None, circuit_type=None, device=None, hello_interval=None, hello_interval_l1=None, hello_interval_l2=None, hello_multiplier=None, hello_multiplier_l1=None, hello_multiplier_l2=None, hello_padding=None, id=None, interface_id=None, metric_l1=None, metric_l2=None, mtu_check=None, mtu_check_l1=None, mtu_check_l2=None, network_type_p2p=None, passive=None, priority_l1=None, priority_l2=None, vrf=None):
        if authentication_check and not isinstance(authentication_check, bool):
            raise TypeError("Expected argument 'authentication_check' to be a bool")
        pulumi.set(__self__, "authentication_check", authentication_check)
        if authentication_check_l1 and not isinstance(authentication_check_l1, bool):
            raise TypeError("Expected argument 'authentication_check_l1' to be a bool")
        pulumi.set(__self__, "authentication_check_l1", authentication_check_l1)
        if authentication_check_l2 and not isinstance(authentication_check_l2, bool):
            raise TypeError("Expected argument 'authentication_check_l2' to be a bool")
        pulumi.set(__self__, "authentication_check_l2", authentication_check_l2)
        if authentication_key and not isinstance(authentication_key, str):
            raise TypeError("Expected argument 'authentication_key' to be a str")
        pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_l1 and not isinstance(authentication_key_l1, str):
            raise TypeError("Expected argument 'authentication_key_l1' to be a str")
        pulumi.set(__self__, "authentication_key_l1", authentication_key_l1)
        if authentication_key_l2 and not isinstance(authentication_key_l2, str):
            raise TypeError("Expected argument 'authentication_key_l2' to be a str")
        pulumi.set(__self__, "authentication_key_l2", authentication_key_l2)
        if authentication_type and not isinstance(authentication_type, str):
            raise TypeError("Expected argument 'authentication_type' to be a str")
        pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_l1 and not isinstance(authentication_type_l1, str):
            raise TypeError("Expected argument 'authentication_type_l1' to be a str")
        pulumi.set(__self__, "authentication_type_l1", authentication_type_l1)
        if authentication_type_l2 and not isinstance(authentication_type_l2, str):
            raise TypeError("Expected argument 'authentication_type_l2' to be a str")
        pulumi.set(__self__, "authentication_type_l2", authentication_type_l2)
        if circuit_type and not isinstance(circuit_type, str):
            raise TypeError("Expected argument 'circuit_type' to be a str")
        pulumi.set(__self__, "circuit_type", circuit_type)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if hello_interval and not isinstance(hello_interval, int):
            raise TypeError("Expected argument 'hello_interval' to be a int")
        pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_l1 and not isinstance(hello_interval_l1, int):
            raise TypeError("Expected argument 'hello_interval_l1' to be a int")
        pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 and not isinstance(hello_interval_l2, int):
            raise TypeError("Expected argument 'hello_interval_l2' to be a int")
        pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier and not isinstance(hello_multiplier, int):
            raise TypeError("Expected argument 'hello_multiplier' to be a int")
        pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if hello_multiplier_l1 and not isinstance(hello_multiplier_l1, int):
            raise TypeError("Expected argument 'hello_multiplier_l1' to be a int")
        pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 and not isinstance(hello_multiplier_l2, int):
            raise TypeError("Expected argument 'hello_multiplier_l2' to be a int")
        pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding and not isinstance(hello_padding, str):
            raise TypeError("Expected argument 'hello_padding' to be a str")
        pulumi.set(__self__, "hello_padding", hello_padding)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)
        if metric_l1 and not isinstance(metric_l1, int):
            raise TypeError("Expected argument 'metric_l1' to be a int")
        pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 and not isinstance(metric_l2, int):
            raise TypeError("Expected argument 'metric_l2' to be a int")
        pulumi.set(__self__, "metric_l2", metric_l2)
        if mtu_check and not isinstance(mtu_check, bool):
            raise TypeError("Expected argument 'mtu_check' to be a bool")
        pulumi.set(__self__, "mtu_check", mtu_check)
        if mtu_check_l1 and not isinstance(mtu_check_l1, bool):
            raise TypeError("Expected argument 'mtu_check_l1' to be a bool")
        pulumi.set(__self__, "mtu_check_l1", mtu_check_l1)
        if mtu_check_l2 and not isinstance(mtu_check_l2, bool):
            raise TypeError("Expected argument 'mtu_check_l2' to be a bool")
        pulumi.set(__self__, "mtu_check_l2", mtu_check_l2)
        if network_type_p2p and not isinstance(network_type_p2p, str):
            raise TypeError("Expected argument 'network_type_p2p' to be a str")
        pulumi.set(__self__, "network_type_p2p", network_type_p2p)
        if passive and not isinstance(passive, str):
            raise TypeError("Expected argument 'passive' to be a str")
        pulumi.set(__self__, "passive", passive)
        if priority_l1 and not isinstance(priority_l1, int):
            raise TypeError("Expected argument 'priority_l1' to be a int")
        pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 and not isinstance(priority_l2, int):
            raise TypeError("Expected argument 'priority_l2' to be a int")
        pulumi.set(__self__, "priority_l2", priority_l2)
        if vrf and not isinstance(vrf, str):
            raise TypeError("Expected argument 'vrf' to be a str")
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="authenticationCheck")
    def authentication_check(self) -> bool:
        """
        Authentication Check for ISIS without specific level.
        """
        return pulumi.get(self, "authentication_check")

    @property
    @pulumi.getter(name="authenticationCheckL1")
    def authentication_check_l1(self) -> bool:
        """
        Authentication Check for ISIS on Level-1.
        """
        return pulumi.get(self, "authentication_check_l1")

    @property
    @pulumi.getter(name="authenticationCheckL2")
    def authentication_check_l2(self) -> bool:
        """
        Authentication Check for ISIS on Level-2.
        """
        return pulumi.get(self, "authentication_check_l2")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        """
        Authentication Key for IS-IS without specific level.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="authenticationKeyL1")
    def authentication_key_l1(self) -> str:
        """
        Authentication Key for IS-IS on Level-1.
        """
        return pulumi.get(self, "authentication_key_l1")

    @property
    @pulumi.getter(name="authenticationKeyL2")
    def authentication_key_l2(self) -> str:
        """
        Authentication Key for IS-IS on Level-2.
        """
        return pulumi.get(self, "authentication_key_l2")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        IS-IS Authentication-Type without specific level.
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="authenticationTypeL1")
    def authentication_type_l1(self) -> str:
        """
        IS-IS Authentication-Type for Level-1.
        """
        return pulumi.get(self, "authentication_type_l1")

    @property
    @pulumi.getter(name="authenticationTypeL2")
    def authentication_type_l2(self) -> str:
        """
        IS-IS Authentication-Type for Level-2.
        """
        return pulumi.get(self, "authentication_type_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> str:
        """
        Circuit type.
        """
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> int:
        """
        Hello interval Level-1.
        """
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> int:
        """
        Hello interval Level-2.
        """
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> int:
        """
        Hello multiplier.
        """
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> int:
        """
        Hello multiplier Level-1.
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> int:
        """
        Hello multiplier Level-2.
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> str:
        """
        Hello padding.
        """
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> int:
        """
        Interface metric Level-1.
        """
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> int:
        """
        Interface metric Level-2.
        """
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter(name="mtuCheck")
    def mtu_check(self) -> bool:
        """
        MTU Check for IS-IS without specific level.
        """
        return pulumi.get(self, "mtu_check")

    @property
    @pulumi.getter(name="mtuCheckL1")
    def mtu_check_l1(self) -> bool:
        """
        MTU Check for IS-IS on Level-1.
        """
        return pulumi.get(self, "mtu_check_l1")

    @property
    @pulumi.getter(name="mtuCheckL2")
    def mtu_check_l2(self) -> bool:
        """
        MTU Check for IS-IS on Level-2.
        """
        return pulumi.get(self, "mtu_check_l2")

    @property
    @pulumi.getter(name="networkTypeP2p")
    def network_type_p2p(self) -> str:
        """
        Enabling Point-to-Point Network Type on IS-IS Interface.
        """
        return pulumi.get(self, "network_type_p2p")

    @property
    @pulumi.getter
    def passive(self) -> str:
        """
        IS-IS Passive Interface Info.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> int:
        """
        Circuit priority.
        """
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> int:
        """
        Circuit priority.
        """
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        VRF.
        """
        return pulumi.get(self, "vrf")


class AwaitableGetIsisInterfaceResult(GetIsisInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsisInterfaceResult(
            authentication_check=self.authentication_check,
            authentication_check_l1=self.authentication_check_l1,
            authentication_check_l2=self.authentication_check_l2,
            authentication_key=self.authentication_key,
            authentication_key_l1=self.authentication_key_l1,
            authentication_key_l2=self.authentication_key_l2,
            authentication_type=self.authentication_type,
            authentication_type_l1=self.authentication_type_l1,
            authentication_type_l2=self.authentication_type_l2,
            circuit_type=self.circuit_type,
            device=self.device,
            hello_interval=self.hello_interval,
            hello_interval_l1=self.hello_interval_l1,
            hello_interval_l2=self.hello_interval_l2,
            hello_multiplier=self.hello_multiplier,
            hello_multiplier_l1=self.hello_multiplier_l1,
            hello_multiplier_l2=self.hello_multiplier_l2,
            hello_padding=self.hello_padding,
            id=self.id,
            interface_id=self.interface_id,
            metric_l1=self.metric_l1,
            metric_l2=self.metric_l2,
            mtu_check=self.mtu_check,
            mtu_check_l1=self.mtu_check_l1,
            mtu_check_l2=self.mtu_check_l2,
            network_type_p2p=self.network_type_p2p,
            passive=self.passive,
            priority_l1=self.priority_l1,
            priority_l2=self.priority_l2,
            vrf=self.vrf)


def get_isis_interface(device: Optional[str] = None,
                       interface_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsisInterfaceResult:
    """
    This data source can read the IS-IS interface configuration.

    - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_isis_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIsisInterface:getIsisInterface', __args__, opts=opts, typ=GetIsisInterfaceResult).value

    return AwaitableGetIsisInterfaceResult(
        authentication_check=pulumi.get(__ret__, 'authentication_check'),
        authentication_check_l1=pulumi.get(__ret__, 'authentication_check_l1'),
        authentication_check_l2=pulumi.get(__ret__, 'authentication_check_l2'),
        authentication_key=pulumi.get(__ret__, 'authentication_key'),
        authentication_key_l1=pulumi.get(__ret__, 'authentication_key_l1'),
        authentication_key_l2=pulumi.get(__ret__, 'authentication_key_l2'),
        authentication_type=pulumi.get(__ret__, 'authentication_type'),
        authentication_type_l1=pulumi.get(__ret__, 'authentication_type_l1'),
        authentication_type_l2=pulumi.get(__ret__, 'authentication_type_l2'),
        circuit_type=pulumi.get(__ret__, 'circuit_type'),
        device=pulumi.get(__ret__, 'device'),
        hello_interval=pulumi.get(__ret__, 'hello_interval'),
        hello_interval_l1=pulumi.get(__ret__, 'hello_interval_l1'),
        hello_interval_l2=pulumi.get(__ret__, 'hello_interval_l2'),
        hello_multiplier=pulumi.get(__ret__, 'hello_multiplier'),
        hello_multiplier_l1=pulumi.get(__ret__, 'hello_multiplier_l1'),
        hello_multiplier_l2=pulumi.get(__ret__, 'hello_multiplier_l2'),
        hello_padding=pulumi.get(__ret__, 'hello_padding'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'),
        metric_l1=pulumi.get(__ret__, 'metric_l1'),
        metric_l2=pulumi.get(__ret__, 'metric_l2'),
        mtu_check=pulumi.get(__ret__, 'mtu_check'),
        mtu_check_l1=pulumi.get(__ret__, 'mtu_check_l1'),
        mtu_check_l2=pulumi.get(__ret__, 'mtu_check_l2'),
        network_type_p2p=pulumi.get(__ret__, 'network_type_p2p'),
        passive=pulumi.get(__ret__, 'passive'),
        priority_l1=pulumi.get(__ret__, 'priority_l1'),
        priority_l2=pulumi.get(__ret__, 'priority_l2'),
        vrf=pulumi.get(__ret__, 'vrf'))


@_utilities.lift_output_func(get_isis_interface)
def get_isis_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                              interface_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIsisInterfaceResult]:
    """
    This data source can read the IS-IS interface configuration.

    - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_isis_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    ...
