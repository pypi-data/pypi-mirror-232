# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DefaultQosPolicyMapMatchClassMapSetQosGroupArgs', 'DefaultQosPolicyMapMatchClassMapSetQosGroup']

@pulumi.input_type
class DefaultQosPolicyMapMatchClassMapSetQosGroupArgs:
    def __init__(__self__, *,
                 class_map_name: pulumi.Input[str],
                 policy_map_name: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None,
                 qos_group_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DefaultQosPolicyMapMatchClassMapSetQosGroup resource.
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] qos_group_id: QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        pulumi.set(__self__, "class_map_name", class_map_name)
        pulumi.set(__self__, "policy_map_name", policy_map_name)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if qos_group_id is not None:
            pulumi.set(__self__, "qos_group_id", qos_group_id)

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> pulumi.Input[str]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @class_map_name.setter
    def class_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_map_name", value)

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> pulumi.Input[str]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @policy_map_name.setter
    def policy_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_map_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="qosGroupId")
    def qos_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "qos_group_id")

    @qos_group_id.setter
    def qos_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_group_id", value)


@pulumi.input_type
class _DefaultQosPolicyMapMatchClassMapSetQosGroupState:
    def __init__(__self__, *,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 qos_group_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DefaultQosPolicyMapMatchClassMapSetQosGroup resources.
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[int] qos_group_id: QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        if class_map_name is not None:
            pulumi.set(__self__, "class_map_name", class_map_name)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if policy_map_name is not None:
            pulumi.set(__self__, "policy_map_name", policy_map_name)
        if qos_group_id is not None:
            pulumi.set(__self__, "qos_group_id", qos_group_id)

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @class_map_name.setter
    def class_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_map_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @policy_map_name.setter
    def policy_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_map_name", value)

    @property
    @pulumi.getter(name="qosGroupId")
    def qos_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "qos_group_id")

    @qos_group_id.setter
    def qos_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_group_id", value)


class DefaultQosPolicyMapMatchClassMapSetQosGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 qos_group_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the default QoS policy map match class map set QoS group configuration.

        - API Documentation: [ipqosSetQoSGrp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:SetQoSGrp/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.DefaultQosPolicyMapMatchClassMapSetQosGroup("example",
            class_map_name="Voice",
            policy_map_name="PM1",
            qos_group_id=1)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/defaultQosPolicyMapMatchClassMapSetQosGroup:DefaultQosPolicyMapMatchClassMapSetQosGroup example "sys/ipqos/dflt/p/name-[PM1]/cmap-[Voice]/setGrp"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[int] qos_group_id: QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultQosPolicyMapMatchClassMapSetQosGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the default QoS policy map match class map set QoS group configuration.

        - API Documentation: [ipqosSetQoSGrp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:SetQoSGrp/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.DefaultQosPolicyMapMatchClassMapSetQosGroup("example",
            class_map_name="Voice",
            policy_map_name="PM1",
            qos_group_id=1)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/defaultQosPolicyMapMatchClassMapSetQosGroup:DefaultQosPolicyMapMatchClassMapSetQosGroup example "sys/ipqos/dflt/p/name-[PM1]/cmap-[Voice]/setGrp"
        ```

        :param str resource_name: The name of the resource.
        :param DefaultQosPolicyMapMatchClassMapSetQosGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultQosPolicyMapMatchClassMapSetQosGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 qos_group_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultQosPolicyMapMatchClassMapSetQosGroupArgs.__new__(DefaultQosPolicyMapMatchClassMapSetQosGroupArgs)

            if class_map_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_map_name'")
            __props__.__dict__["class_map_name"] = class_map_name
            __props__.__dict__["device"] = device
            if policy_map_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_map_name'")
            __props__.__dict__["policy_map_name"] = policy_map_name
            __props__.__dict__["qos_group_id"] = qos_group_id
        super(DefaultQosPolicyMapMatchClassMapSetQosGroup, __self__).__init__(
            'nxos:index/defaultQosPolicyMapMatchClassMapSetQosGroup:DefaultQosPolicyMapMatchClassMapSetQosGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            class_map_name: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            policy_map_name: Optional[pulumi.Input[str]] = None,
            qos_group_id: Optional[pulumi.Input[int]] = None) -> 'DefaultQosPolicyMapMatchClassMapSetQosGroup':
        """
        Get an existing DefaultQosPolicyMapMatchClassMapSetQosGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[int] qos_group_id: QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultQosPolicyMapMatchClassMapSetQosGroupState.__new__(_DefaultQosPolicyMapMatchClassMapSetQosGroupState)

        __props__.__dict__["class_map_name"] = class_map_name
        __props__.__dict__["device"] = device
        __props__.__dict__["policy_map_name"] = policy_map_name
        __props__.__dict__["qos_group_id"] = qos_group_id
        return DefaultQosPolicyMapMatchClassMapSetQosGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> pulumi.Output[str]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> pulumi.Output[str]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @property
    @pulumi.getter(name="qosGroupId")
    def qos_group_id(self) -> pulumi.Output[int]:
        """
        QoS group ID. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "qos_group_id")

