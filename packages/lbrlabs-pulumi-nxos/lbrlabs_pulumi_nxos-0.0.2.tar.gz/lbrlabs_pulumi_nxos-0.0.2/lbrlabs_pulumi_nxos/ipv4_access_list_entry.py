# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['Ipv4AccessListEntryArgs', 'Ipv4AccessListEntry']

@pulumi.input_type
class Ipv4AccessListEntryArgs:
    def __init__(__self__, *,
                 sequence_number: pulumi.Input[int],
                 ack: Optional[pulumi.Input[bool]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination_address_group: Optional[pulumi.Input[str]] = None,
                 destination_port1: Optional[pulumi.Input[str]] = None,
                 destination_port2: Optional[pulumi.Input[str]] = None,
                 destination_port_group: Optional[pulumi.Input[str]] = None,
                 destination_port_mask: Optional[pulumi.Input[str]] = None,
                 destination_port_operator: Optional[pulumi.Input[str]] = None,
                 destination_prefix: Optional[pulumi.Input[str]] = None,
                 destination_prefix_length: Optional[pulumi.Input[str]] = None,
                 destination_prefix_mask: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 est: Optional[pulumi.Input[bool]] = None,
                 fin: Optional[pulumi.Input[bool]] = None,
                 fragment: Optional[pulumi.Input[bool]] = None,
                 http_option_type: Optional[pulumi.Input[str]] = None,
                 icmp_code: Optional[pulumi.Input[int]] = None,
                 icmp_type: Optional[pulumi.Input[int]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length1: Optional[pulumi.Input[str]] = None,
                 packet_length2: Optional[pulumi.Input[str]] = None,
                 packet_length_operator: Optional[pulumi.Input[str]] = None,
                 precedence: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mask: Optional[pulumi.Input[str]] = None,
                 psh: Optional[pulumi.Input[bool]] = None,
                 redirect: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rev: Optional[pulumi.Input[bool]] = None,
                 rst: Optional[pulumi.Input[bool]] = None,
                 source_address_group: Optional[pulumi.Input[str]] = None,
                 source_port1: Optional[pulumi.Input[str]] = None,
                 source_port2: Optional[pulumi.Input[str]] = None,
                 source_port_group: Optional[pulumi.Input[str]] = None,
                 source_port_mask: Optional[pulumi.Input[str]] = None,
                 source_port_operator: Optional[pulumi.Input[str]] = None,
                 source_prefix: Optional[pulumi.Input[str]] = None,
                 source_prefix_length: Optional[pulumi.Input[str]] = None,
                 source_prefix_mask: Optional[pulumi.Input[str]] = None,
                 syn: Optional[pulumi.Input[bool]] = None,
                 time_range: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 urg: Optional[pulumi.Input[bool]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ipv4AccessListEntry resource.
        :param pulumi.Input[int] sequence_number: Sequence number.
        :param pulumi.Input[bool] ack: Match TCP ACK flag.
        :param pulumi.Input[str] action: Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        :param pulumi.Input[str] destination_address_group: Destination address group.
        :param pulumi.Input[str] destination_port1: First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port2: Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_group: Destination port group.
        :param pulumi.Input[str] destination_port_mask: Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_operator: Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] destination_prefix: Destination prefix.
        :param pulumi.Input[str] destination_prefix_length: Destination prefix length.
        :param pulumi.Input[str] destination_prefix_mask: Destination prefix mask.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dscp: Match DSCP. - Range: `0`-`63`
        :param pulumi.Input[bool] est: Match TCP EST flag.
        :param pulumi.Input[bool] fin: Match TCP FIN flag.
        :param pulumi.Input[bool] fragment: Match non-initial fragment.
        :param pulumi.Input[str] http_option_type: HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
               `invalid`
        :param pulumi.Input[int] icmp_code: ICMP code. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[int] icmp_type: ICMP type. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[bool] logging: Log matches against ACL entry. - Default value: `false`
        :param pulumi.Input[str] name: Access list name.
        :param pulumi.Input[str] packet_length1: First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length2: Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length_operator: Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] precedence: Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        :param pulumi.Input[str] protocol: Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
               `pim`, `pcp`, `udf`
        :param pulumi.Input[str] protocol_mask: Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
               `nos`, `pim`, `pcp`, `udf`
        :param pulumi.Input[bool] psh: Match TCP PSH flag.
        :param pulumi.Input[str] redirect: Redirect action.
        :param pulumi.Input[str] remark: ACL comment.
        :param pulumi.Input[bool] rev: Match TCP REV flag.
        :param pulumi.Input[bool] rst: Match TCP RST flag.
        :param pulumi.Input[str] source_address_group: Source address group.
        :param pulumi.Input[str] source_port1: First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port2: Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_group: Source port group.
        :param pulumi.Input[str] source_port_mask: Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_operator: Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] source_prefix: Source prefix.
        :param pulumi.Input[str] source_prefix_length: Source prefix length.
        :param pulumi.Input[str] source_prefix_mask: Source prefix mask.
        :param pulumi.Input[bool] syn: Match TCP SYN flag.
        :param pulumi.Input[str] time_range: Time range name.
        :param pulumi.Input[int] ttl: TTL. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] urg: Match TCP URG flag.
        :param pulumi.Input[int] vlan: VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        :param pulumi.Input[str] vni: NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        pulumi.set(__self__, "sequence_number", sequence_number)
        if ack is not None:
            pulumi.set(__self__, "ack", ack)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destination_address_group is not None:
            pulumi.set(__self__, "destination_address_group", destination_address_group)
        if destination_port1 is not None:
            pulumi.set(__self__, "destination_port1", destination_port1)
        if destination_port2 is not None:
            pulumi.set(__self__, "destination_port2", destination_port2)
        if destination_port_group is not None:
            pulumi.set(__self__, "destination_port_group", destination_port_group)
        if destination_port_mask is not None:
            pulumi.set(__self__, "destination_port_mask", destination_port_mask)
        if destination_port_operator is not None:
            pulumi.set(__self__, "destination_port_operator", destination_port_operator)
        if destination_prefix is not None:
            pulumi.set(__self__, "destination_prefix", destination_prefix)
        if destination_prefix_length is not None:
            pulumi.set(__self__, "destination_prefix_length", destination_prefix_length)
        if destination_prefix_mask is not None:
            pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if est is not None:
            pulumi.set(__self__, "est", est)
        if fin is not None:
            pulumi.set(__self__, "fin", fin)
        if fragment is not None:
            pulumi.set(__self__, "fragment", fragment)
        if http_option_type is not None:
            pulumi.set(__self__, "http_option_type", http_option_type)
        if icmp_code is not None:
            pulumi.set(__self__, "icmp_code", icmp_code)
        if icmp_type is not None:
            pulumi.set(__self__, "icmp_type", icmp_type)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_length1 is not None:
            pulumi.set(__self__, "packet_length1", packet_length1)
        if packet_length2 is not None:
            pulumi.set(__self__, "packet_length2", packet_length2)
        if packet_length_operator is not None:
            pulumi.set(__self__, "packet_length_operator", packet_length_operator)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mask is not None:
            pulumi.set(__self__, "protocol_mask", protocol_mask)
        if psh is not None:
            pulumi.set(__self__, "psh", psh)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if rst is not None:
            pulumi.set(__self__, "rst", rst)
        if source_address_group is not None:
            pulumi.set(__self__, "source_address_group", source_address_group)
        if source_port1 is not None:
            pulumi.set(__self__, "source_port1", source_port1)
        if source_port2 is not None:
            pulumi.set(__self__, "source_port2", source_port2)
        if source_port_group is not None:
            pulumi.set(__self__, "source_port_group", source_port_group)
        if source_port_mask is not None:
            pulumi.set(__self__, "source_port_mask", source_port_mask)
        if source_port_operator is not None:
            pulumi.set(__self__, "source_port_operator", source_port_operator)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_length is not None:
            pulumi.set(__self__, "source_prefix_length", source_prefix_length)
        if source_prefix_mask is not None:
            pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        if syn is not None:
            pulumi.set(__self__, "syn", syn)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if urg is not None:
            pulumi.set(__self__, "urg", urg)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> pulumi.Input[int]:
        """
        Sequence number.
        """
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter
    def ack(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP ACK flag.
        """
        return pulumi.get(self, "ack")

    @ack.setter
    def ack(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ack", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="destinationAddressGroup")
    def destination_address_group(self) -> Optional[pulumi.Input[str]]:
        """
        Destination address group.
        """
        return pulumi.get(self, "destination_address_group")

    @destination_address_group.setter
    def destination_address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_address_group", value)

    @property
    @pulumi.getter(name="destinationPort1")
    def destination_port1(self) -> Optional[pulumi.Input[str]]:
        """
        First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port1")

    @destination_port1.setter
    def destination_port1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port1", value)

    @property
    @pulumi.getter(name="destinationPort2")
    def destination_port2(self) -> Optional[pulumi.Input[str]]:
        """
        Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port2")

    @destination_port2.setter
    def destination_port2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port2", value)

    @property
    @pulumi.getter(name="destinationPortGroup")
    def destination_port_group(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port group.
        """
        return pulumi.get(self, "destination_port_group")

    @destination_port_group.setter
    def destination_port_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_group", value)

    @property
    @pulumi.getter(name="destinationPortMask")
    def destination_port_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port_mask")

    @destination_port_mask.setter
    def destination_port_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_mask", value)

    @property
    @pulumi.getter(name="destinationPortOperator")
    def destination_port_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "destination_port_operator")

    @destination_port_operator.setter
    def destination_port_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_operator", value)

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix.
        """
        return pulumi.get(self, "destination_prefix")

    @destination_prefix.setter
    def destination_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix", value)

    @property
    @pulumi.getter(name="destinationPrefixLength")
    def destination_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix length.
        """
        return pulumi.get(self, "destination_prefix_length")

    @destination_prefix_length.setter
    def destination_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix_length", value)

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix mask.
        """
        return pulumi.get(self, "destination_prefix_mask")

    @destination_prefix_mask.setter
    def destination_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix_mask", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Match DSCP. - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def est(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP EST flag.
        """
        return pulumi.get(self, "est")

    @est.setter
    def est(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "est", value)

    @property
    @pulumi.getter
    def fin(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP FIN flag.
        """
        return pulumi.get(self, "fin")

    @fin.setter
    def fin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fin", value)

    @property
    @pulumi.getter
    def fragment(self) -> Optional[pulumi.Input[bool]]:
        """
        Match non-initial fragment.
        """
        return pulumi.get(self, "fragment")

    @fragment.setter
    def fragment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fragment", value)

    @property
    @pulumi.getter(name="httpOptionType")
    def http_option_type(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        `invalid`
        """
        return pulumi.get(self, "http_option_type")

    @http_option_type.setter
    def http_option_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_option_type", value)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP code. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_code")

    @icmp_code.setter
    def icmp_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmp_code", value)

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP type. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_type")

    @icmp_type.setter
    def icmp_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmp_type", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Log matches against ACL entry. - Default value: `false`
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Access list name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLength1")
    def packet_length1(self) -> Optional[pulumi.Input[str]]:
        """
        First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length1")

    @packet_length1.setter
    def packet_length1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length1", value)

    @property
    @pulumi.getter(name="packetLength2")
    def packet_length2(self) -> Optional[pulumi.Input[str]]:
        """
        Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length2")

    @packet_length2.setter
    def packet_length2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length2", value)

    @property
    @pulumi.getter(name="packetLengthOperator")
    def packet_length_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "packet_length_operator")

    @packet_length_operator.setter
    def packet_length_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length_operator", value)

    @property
    @pulumi.getter
    def precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        """
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMask")
    def protocol_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        `nos`, `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol_mask")

    @protocol_mask.setter
    def protocol_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mask", value)

    @property
    @pulumi.getter
    def psh(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP PSH flag.
        """
        return pulumi.get(self, "psh")

    @psh.setter
    def psh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "psh", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        ACL comment.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP REV flag.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rev", value)

    @property
    @pulumi.getter
    def rst(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP RST flag.
        """
        return pulumi.get(self, "rst")

    @rst.setter
    def rst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rst", value)

    @property
    @pulumi.getter(name="sourceAddressGroup")
    def source_address_group(self) -> Optional[pulumi.Input[str]]:
        """
        Source address group.
        """
        return pulumi.get(self, "source_address_group")

    @source_address_group.setter
    def source_address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_group", value)

    @property
    @pulumi.getter(name="sourcePort1")
    def source_port1(self) -> Optional[pulumi.Input[str]]:
        """
        First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port1")

    @source_port1.setter
    def source_port1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port1", value)

    @property
    @pulumi.getter(name="sourcePort2")
    def source_port2(self) -> Optional[pulumi.Input[str]]:
        """
        Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port2")

    @source_port2.setter
    def source_port2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port2", value)

    @property
    @pulumi.getter(name="sourcePortGroup")
    def source_port_group(self) -> Optional[pulumi.Input[str]]:
        """
        Source port group.
        """
        return pulumi.get(self, "source_port_group")

    @source_port_group.setter
    def source_port_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_group", value)

    @property
    @pulumi.getter(name="sourcePortMask")
    def source_port_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port_mask")

    @source_port_mask.setter
    def source_port_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_mask", value)

    @property
    @pulumi.getter(name="sourcePortOperator")
    def source_port_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "source_port_operator")

    @source_port_operator.setter
    def source_port_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_operator", value)

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix.
        """
        return pulumi.get(self, "source_prefix")

    @source_prefix.setter
    def source_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix", value)

    @property
    @pulumi.getter(name="sourcePrefixLength")
    def source_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix length.
        """
        return pulumi.get(self, "source_prefix_length")

    @source_prefix_length.setter
    def source_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix_length", value)

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix mask.
        """
        return pulumi.get(self, "source_prefix_mask")

    @source_prefix_mask.setter
    def source_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix_mask", value)

    @property
    @pulumi.getter
    def syn(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP SYN flag.
        """
        return pulumi.get(self, "syn")

    @syn.setter
    def syn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "syn", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input[str]]:
        """
        Time range name.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def urg(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP URG flag.
        """
        return pulumi.get(self, "urg")

    @urg.setter
    def urg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "urg", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[str]]:
        """
        NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vni", value)


@pulumi.input_type
class _Ipv4AccessListEntryState:
    def __init__(__self__, *,
                 ack: Optional[pulumi.Input[bool]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination_address_group: Optional[pulumi.Input[str]] = None,
                 destination_port1: Optional[pulumi.Input[str]] = None,
                 destination_port2: Optional[pulumi.Input[str]] = None,
                 destination_port_group: Optional[pulumi.Input[str]] = None,
                 destination_port_mask: Optional[pulumi.Input[str]] = None,
                 destination_port_operator: Optional[pulumi.Input[str]] = None,
                 destination_prefix: Optional[pulumi.Input[str]] = None,
                 destination_prefix_length: Optional[pulumi.Input[str]] = None,
                 destination_prefix_mask: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 est: Optional[pulumi.Input[bool]] = None,
                 fin: Optional[pulumi.Input[bool]] = None,
                 fragment: Optional[pulumi.Input[bool]] = None,
                 http_option_type: Optional[pulumi.Input[str]] = None,
                 icmp_code: Optional[pulumi.Input[int]] = None,
                 icmp_type: Optional[pulumi.Input[int]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length1: Optional[pulumi.Input[str]] = None,
                 packet_length2: Optional[pulumi.Input[str]] = None,
                 packet_length_operator: Optional[pulumi.Input[str]] = None,
                 precedence: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mask: Optional[pulumi.Input[str]] = None,
                 psh: Optional[pulumi.Input[bool]] = None,
                 redirect: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rev: Optional[pulumi.Input[bool]] = None,
                 rst: Optional[pulumi.Input[bool]] = None,
                 sequence_number: Optional[pulumi.Input[int]] = None,
                 source_address_group: Optional[pulumi.Input[str]] = None,
                 source_port1: Optional[pulumi.Input[str]] = None,
                 source_port2: Optional[pulumi.Input[str]] = None,
                 source_port_group: Optional[pulumi.Input[str]] = None,
                 source_port_mask: Optional[pulumi.Input[str]] = None,
                 source_port_operator: Optional[pulumi.Input[str]] = None,
                 source_prefix: Optional[pulumi.Input[str]] = None,
                 source_prefix_length: Optional[pulumi.Input[str]] = None,
                 source_prefix_mask: Optional[pulumi.Input[str]] = None,
                 syn: Optional[pulumi.Input[bool]] = None,
                 time_range: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 urg: Optional[pulumi.Input[bool]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipv4AccessListEntry resources.
        :param pulumi.Input[bool] ack: Match TCP ACK flag.
        :param pulumi.Input[str] action: Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        :param pulumi.Input[str] destination_address_group: Destination address group.
        :param pulumi.Input[str] destination_port1: First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port2: Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_group: Destination port group.
        :param pulumi.Input[str] destination_port_mask: Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_operator: Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] destination_prefix: Destination prefix.
        :param pulumi.Input[str] destination_prefix_length: Destination prefix length.
        :param pulumi.Input[str] destination_prefix_mask: Destination prefix mask.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dscp: Match DSCP. - Range: `0`-`63`
        :param pulumi.Input[bool] est: Match TCP EST flag.
        :param pulumi.Input[bool] fin: Match TCP FIN flag.
        :param pulumi.Input[bool] fragment: Match non-initial fragment.
        :param pulumi.Input[str] http_option_type: HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
               `invalid`
        :param pulumi.Input[int] icmp_code: ICMP code. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[int] icmp_type: ICMP type. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[bool] logging: Log matches against ACL entry. - Default value: `false`
        :param pulumi.Input[str] name: Access list name.
        :param pulumi.Input[str] packet_length1: First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length2: Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length_operator: Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] precedence: Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        :param pulumi.Input[str] protocol: Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
               `pim`, `pcp`, `udf`
        :param pulumi.Input[str] protocol_mask: Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
               `nos`, `pim`, `pcp`, `udf`
        :param pulumi.Input[bool] psh: Match TCP PSH flag.
        :param pulumi.Input[str] redirect: Redirect action.
        :param pulumi.Input[str] remark: ACL comment.
        :param pulumi.Input[bool] rev: Match TCP REV flag.
        :param pulumi.Input[bool] rst: Match TCP RST flag.
        :param pulumi.Input[int] sequence_number: Sequence number.
        :param pulumi.Input[str] source_address_group: Source address group.
        :param pulumi.Input[str] source_port1: First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port2: Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_group: Source port group.
        :param pulumi.Input[str] source_port_mask: Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_operator: Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] source_prefix: Source prefix.
        :param pulumi.Input[str] source_prefix_length: Source prefix length.
        :param pulumi.Input[str] source_prefix_mask: Source prefix mask.
        :param pulumi.Input[bool] syn: Match TCP SYN flag.
        :param pulumi.Input[str] time_range: Time range name.
        :param pulumi.Input[int] ttl: TTL. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] urg: Match TCP URG flag.
        :param pulumi.Input[int] vlan: VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        :param pulumi.Input[str] vni: NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        if ack is not None:
            pulumi.set(__self__, "ack", ack)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destination_address_group is not None:
            pulumi.set(__self__, "destination_address_group", destination_address_group)
        if destination_port1 is not None:
            pulumi.set(__self__, "destination_port1", destination_port1)
        if destination_port2 is not None:
            pulumi.set(__self__, "destination_port2", destination_port2)
        if destination_port_group is not None:
            pulumi.set(__self__, "destination_port_group", destination_port_group)
        if destination_port_mask is not None:
            pulumi.set(__self__, "destination_port_mask", destination_port_mask)
        if destination_port_operator is not None:
            pulumi.set(__self__, "destination_port_operator", destination_port_operator)
        if destination_prefix is not None:
            pulumi.set(__self__, "destination_prefix", destination_prefix)
        if destination_prefix_length is not None:
            pulumi.set(__self__, "destination_prefix_length", destination_prefix_length)
        if destination_prefix_mask is not None:
            pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if est is not None:
            pulumi.set(__self__, "est", est)
        if fin is not None:
            pulumi.set(__self__, "fin", fin)
        if fragment is not None:
            pulumi.set(__self__, "fragment", fragment)
        if http_option_type is not None:
            pulumi.set(__self__, "http_option_type", http_option_type)
        if icmp_code is not None:
            pulumi.set(__self__, "icmp_code", icmp_code)
        if icmp_type is not None:
            pulumi.set(__self__, "icmp_type", icmp_type)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_length1 is not None:
            pulumi.set(__self__, "packet_length1", packet_length1)
        if packet_length2 is not None:
            pulumi.set(__self__, "packet_length2", packet_length2)
        if packet_length_operator is not None:
            pulumi.set(__self__, "packet_length_operator", packet_length_operator)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mask is not None:
            pulumi.set(__self__, "protocol_mask", protocol_mask)
        if psh is not None:
            pulumi.set(__self__, "psh", psh)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if rst is not None:
            pulumi.set(__self__, "rst", rst)
        if sequence_number is not None:
            pulumi.set(__self__, "sequence_number", sequence_number)
        if source_address_group is not None:
            pulumi.set(__self__, "source_address_group", source_address_group)
        if source_port1 is not None:
            pulumi.set(__self__, "source_port1", source_port1)
        if source_port2 is not None:
            pulumi.set(__self__, "source_port2", source_port2)
        if source_port_group is not None:
            pulumi.set(__self__, "source_port_group", source_port_group)
        if source_port_mask is not None:
            pulumi.set(__self__, "source_port_mask", source_port_mask)
        if source_port_operator is not None:
            pulumi.set(__self__, "source_port_operator", source_port_operator)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_length is not None:
            pulumi.set(__self__, "source_prefix_length", source_prefix_length)
        if source_prefix_mask is not None:
            pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        if syn is not None:
            pulumi.set(__self__, "syn", syn)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if urg is not None:
            pulumi.set(__self__, "urg", urg)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter
    def ack(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP ACK flag.
        """
        return pulumi.get(self, "ack")

    @ack.setter
    def ack(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ack", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="destinationAddressGroup")
    def destination_address_group(self) -> Optional[pulumi.Input[str]]:
        """
        Destination address group.
        """
        return pulumi.get(self, "destination_address_group")

    @destination_address_group.setter
    def destination_address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_address_group", value)

    @property
    @pulumi.getter(name="destinationPort1")
    def destination_port1(self) -> Optional[pulumi.Input[str]]:
        """
        First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port1")

    @destination_port1.setter
    def destination_port1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port1", value)

    @property
    @pulumi.getter(name="destinationPort2")
    def destination_port2(self) -> Optional[pulumi.Input[str]]:
        """
        Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port2")

    @destination_port2.setter
    def destination_port2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port2", value)

    @property
    @pulumi.getter(name="destinationPortGroup")
    def destination_port_group(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port group.
        """
        return pulumi.get(self, "destination_port_group")

    @destination_port_group.setter
    def destination_port_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_group", value)

    @property
    @pulumi.getter(name="destinationPortMask")
    def destination_port_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port_mask")

    @destination_port_mask.setter
    def destination_port_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_mask", value)

    @property
    @pulumi.getter(name="destinationPortOperator")
    def destination_port_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "destination_port_operator")

    @destination_port_operator.setter
    def destination_port_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_operator", value)

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix.
        """
        return pulumi.get(self, "destination_prefix")

    @destination_prefix.setter
    def destination_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix", value)

    @property
    @pulumi.getter(name="destinationPrefixLength")
    def destination_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix length.
        """
        return pulumi.get(self, "destination_prefix_length")

    @destination_prefix_length.setter
    def destination_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix_length", value)

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Destination prefix mask.
        """
        return pulumi.get(self, "destination_prefix_mask")

    @destination_prefix_mask.setter
    def destination_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix_mask", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Match DSCP. - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def est(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP EST flag.
        """
        return pulumi.get(self, "est")

    @est.setter
    def est(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "est", value)

    @property
    @pulumi.getter
    def fin(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP FIN flag.
        """
        return pulumi.get(self, "fin")

    @fin.setter
    def fin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fin", value)

    @property
    @pulumi.getter
    def fragment(self) -> Optional[pulumi.Input[bool]]:
        """
        Match non-initial fragment.
        """
        return pulumi.get(self, "fragment")

    @fragment.setter
    def fragment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fragment", value)

    @property
    @pulumi.getter(name="httpOptionType")
    def http_option_type(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        `invalid`
        """
        return pulumi.get(self, "http_option_type")

    @http_option_type.setter
    def http_option_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_option_type", value)

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP code. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_code")

    @icmp_code.setter
    def icmp_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmp_code", value)

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> Optional[pulumi.Input[int]]:
        """
        ICMP type. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_type")

    @icmp_type.setter
    def icmp_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmp_type", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Log matches against ACL entry. - Default value: `false`
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Access list name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLength1")
    def packet_length1(self) -> Optional[pulumi.Input[str]]:
        """
        First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length1")

    @packet_length1.setter
    def packet_length1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length1", value)

    @property
    @pulumi.getter(name="packetLength2")
    def packet_length2(self) -> Optional[pulumi.Input[str]]:
        """
        Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length2")

    @packet_length2.setter
    def packet_length2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length2", value)

    @property
    @pulumi.getter(name="packetLengthOperator")
    def packet_length_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "packet_length_operator")

    @packet_length_operator.setter
    def packet_length_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_length_operator", value)

    @property
    @pulumi.getter
    def precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        """
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMask")
    def protocol_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        `nos`, `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol_mask")

    @protocol_mask.setter
    def protocol_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mask", value)

    @property
    @pulumi.getter
    def psh(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP PSH flag.
        """
        return pulumi.get(self, "psh")

    @psh.setter
    def psh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "psh", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        ACL comment.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP REV flag.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rev", value)

    @property
    @pulumi.getter
    def rst(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP RST flag.
        """
        return pulumi.get(self, "rst")

    @rst.setter
    def rst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rst", value)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number.
        """
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter(name="sourceAddressGroup")
    def source_address_group(self) -> Optional[pulumi.Input[str]]:
        """
        Source address group.
        """
        return pulumi.get(self, "source_address_group")

    @source_address_group.setter
    def source_address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_group", value)

    @property
    @pulumi.getter(name="sourcePort1")
    def source_port1(self) -> Optional[pulumi.Input[str]]:
        """
        First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port1")

    @source_port1.setter
    def source_port1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port1", value)

    @property
    @pulumi.getter(name="sourcePort2")
    def source_port2(self) -> Optional[pulumi.Input[str]]:
        """
        Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port2")

    @source_port2.setter
    def source_port2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port2", value)

    @property
    @pulumi.getter(name="sourcePortGroup")
    def source_port_group(self) -> Optional[pulumi.Input[str]]:
        """
        Source port group.
        """
        return pulumi.get(self, "source_port_group")

    @source_port_group.setter
    def source_port_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_group", value)

    @property
    @pulumi.getter(name="sourcePortMask")
    def source_port_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port_mask")

    @source_port_mask.setter
    def source_port_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_mask", value)

    @property
    @pulumi.getter(name="sourcePortOperator")
    def source_port_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "source_port_operator")

    @source_port_operator.setter
    def source_port_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_operator", value)

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix.
        """
        return pulumi.get(self, "source_prefix")

    @source_prefix.setter
    def source_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix", value)

    @property
    @pulumi.getter(name="sourcePrefixLength")
    def source_prefix_length(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix length.
        """
        return pulumi.get(self, "source_prefix_length")

    @source_prefix_length.setter
    def source_prefix_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix_length", value)

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Source prefix mask.
        """
        return pulumi.get(self, "source_prefix_mask")

    @source_prefix_mask.setter
    def source_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix_mask", value)

    @property
    @pulumi.getter
    def syn(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP SYN flag.
        """
        return pulumi.get(self, "syn")

    @syn.setter
    def syn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "syn", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input[str]]:
        """
        Time range name.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def urg(self) -> Optional[pulumi.Input[bool]]:
        """
        Match TCP URG flag.
        """
        return pulumi.get(self, "urg")

    @urg.setter
    def urg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "urg", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[str]]:
        """
        NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vni", value)


class Ipv4AccessListEntry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ack: Optional[pulumi.Input[bool]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination_address_group: Optional[pulumi.Input[str]] = None,
                 destination_port1: Optional[pulumi.Input[str]] = None,
                 destination_port2: Optional[pulumi.Input[str]] = None,
                 destination_port_group: Optional[pulumi.Input[str]] = None,
                 destination_port_mask: Optional[pulumi.Input[str]] = None,
                 destination_port_operator: Optional[pulumi.Input[str]] = None,
                 destination_prefix: Optional[pulumi.Input[str]] = None,
                 destination_prefix_length: Optional[pulumi.Input[str]] = None,
                 destination_prefix_mask: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 est: Optional[pulumi.Input[bool]] = None,
                 fin: Optional[pulumi.Input[bool]] = None,
                 fragment: Optional[pulumi.Input[bool]] = None,
                 http_option_type: Optional[pulumi.Input[str]] = None,
                 icmp_code: Optional[pulumi.Input[int]] = None,
                 icmp_type: Optional[pulumi.Input[int]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length1: Optional[pulumi.Input[str]] = None,
                 packet_length2: Optional[pulumi.Input[str]] = None,
                 packet_length_operator: Optional[pulumi.Input[str]] = None,
                 precedence: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mask: Optional[pulumi.Input[str]] = None,
                 psh: Optional[pulumi.Input[bool]] = None,
                 redirect: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rev: Optional[pulumi.Input[bool]] = None,
                 rst: Optional[pulumi.Input[bool]] = None,
                 sequence_number: Optional[pulumi.Input[int]] = None,
                 source_address_group: Optional[pulumi.Input[str]] = None,
                 source_port1: Optional[pulumi.Input[str]] = None,
                 source_port2: Optional[pulumi.Input[str]] = None,
                 source_port_group: Optional[pulumi.Input[str]] = None,
                 source_port_mask: Optional[pulumi.Input[str]] = None,
                 source_port_operator: Optional[pulumi.Input[str]] = None,
                 source_prefix: Optional[pulumi.Input[str]] = None,
                 source_prefix_length: Optional[pulumi.Input[str]] = None,
                 source_prefix_mask: Optional[pulumi.Input[str]] = None,
                 syn: Optional[pulumi.Input[bool]] = None,
                 time_range: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 urg: Optional[pulumi.Input[bool]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage IPv4 Access List Entries.

        - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.Ipv4AccessListEntry("example",
            ack=False,
            action="permit",
            destination_address_group="AG1",
            destination_port1="443",
            destination_port2="0",
            destination_port_group="PG1",
            destination_port_mask="0",
            destination_port_operator="eq",
            destination_prefix="10.1.1.0",
            destination_prefix_length="24",
            destination_prefix_mask="255.255.255.0",
            dscp=0,
            est=False,
            fin=False,
            fragment=False,
            http_option_type="invalid",
            icmp_code=0,
            icmp_type=0,
            logging=True,
            packet_length1="19",
            packet_length2="9210",
            packet_length_operator="range",
            precedence="0",
            protocol="tcp",
            protocol_mask="tcp",
            psh=False,
            redirect="RD",
            remark="Line1",
            rev=False,
            rst=False,
            sequence_number=10,
            source_address_group="AG2",
            source_port1="443",
            source_port2="0",
            source_port_group="PG2",
            source_port_mask="0",
            source_port_operator="eq",
            source_prefix="20.1.0.0",
            source_prefix_length="16",
            source_prefix_mask="255.255.0.0",
            syn=False,
            time_range="TR1",
            ttl=0,
            urg=False,
            vlan=4095,
            vni="invalid")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry example "sys/acl/ipv4/name-[ACL1]/seq-[10]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] ack: Match TCP ACK flag.
        :param pulumi.Input[str] action: Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        :param pulumi.Input[str] destination_address_group: Destination address group.
        :param pulumi.Input[str] destination_port1: First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port2: Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_group: Destination port group.
        :param pulumi.Input[str] destination_port_mask: Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_operator: Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] destination_prefix: Destination prefix.
        :param pulumi.Input[str] destination_prefix_length: Destination prefix length.
        :param pulumi.Input[str] destination_prefix_mask: Destination prefix mask.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dscp: Match DSCP. - Range: `0`-`63`
        :param pulumi.Input[bool] est: Match TCP EST flag.
        :param pulumi.Input[bool] fin: Match TCP FIN flag.
        :param pulumi.Input[bool] fragment: Match non-initial fragment.
        :param pulumi.Input[str] http_option_type: HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
               `invalid`
        :param pulumi.Input[int] icmp_code: ICMP code. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[int] icmp_type: ICMP type. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[bool] logging: Log matches against ACL entry. - Default value: `false`
        :param pulumi.Input[str] name: Access list name.
        :param pulumi.Input[str] packet_length1: First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length2: Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length_operator: Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] precedence: Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        :param pulumi.Input[str] protocol: Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
               `pim`, `pcp`, `udf`
        :param pulumi.Input[str] protocol_mask: Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
               `nos`, `pim`, `pcp`, `udf`
        :param pulumi.Input[bool] psh: Match TCP PSH flag.
        :param pulumi.Input[str] redirect: Redirect action.
        :param pulumi.Input[str] remark: ACL comment.
        :param pulumi.Input[bool] rev: Match TCP REV flag.
        :param pulumi.Input[bool] rst: Match TCP RST flag.
        :param pulumi.Input[int] sequence_number: Sequence number.
        :param pulumi.Input[str] source_address_group: Source address group.
        :param pulumi.Input[str] source_port1: First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port2: Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_group: Source port group.
        :param pulumi.Input[str] source_port_mask: Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_operator: Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] source_prefix: Source prefix.
        :param pulumi.Input[str] source_prefix_length: Source prefix length.
        :param pulumi.Input[str] source_prefix_mask: Source prefix mask.
        :param pulumi.Input[bool] syn: Match TCP SYN flag.
        :param pulumi.Input[str] time_range: Time range name.
        :param pulumi.Input[int] ttl: TTL. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] urg: Match TCP URG flag.
        :param pulumi.Input[int] vlan: VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        :param pulumi.Input[str] vni: NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ipv4AccessListEntryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage IPv4 Access List Entries.

        - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.Ipv4AccessListEntry("example",
            ack=False,
            action="permit",
            destination_address_group="AG1",
            destination_port1="443",
            destination_port2="0",
            destination_port_group="PG1",
            destination_port_mask="0",
            destination_port_operator="eq",
            destination_prefix="10.1.1.0",
            destination_prefix_length="24",
            destination_prefix_mask="255.255.255.0",
            dscp=0,
            est=False,
            fin=False,
            fragment=False,
            http_option_type="invalid",
            icmp_code=0,
            icmp_type=0,
            logging=True,
            packet_length1="19",
            packet_length2="9210",
            packet_length_operator="range",
            precedence="0",
            protocol="tcp",
            protocol_mask="tcp",
            psh=False,
            redirect="RD",
            remark="Line1",
            rev=False,
            rst=False,
            sequence_number=10,
            source_address_group="AG2",
            source_port1="443",
            source_port2="0",
            source_port_group="PG2",
            source_port_mask="0",
            source_port_operator="eq",
            source_prefix="20.1.0.0",
            source_prefix_length="16",
            source_prefix_mask="255.255.0.0",
            syn=False,
            time_range="TR1",
            ttl=0,
            urg=False,
            vlan=4095,
            vni="invalid")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry example "sys/acl/ipv4/name-[ACL1]/seq-[10]"
        ```

        :param str resource_name: The name of the resource.
        :param Ipv4AccessListEntryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ipv4AccessListEntryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ack: Optional[pulumi.Input[bool]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 destination_address_group: Optional[pulumi.Input[str]] = None,
                 destination_port1: Optional[pulumi.Input[str]] = None,
                 destination_port2: Optional[pulumi.Input[str]] = None,
                 destination_port_group: Optional[pulumi.Input[str]] = None,
                 destination_port_mask: Optional[pulumi.Input[str]] = None,
                 destination_port_operator: Optional[pulumi.Input[str]] = None,
                 destination_prefix: Optional[pulumi.Input[str]] = None,
                 destination_prefix_length: Optional[pulumi.Input[str]] = None,
                 destination_prefix_mask: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 est: Optional[pulumi.Input[bool]] = None,
                 fin: Optional[pulumi.Input[bool]] = None,
                 fragment: Optional[pulumi.Input[bool]] = None,
                 http_option_type: Optional[pulumi.Input[str]] = None,
                 icmp_code: Optional[pulumi.Input[int]] = None,
                 icmp_type: Optional[pulumi.Input[int]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_length1: Optional[pulumi.Input[str]] = None,
                 packet_length2: Optional[pulumi.Input[str]] = None,
                 packet_length_operator: Optional[pulumi.Input[str]] = None,
                 precedence: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mask: Optional[pulumi.Input[str]] = None,
                 psh: Optional[pulumi.Input[bool]] = None,
                 redirect: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rev: Optional[pulumi.Input[bool]] = None,
                 rst: Optional[pulumi.Input[bool]] = None,
                 sequence_number: Optional[pulumi.Input[int]] = None,
                 source_address_group: Optional[pulumi.Input[str]] = None,
                 source_port1: Optional[pulumi.Input[str]] = None,
                 source_port2: Optional[pulumi.Input[str]] = None,
                 source_port_group: Optional[pulumi.Input[str]] = None,
                 source_port_mask: Optional[pulumi.Input[str]] = None,
                 source_port_operator: Optional[pulumi.Input[str]] = None,
                 source_prefix: Optional[pulumi.Input[str]] = None,
                 source_prefix_length: Optional[pulumi.Input[str]] = None,
                 source_prefix_mask: Optional[pulumi.Input[str]] = None,
                 syn: Optional[pulumi.Input[bool]] = None,
                 time_range: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 urg: Optional[pulumi.Input[bool]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ipv4AccessListEntryArgs.__new__(Ipv4AccessListEntryArgs)

            __props__.__dict__["ack"] = ack
            __props__.__dict__["action"] = action
            __props__.__dict__["destination_address_group"] = destination_address_group
            __props__.__dict__["destination_port1"] = destination_port1
            __props__.__dict__["destination_port2"] = destination_port2
            __props__.__dict__["destination_port_group"] = destination_port_group
            __props__.__dict__["destination_port_mask"] = destination_port_mask
            __props__.__dict__["destination_port_operator"] = destination_port_operator
            __props__.__dict__["destination_prefix"] = destination_prefix
            __props__.__dict__["destination_prefix_length"] = destination_prefix_length
            __props__.__dict__["destination_prefix_mask"] = destination_prefix_mask
            __props__.__dict__["device"] = device
            __props__.__dict__["dscp"] = dscp
            __props__.__dict__["est"] = est
            __props__.__dict__["fin"] = fin
            __props__.__dict__["fragment"] = fragment
            __props__.__dict__["http_option_type"] = http_option_type
            __props__.__dict__["icmp_code"] = icmp_code
            __props__.__dict__["icmp_type"] = icmp_type
            __props__.__dict__["logging"] = logging
            __props__.__dict__["name"] = name
            __props__.__dict__["packet_length1"] = packet_length1
            __props__.__dict__["packet_length2"] = packet_length2
            __props__.__dict__["packet_length_operator"] = packet_length_operator
            __props__.__dict__["precedence"] = precedence
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["protocol_mask"] = protocol_mask
            __props__.__dict__["psh"] = psh
            __props__.__dict__["redirect"] = redirect
            __props__.__dict__["remark"] = remark
            __props__.__dict__["rev"] = rev
            __props__.__dict__["rst"] = rst
            if sequence_number is None and not opts.urn:
                raise TypeError("Missing required property 'sequence_number'")
            __props__.__dict__["sequence_number"] = sequence_number
            __props__.__dict__["source_address_group"] = source_address_group
            __props__.__dict__["source_port1"] = source_port1
            __props__.__dict__["source_port2"] = source_port2
            __props__.__dict__["source_port_group"] = source_port_group
            __props__.__dict__["source_port_mask"] = source_port_mask
            __props__.__dict__["source_port_operator"] = source_port_operator
            __props__.__dict__["source_prefix"] = source_prefix
            __props__.__dict__["source_prefix_length"] = source_prefix_length
            __props__.__dict__["source_prefix_mask"] = source_prefix_mask
            __props__.__dict__["syn"] = syn
            __props__.__dict__["time_range"] = time_range
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["urg"] = urg
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["vni"] = vni
        super(Ipv4AccessListEntry, __self__).__init__(
            'nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ack: Optional[pulumi.Input[bool]] = None,
            action: Optional[pulumi.Input[str]] = None,
            destination_address_group: Optional[pulumi.Input[str]] = None,
            destination_port1: Optional[pulumi.Input[str]] = None,
            destination_port2: Optional[pulumi.Input[str]] = None,
            destination_port_group: Optional[pulumi.Input[str]] = None,
            destination_port_mask: Optional[pulumi.Input[str]] = None,
            destination_port_operator: Optional[pulumi.Input[str]] = None,
            destination_prefix: Optional[pulumi.Input[str]] = None,
            destination_prefix_length: Optional[pulumi.Input[str]] = None,
            destination_prefix_mask: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dscp: Optional[pulumi.Input[int]] = None,
            est: Optional[pulumi.Input[bool]] = None,
            fin: Optional[pulumi.Input[bool]] = None,
            fragment: Optional[pulumi.Input[bool]] = None,
            http_option_type: Optional[pulumi.Input[str]] = None,
            icmp_code: Optional[pulumi.Input[int]] = None,
            icmp_type: Optional[pulumi.Input[int]] = None,
            logging: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            packet_length1: Optional[pulumi.Input[str]] = None,
            packet_length2: Optional[pulumi.Input[str]] = None,
            packet_length_operator: Optional[pulumi.Input[str]] = None,
            precedence: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_mask: Optional[pulumi.Input[str]] = None,
            psh: Optional[pulumi.Input[bool]] = None,
            redirect: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            rev: Optional[pulumi.Input[bool]] = None,
            rst: Optional[pulumi.Input[bool]] = None,
            sequence_number: Optional[pulumi.Input[int]] = None,
            source_address_group: Optional[pulumi.Input[str]] = None,
            source_port1: Optional[pulumi.Input[str]] = None,
            source_port2: Optional[pulumi.Input[str]] = None,
            source_port_group: Optional[pulumi.Input[str]] = None,
            source_port_mask: Optional[pulumi.Input[str]] = None,
            source_port_operator: Optional[pulumi.Input[str]] = None,
            source_prefix: Optional[pulumi.Input[str]] = None,
            source_prefix_length: Optional[pulumi.Input[str]] = None,
            source_prefix_mask: Optional[pulumi.Input[str]] = None,
            syn: Optional[pulumi.Input[bool]] = None,
            time_range: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            urg: Optional[pulumi.Input[bool]] = None,
            vlan: Optional[pulumi.Input[int]] = None,
            vni: Optional[pulumi.Input[str]] = None) -> 'Ipv4AccessListEntry':
        """
        Get an existing Ipv4AccessListEntry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] ack: Match TCP ACK flag.
        :param pulumi.Input[str] action: Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        :param pulumi.Input[str] destination_address_group: Destination address group.
        :param pulumi.Input[str] destination_port1: First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port2: Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_group: Destination port group.
        :param pulumi.Input[str] destination_port_mask: Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] destination_port_operator: Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] destination_prefix: Destination prefix.
        :param pulumi.Input[str] destination_prefix_length: Destination prefix length.
        :param pulumi.Input[str] destination_prefix_mask: Destination prefix mask.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dscp: Match DSCP. - Range: `0`-`63`
        :param pulumi.Input[bool] est: Match TCP EST flag.
        :param pulumi.Input[bool] fin: Match TCP FIN flag.
        :param pulumi.Input[bool] fragment: Match non-initial fragment.
        :param pulumi.Input[str] http_option_type: HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
               `invalid`
        :param pulumi.Input[int] icmp_code: ICMP code. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[int] icmp_type: ICMP type. - Range: `0`-`256` - Default value: `256`
        :param pulumi.Input[bool] logging: Log matches against ACL entry. - Default value: `false`
        :param pulumi.Input[str] name: Access list name.
        :param pulumi.Input[str] packet_length1: First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length2: Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        :param pulumi.Input[str] packet_length_operator: Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] precedence: Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        :param pulumi.Input[str] protocol: Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
               `pim`, `pcp`, `udf`
        :param pulumi.Input[str] protocol_mask: Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
               `nos`, `pim`, `pcp`, `udf`
        :param pulumi.Input[bool] psh: Match TCP PSH flag.
        :param pulumi.Input[str] redirect: Redirect action.
        :param pulumi.Input[str] remark: ACL comment.
        :param pulumi.Input[bool] rev: Match TCP REV flag.
        :param pulumi.Input[bool] rst: Match TCP RST flag.
        :param pulumi.Input[int] sequence_number: Sequence number.
        :param pulumi.Input[str] source_address_group: Source address group.
        :param pulumi.Input[str] source_port1: First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port2: Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_group: Source port group.
        :param pulumi.Input[str] source_port_mask: Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
               `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
               `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
               `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
               `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        :param pulumi.Input[str] source_port_operator: Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        :param pulumi.Input[str] source_prefix: Source prefix.
        :param pulumi.Input[str] source_prefix_length: Source prefix length.
        :param pulumi.Input[str] source_prefix_mask: Source prefix mask.
        :param pulumi.Input[bool] syn: Match TCP SYN flag.
        :param pulumi.Input[str] time_range: Time range name.
        :param pulumi.Input[int] ttl: TTL. - Range: `0`-`255` - Default value: `0`
        :param pulumi.Input[bool] urg: Match TCP URG flag.
        :param pulumi.Input[int] vlan: VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        :param pulumi.Input[str] vni: NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ipv4AccessListEntryState.__new__(_Ipv4AccessListEntryState)

        __props__.__dict__["ack"] = ack
        __props__.__dict__["action"] = action
        __props__.__dict__["destination_address_group"] = destination_address_group
        __props__.__dict__["destination_port1"] = destination_port1
        __props__.__dict__["destination_port2"] = destination_port2
        __props__.__dict__["destination_port_group"] = destination_port_group
        __props__.__dict__["destination_port_mask"] = destination_port_mask
        __props__.__dict__["destination_port_operator"] = destination_port_operator
        __props__.__dict__["destination_prefix"] = destination_prefix
        __props__.__dict__["destination_prefix_length"] = destination_prefix_length
        __props__.__dict__["destination_prefix_mask"] = destination_prefix_mask
        __props__.__dict__["device"] = device
        __props__.__dict__["dscp"] = dscp
        __props__.__dict__["est"] = est
        __props__.__dict__["fin"] = fin
        __props__.__dict__["fragment"] = fragment
        __props__.__dict__["http_option_type"] = http_option_type
        __props__.__dict__["icmp_code"] = icmp_code
        __props__.__dict__["icmp_type"] = icmp_type
        __props__.__dict__["logging"] = logging
        __props__.__dict__["name"] = name
        __props__.__dict__["packet_length1"] = packet_length1
        __props__.__dict__["packet_length2"] = packet_length2
        __props__.__dict__["packet_length_operator"] = packet_length_operator
        __props__.__dict__["precedence"] = precedence
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_mask"] = protocol_mask
        __props__.__dict__["psh"] = psh
        __props__.__dict__["redirect"] = redirect
        __props__.__dict__["remark"] = remark
        __props__.__dict__["rev"] = rev
        __props__.__dict__["rst"] = rst
        __props__.__dict__["sequence_number"] = sequence_number
        __props__.__dict__["source_address_group"] = source_address_group
        __props__.__dict__["source_port1"] = source_port1
        __props__.__dict__["source_port2"] = source_port2
        __props__.__dict__["source_port_group"] = source_port_group
        __props__.__dict__["source_port_mask"] = source_port_mask
        __props__.__dict__["source_port_operator"] = source_port_operator
        __props__.__dict__["source_prefix"] = source_prefix
        __props__.__dict__["source_prefix_length"] = source_prefix_length
        __props__.__dict__["source_prefix_mask"] = source_prefix_mask
        __props__.__dict__["syn"] = syn
        __props__.__dict__["time_range"] = time_range
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["urg"] = urg
        __props__.__dict__["vlan"] = vlan
        __props__.__dict__["vni"] = vni
        return Ipv4AccessListEntry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ack(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP ACK flag.
        """
        return pulumi.get(self, "ack")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="destinationAddressGroup")
    def destination_address_group(self) -> pulumi.Output[Optional[str]]:
        """
        Destination address group.
        """
        return pulumi.get(self, "destination_address_group")

    @property
    @pulumi.getter(name="destinationPort1")
    def destination_port1(self) -> pulumi.Output[Optional[str]]:
        """
        First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port1")

    @property
    @pulumi.getter(name="destinationPort2")
    def destination_port2(self) -> pulumi.Output[Optional[str]]:
        """
        Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port2")

    @property
    @pulumi.getter(name="destinationPortGroup")
    def destination_port_group(self) -> pulumi.Output[Optional[str]]:
        """
        Destination port group.
        """
        return pulumi.get(self, "destination_port_group")

    @property
    @pulumi.getter(name="destinationPortMask")
    def destination_port_mask(self) -> pulumi.Output[Optional[str]]:
        """
        Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "destination_port_mask")

    @property
    @pulumi.getter(name="destinationPortOperator")
    def destination_port_operator(self) -> pulumi.Output[str]:
        """
        Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "destination_port_operator")

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        Destination prefix.
        """
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="destinationPrefixLength")
    def destination_prefix_length(self) -> pulumi.Output[Optional[str]]:
        """
        Destination prefix length.
        """
        return pulumi.get(self, "destination_prefix_length")

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> pulumi.Output[Optional[str]]:
        """
        Destination prefix mask.
        """
        return pulumi.get(self, "destination_prefix_mask")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def dscp(self) -> pulumi.Output[Optional[int]]:
        """
        Match DSCP. - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def est(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP EST flag.
        """
        return pulumi.get(self, "est")

    @property
    @pulumi.getter
    def fin(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP FIN flag.
        """
        return pulumi.get(self, "fin")

    @property
    @pulumi.getter
    def fragment(self) -> pulumi.Output[Optional[bool]]:
        """
        Match non-initial fragment.
        """
        return pulumi.get(self, "fragment")

    @property
    @pulumi.getter(name="httpOptionType")
    def http_option_type(self) -> pulumi.Output[str]:
        """
        HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        `invalid`
        """
        return pulumi.get(self, "http_option_type")

    @property
    @pulumi.getter(name="icmpCode")
    def icmp_code(self) -> pulumi.Output[int]:
        """
        ICMP code. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_code")

    @property
    @pulumi.getter(name="icmpType")
    def icmp_type(self) -> pulumi.Output[int]:
        """
        ICMP type. - Range: `0`-`256` - Default value: `256`
        """
        return pulumi.get(self, "icmp_type")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[bool]:
        """
        Log matches against ACL entry. - Default value: `false`
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Access list name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLength1")
    def packet_length1(self) -> pulumi.Output[str]:
        """
        First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length1")

    @property
    @pulumi.getter(name="packetLength2")
    def packet_length2(self) -> pulumi.Output[str]:
        """
        Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        """
        return pulumi.get(self, "packet_length2")

    @property
    @pulumi.getter(name="packetLengthOperator")
    def packet_length_operator(self) -> pulumi.Output[str]:
        """
        Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "packet_length_operator")

    @property
    @pulumi.getter
    def precedence(self) -> pulumi.Output[str]:
        """
        Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        """
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolMask")
    def protocol_mask(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        `nos`, `pim`, `pcp`, `udf`
        """
        return pulumi.get(self, "protocol_mask")

    @property
    @pulumi.getter
    def psh(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP PSH flag.
        """
        return pulumi.get(self, "psh")

    @property
    @pulumi.getter
    def redirect(self) -> pulumi.Output[Optional[str]]:
        """
        Redirect action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        ACL comment.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def rev(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP REV flag.
        """
        return pulumi.get(self, "rev")

    @property
    @pulumi.getter
    def rst(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP RST flag.
        """
        return pulumi.get(self, "rst")

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> pulumi.Output[int]:
        """
        Sequence number.
        """
        return pulumi.get(self, "sequence_number")

    @property
    @pulumi.getter(name="sourceAddressGroup")
    def source_address_group(self) -> pulumi.Output[Optional[str]]:
        """
        Source address group.
        """
        return pulumi.get(self, "source_address_group")

    @property
    @pulumi.getter(name="sourcePort1")
    def source_port1(self) -> pulumi.Output[Optional[str]]:
        """
        First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port1")

    @property
    @pulumi.getter(name="sourcePort2")
    def source_port2(self) -> pulumi.Output[Optional[str]]:
        """
        Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port2")

    @property
    @pulumi.getter(name="sourcePortGroup")
    def source_port_group(self) -> pulumi.Output[Optional[str]]:
        """
        Source port group.
        """
        return pulumi.get(self, "source_port_group")

    @property
    @pulumi.getter(name="sourcePortMask")
    def source_port_mask(self) -> pulumi.Output[Optional[str]]:
        """
        Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        """
        return pulumi.get(self, "source_port_mask")

    @property
    @pulumi.getter(name="sourcePortOperator")
    def source_port_operator(self) -> pulumi.Output[str]:
        """
        Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        """
        return pulumi.get(self, "source_port_operator")

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        Source prefix.
        """
        return pulumi.get(self, "source_prefix")

    @property
    @pulumi.getter(name="sourcePrefixLength")
    def source_prefix_length(self) -> pulumi.Output[Optional[str]]:
        """
        Source prefix length.
        """
        return pulumi.get(self, "source_prefix_length")

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> pulumi.Output[Optional[str]]:
        """
        Source prefix mask.
        """
        return pulumi.get(self, "source_prefix_mask")

    @property
    @pulumi.getter
    def syn(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP SYN flag.
        """
        return pulumi.get(self, "syn")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Output[Optional[str]]:
        """
        Time range name.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        TTL. - Range: `0`-`255` - Default value: `0`
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def urg(self) -> pulumi.Output[Optional[bool]]:
        """
        Match TCP URG flag.
        """
        return pulumi.get(self, "urg")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[int]:
        """
        VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Output[str]:
        """
        NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        """
        return pulumi.get(self, "vni")

