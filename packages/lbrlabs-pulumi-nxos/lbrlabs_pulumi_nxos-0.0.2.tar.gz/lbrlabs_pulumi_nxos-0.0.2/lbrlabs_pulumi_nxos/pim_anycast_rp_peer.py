# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PimAnycastRpPeerArgs', 'PimAnycastRpPeer']

@pulumi.input_type
class PimAnycastRpPeerArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 rp_set_address: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 device: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PimAnycastRpPeer resource.
        :param pulumi.Input[str] address: Anycast RP address.
        :param pulumi.Input[str] rp_set_address: RP set address.
        :param pulumi.Input[str] vrf_name: VRF name.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "rp_set_address", rp_set_address)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        Anycast RP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="rpSetAddress")
    def rp_set_address(self) -> pulumi.Input[str]:
        """
        RP set address.
        """
        return pulumi.get(self, "rp_set_address")

    @rp_set_address.setter
    def rp_set_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "rp_set_address", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


@pulumi.input_type
class _PimAnycastRpPeerState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 rp_set_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PimAnycastRpPeer resources.
        :param pulumi.Input[str] address: Anycast RP address.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] rp_set_address: RP set address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if rp_set_address is not None:
            pulumi.set(__self__, "rp_set_address", rp_set_address)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Anycast RP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="rpSetAddress")
    def rp_set_address(self) -> Optional[pulumi.Input[str]]:
        """
        RP set address.
        """
        return pulumi.get(self, "rp_set_address")

    @rp_set_address.setter
    def rp_set_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_set_address", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


class PimAnycastRpPeer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 rp_set_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the PIM Anycast RP peer configuration.

        - API Documentation: [pimAcastRPPeer](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:AcastRPPeer/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PimAnycastRpPeer("example",
            address="10.1.1.1/32",
            rp_set_address="20.1.1.1/32",
            vrf_name="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/pimAnycastRpPeer:PimAnycastRpPeer example "sys/pim/inst/dom-[default]/acastrpfunc/peer-[10.1.1.1/32]-peer-[20.1.1.1/32]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Anycast RP address.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] rp_set_address: RP set address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PimAnycastRpPeerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the PIM Anycast RP peer configuration.

        - API Documentation: [pimAcastRPPeer](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:AcastRPPeer/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.PimAnycastRpPeer("example",
            address="10.1.1.1/32",
            rp_set_address="20.1.1.1/32",
            vrf_name="default")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/pimAnycastRpPeer:PimAnycastRpPeer example "sys/pim/inst/dom-[default]/acastrpfunc/peer-[10.1.1.1/32]-peer-[20.1.1.1/32]"
        ```

        :param str resource_name: The name of the resource.
        :param PimAnycastRpPeerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PimAnycastRpPeerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 rp_set_address: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PimAnycastRpPeerArgs.__new__(PimAnycastRpPeerArgs)

            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["device"] = device
            if rp_set_address is None and not opts.urn:
                raise TypeError("Missing required property 'rp_set_address'")
            __props__.__dict__["rp_set_address"] = rp_set_address
            if vrf_name is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_name'")
            __props__.__dict__["vrf_name"] = vrf_name
        super(PimAnycastRpPeer, __self__).__init__(
            'nxos:index/pimAnycastRpPeer:PimAnycastRpPeer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            rp_set_address: Optional[pulumi.Input[str]] = None,
            vrf_name: Optional[pulumi.Input[str]] = None) -> 'PimAnycastRpPeer':
        """
        Get an existing PimAnycastRpPeer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Anycast RP address.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] rp_set_address: RP set address.
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PimAnycastRpPeerState.__new__(_PimAnycastRpPeerState)

        __props__.__dict__["address"] = address
        __props__.__dict__["device"] = device
        __props__.__dict__["rp_set_address"] = rp_set_address
        __props__.__dict__["vrf_name"] = vrf_name
        return PimAnycastRpPeer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        Anycast RP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="rpSetAddress")
    def rp_set_address(self) -> pulumi.Output[str]:
        """
        RP set address.
        """
        return pulumi.get(self, "rp_set_address")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

