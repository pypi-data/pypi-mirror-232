# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OspfAreaArgs', 'OspfArea']

@pulumi.input_type
class OspfAreaArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[str],
                 instance_name: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OspfArea resource.
        :param pulumi.Input[str] area_id: Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] vrf_name: VRF name.
        :param pulumi.Input[str] authentication_type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[int] cost: Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
               value: `1`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] type: Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        """
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[str]:
        """
        Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
        value: `1`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _OspfAreaState:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OspfArea resources.
        :param pulumi.Input[str] area_id: Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        :param pulumi.Input[str] authentication_type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[int] cost: Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
               value: `1`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] type: Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[str]]:
        """
        Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
        value: `1`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


class OspfArea(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the OSPF Area configuration.

        - API Documentation: [ospfArea](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Area/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfArea("example",
            area_id="0.0.0.10",
            authentication_type="none",
            cost=10,
            instance_name="OSPF1",
            type="stub",
            vrf_name="VRF1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfArea:OspfArea example "sys/ospf/inst-[OSPF1]/dom-[VRF1]/area-[0.0.0.10]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area_id: Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        :param pulumi.Input[str] authentication_type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[int] cost: Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
               value: `1`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] type: Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OspfAreaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the OSPF Area configuration.

        - API Documentation: [ospfArea](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Area/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfArea("example",
            area_id="0.0.0.10",
            authentication_type="none",
            cost=10,
            instance_name="OSPF1",
            type="stub",
            vrf_name="VRF1")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfArea:OspfArea example "sys/ospf/inst-[OSPF1]/dom-[VRF1]/area-[0.0.0.10]"
        ```

        :param str resource_name: The name of the resource.
        :param OspfAreaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfAreaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfAreaArgs.__new__(OspfAreaArgs)

            if area_id is None and not opts.urn:
                raise TypeError("Missing required property 'area_id'")
            __props__.__dict__["area_id"] = area_id
            __props__.__dict__["authentication_type"] = authentication_type
            __props__.__dict__["cost"] = cost
            __props__.__dict__["device"] = device
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["type"] = type
            if vrf_name is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_name'")
            __props__.__dict__["vrf_name"] = vrf_name
        super(OspfArea, __self__).__init__(
            'nxos:index/ospfArea:OspfArea',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area_id: Optional[pulumi.Input[str]] = None,
            authentication_type: Optional[pulumi.Input[str]] = None,
            cost: Optional[pulumi.Input[int]] = None,
            device: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vrf_name: Optional[pulumi.Input[str]] = None) -> 'OspfArea':
        """
        Get an existing OspfArea resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area_id: Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        :param pulumi.Input[str] authentication_type: Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        :param pulumi.Input[int] cost: Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
               value: `1`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] type: Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        :param pulumi.Input[str] vrf_name: VRF name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OspfAreaState.__new__(_OspfAreaState)

        __props__.__dict__["area_id"] = area_id
        __props__.__dict__["authentication_type"] = authentication_type
        __props__.__dict__["cost"] = cost
        __props__.__dict__["device"] = device
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["type"] = type
        __props__.__dict__["vrf_name"] = vrf_name
        return OspfArea(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Output[str]:
        """
        Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Output[str]:
        """
        Authentication type. - Choices: `none`, `simple`, `md5`, `unspecified` - Default value: `unspecified`
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter
    def cost(self) -> pulumi.Output[int]:
        """
        Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types. - Range: `0`-`16777215` - Default
        value: `1`
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Area type. - Choices: `regular`, `stub`, `nssa` - Default value: `regular`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "vrf_name")

