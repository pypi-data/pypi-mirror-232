# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NveInterfaceArgs', 'NveInterface']

@pulumi.input_type
class NveInterfaceArgs:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 advertise_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 host_reachability_protocol: Optional[pulumi.Input[str]] = None,
                 ingress_replication_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 multicast_group_l2: Optional[pulumi.Input[str]] = None,
                 multicast_group_l3: Optional[pulumi.Input[str]] = None,
                 multisite_source_interface: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[bool]] = None,
                 suppress_mac_route: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NveInterface resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[bool] advertise_virtual_mac: Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hold_down_time: Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        :param pulumi.Input[str] host_reachability_protocol: Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
               `Flood-and-learn`
        :param pulumi.Input[bool] ingress_replication_protocol_bgp: VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        :param pulumi.Input[str] multicast_group_l2: Base multicast group address for L2. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multicast_group_l3: Base multicast group address for L3. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_source_interface: Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
               value: `unspecified`
        :param pulumi.Input[str] source_interface: Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
               `unspecified`
        :param pulumi.Input[bool] suppress_arp: Suppress ARP. - Default value: `false`
        :param pulumi.Input[bool] suppress_mac_route: Suppress MAC Route. - Default value: `false`
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if advertise_virtual_mac is not None:
            pulumi.set(__self__, "advertise_virtual_mac", advertise_virtual_mac)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if host_reachability_protocol is not None:
            pulumi.set(__self__, "host_reachability_protocol", host_reachability_protocol)
        if ingress_replication_protocol_bgp is not None:
            pulumi.set(__self__, "ingress_replication_protocol_bgp", ingress_replication_protocol_bgp)
        if multicast_group_l2 is not None:
            pulumi.set(__self__, "multicast_group_l2", multicast_group_l2)
        if multicast_group_l3 is not None:
            pulumi.set(__self__, "multicast_group_l3", multicast_group_l3)
        if multisite_source_interface is not None:
            pulumi.set(__self__, "multisite_source_interface", multisite_source_interface)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if suppress_arp is not None:
            pulumi.set(__self__, "suppress_arp", suppress_arp)
        if suppress_mac_route is not None:
            pulumi.set(__self__, "suppress_mac_route", suppress_mac_route)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="advertiseVirtualMac")
    def advertise_virtual_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        """
        return pulumi.get(self, "advertise_virtual_mac")

    @advertise_virtual_mac.setter
    def advertise_virtual_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advertise_virtual_mac", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter(name="hostReachabilityProtocol")
    def host_reachability_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
        `Flood-and-learn`
        """
        return pulumi.get(self, "host_reachability_protocol")

    @host_reachability_protocol.setter
    def host_reachability_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_reachability_protocol", value)

    @property
    @pulumi.getter(name="ingressReplicationProtocolBgp")
    def ingress_replication_protocol_bgp(self) -> Optional[pulumi.Input[bool]]:
        """
        VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        """
        return pulumi.get(self, "ingress_replication_protocol_bgp")

    @ingress_replication_protocol_bgp.setter
    def ingress_replication_protocol_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_replication_protocol_bgp", value)

    @property
    @pulumi.getter(name="multicastGroupL2")
    def multicast_group_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Base multicast group address for L2. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l2")

    @multicast_group_l2.setter
    def multicast_group_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group_l2", value)

    @property
    @pulumi.getter(name="multicastGroupL3")
    def multicast_group_l3(self) -> Optional[pulumi.Input[str]]:
        """
        Base multicast group address for L3. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l3")

    @multicast_group_l3.setter
    def multicast_group_l3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group_l3", value)

    @property
    @pulumi.getter(name="multisiteSourceInterface")
    def multisite_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
        value: `unspecified`
        """
        return pulumi.get(self, "multisite_source_interface")

    @multisite_source_interface.setter
    def multisite_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multisite_source_interface", value)

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
        `unspecified`
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface", value)

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress ARP. - Default value: `false`
        """
        return pulumi.get(self, "suppress_arp")

    @suppress_arp.setter
    def suppress_arp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_arp", value)

    @property
    @pulumi.getter(name="suppressMacRoute")
    def suppress_mac_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress MAC Route. - Default value: `false`
        """
        return pulumi.get(self, "suppress_mac_route")

    @suppress_mac_route.setter
    def suppress_mac_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_mac_route", value)


@pulumi.input_type
class _NveInterfaceState:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 advertise_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 host_reachability_protocol: Optional[pulumi.Input[str]] = None,
                 ingress_replication_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 multicast_group_l2: Optional[pulumi.Input[str]] = None,
                 multicast_group_l3: Optional[pulumi.Input[str]] = None,
                 multisite_source_interface: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[bool]] = None,
                 suppress_mac_route: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering NveInterface resources.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[bool] advertise_virtual_mac: Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hold_down_time: Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        :param pulumi.Input[str] host_reachability_protocol: Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
               `Flood-and-learn`
        :param pulumi.Input[bool] ingress_replication_protocol_bgp: VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        :param pulumi.Input[str] multicast_group_l2: Base multicast group address for L2. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multicast_group_l3: Base multicast group address for L3. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_source_interface: Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
               value: `unspecified`
        :param pulumi.Input[str] source_interface: Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
               `unspecified`
        :param pulumi.Input[bool] suppress_arp: Suppress ARP. - Default value: `false`
        :param pulumi.Input[bool] suppress_mac_route: Suppress MAC Route. - Default value: `false`
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if advertise_virtual_mac is not None:
            pulumi.set(__self__, "advertise_virtual_mac", advertise_virtual_mac)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if host_reachability_protocol is not None:
            pulumi.set(__self__, "host_reachability_protocol", host_reachability_protocol)
        if ingress_replication_protocol_bgp is not None:
            pulumi.set(__self__, "ingress_replication_protocol_bgp", ingress_replication_protocol_bgp)
        if multicast_group_l2 is not None:
            pulumi.set(__self__, "multicast_group_l2", multicast_group_l2)
        if multicast_group_l3 is not None:
            pulumi.set(__self__, "multicast_group_l3", multicast_group_l3)
        if multisite_source_interface is not None:
            pulumi.set(__self__, "multisite_source_interface", multisite_source_interface)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if suppress_arp is not None:
            pulumi.set(__self__, "suppress_arp", suppress_arp)
        if suppress_mac_route is not None:
            pulumi.set(__self__, "suppress_mac_route", suppress_mac_route)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="advertiseVirtualMac")
    def advertise_virtual_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        """
        return pulumi.get(self, "advertise_virtual_mac")

    @advertise_virtual_mac.setter
    def advertise_virtual_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advertise_virtual_mac", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter(name="hostReachabilityProtocol")
    def host_reachability_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
        `Flood-and-learn`
        """
        return pulumi.get(self, "host_reachability_protocol")

    @host_reachability_protocol.setter
    def host_reachability_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_reachability_protocol", value)

    @property
    @pulumi.getter(name="ingressReplicationProtocolBgp")
    def ingress_replication_protocol_bgp(self) -> Optional[pulumi.Input[bool]]:
        """
        VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        """
        return pulumi.get(self, "ingress_replication_protocol_bgp")

    @ingress_replication_protocol_bgp.setter
    def ingress_replication_protocol_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_replication_protocol_bgp", value)

    @property
    @pulumi.getter(name="multicastGroupL2")
    def multicast_group_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Base multicast group address for L2. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l2")

    @multicast_group_l2.setter
    def multicast_group_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group_l2", value)

    @property
    @pulumi.getter(name="multicastGroupL3")
    def multicast_group_l3(self) -> Optional[pulumi.Input[str]]:
        """
        Base multicast group address for L3. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l3")

    @multicast_group_l3.setter
    def multicast_group_l3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group_l3", value)

    @property
    @pulumi.getter(name="multisiteSourceInterface")
    def multisite_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
        value: `unspecified`
        """
        return pulumi.get(self, "multisite_source_interface")

    @multisite_source_interface.setter
    def multisite_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multisite_source_interface", value)

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
        `unspecified`
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface", value)

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress ARP. - Default value: `false`
        """
        return pulumi.get(self, "suppress_arp")

    @suppress_arp.setter
    def suppress_arp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_arp", value)

    @property
    @pulumi.getter(name="suppressMacRoute")
    def suppress_mac_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress MAC Route. - Default value: `false`
        """
        return pulumi.get(self, "suppress_mac_route")

    @suppress_mac_route.setter
    def suppress_mac_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_mac_route", value)


class NveInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 advertise_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 host_reachability_protocol: Optional[pulumi.Input[str]] = None,
                 ingress_replication_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 multicast_group_l2: Optional[pulumi.Input[str]] = None,
                 multicast_group_l3: Optional[pulumi.Input[str]] = None,
                 multisite_source_interface: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[bool]] = None,
                 suppress_mac_route: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource can manage the NVE interface configuration.

        - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NveInterface("example",
            admin_state="enabled",
            advertise_virtual_mac=True,
            hold_down_time=60,
            host_reachability_protocol="bgp",
            ingress_replication_protocol_bgp=True,
            multicast_group_l2="0.0.0.0",
            multicast_group_l3="0.0.0.0",
            multisite_source_interface="unspecified",
            source_interface="lo0",
            suppress_arp=True,
            suppress_mac_route=False)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/nveInterface:NveInterface example "sys/eps/epId-[1]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[bool] advertise_virtual_mac: Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hold_down_time: Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        :param pulumi.Input[str] host_reachability_protocol: Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
               `Flood-and-learn`
        :param pulumi.Input[bool] ingress_replication_protocol_bgp: VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        :param pulumi.Input[str] multicast_group_l2: Base multicast group address for L2. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multicast_group_l3: Base multicast group address for L3. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_source_interface: Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
               value: `unspecified`
        :param pulumi.Input[str] source_interface: Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
               `unspecified`
        :param pulumi.Input[bool] suppress_arp: Suppress ARP. - Default value: `false`
        :param pulumi.Input[bool] suppress_mac_route: Suppress MAC Route. - Default value: `false`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NveInterfaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the NVE interface configuration.

        - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NveInterface("example",
            admin_state="enabled",
            advertise_virtual_mac=True,
            hold_down_time=60,
            host_reachability_protocol="bgp",
            ingress_replication_protocol_bgp=True,
            multicast_group_l2="0.0.0.0",
            multicast_group_l3="0.0.0.0",
            multisite_source_interface="unspecified",
            source_interface="lo0",
            suppress_arp=True,
            suppress_mac_route=False)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/nveInterface:NveInterface example "sys/eps/epId-[1]"
        ```

        :param str resource_name: The name of the resource.
        :param NveInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NveInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 advertise_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 host_reachability_protocol: Optional[pulumi.Input[str]] = None,
                 ingress_replication_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 multicast_group_l2: Optional[pulumi.Input[str]] = None,
                 multicast_group_l3: Optional[pulumi.Input[str]] = None,
                 multisite_source_interface: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[bool]] = None,
                 suppress_mac_route: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NveInterfaceArgs.__new__(NveInterfaceArgs)

            __props__.__dict__["admin_state"] = admin_state
            __props__.__dict__["advertise_virtual_mac"] = advertise_virtual_mac
            __props__.__dict__["device"] = device
            __props__.__dict__["hold_down_time"] = hold_down_time
            __props__.__dict__["host_reachability_protocol"] = host_reachability_protocol
            __props__.__dict__["ingress_replication_protocol_bgp"] = ingress_replication_protocol_bgp
            __props__.__dict__["multicast_group_l2"] = multicast_group_l2
            __props__.__dict__["multicast_group_l3"] = multicast_group_l3
            __props__.__dict__["multisite_source_interface"] = multisite_source_interface
            __props__.__dict__["source_interface"] = source_interface
            __props__.__dict__["suppress_arp"] = suppress_arp
            __props__.__dict__["suppress_mac_route"] = suppress_mac_route
        super(NveInterface, __self__).__init__(
            'nxos:index/nveInterface:NveInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state: Optional[pulumi.Input[str]] = None,
            advertise_virtual_mac: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            hold_down_time: Optional[pulumi.Input[int]] = None,
            host_reachability_protocol: Optional[pulumi.Input[str]] = None,
            ingress_replication_protocol_bgp: Optional[pulumi.Input[bool]] = None,
            multicast_group_l2: Optional[pulumi.Input[str]] = None,
            multicast_group_l3: Optional[pulumi.Input[str]] = None,
            multisite_source_interface: Optional[pulumi.Input[str]] = None,
            source_interface: Optional[pulumi.Input[str]] = None,
            suppress_arp: Optional[pulumi.Input[bool]] = None,
            suppress_mac_route: Optional[pulumi.Input[bool]] = None) -> 'NveInterface':
        """
        Get an existing NveInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        :param pulumi.Input[bool] advertise_virtual_mac: Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] hold_down_time: Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        :param pulumi.Input[str] host_reachability_protocol: Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
               `Flood-and-learn`
        :param pulumi.Input[bool] ingress_replication_protocol_bgp: VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        :param pulumi.Input[str] multicast_group_l2: Base multicast group address for L2. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multicast_group_l3: Base multicast group address for L3. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_source_interface: Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
               value: `unspecified`
        :param pulumi.Input[str] source_interface: Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
               `unspecified`
        :param pulumi.Input[bool] suppress_arp: Suppress ARP. - Default value: `false`
        :param pulumi.Input[bool] suppress_mac_route: Suppress MAC Route. - Default value: `false`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NveInterfaceState.__new__(_NveInterfaceState)

        __props__.__dict__["admin_state"] = admin_state
        __props__.__dict__["advertise_virtual_mac"] = advertise_virtual_mac
        __props__.__dict__["device"] = device
        __props__.__dict__["hold_down_time"] = hold_down_time
        __props__.__dict__["host_reachability_protocol"] = host_reachability_protocol
        __props__.__dict__["ingress_replication_protocol_bgp"] = ingress_replication_protocol_bgp
        __props__.__dict__["multicast_group_l2"] = multicast_group_l2
        __props__.__dict__["multicast_group_l3"] = multicast_group_l3
        __props__.__dict__["multisite_source_interface"] = multisite_source_interface
        __props__.__dict__["source_interface"] = source_interface
        __props__.__dict__["suppress_arp"] = suppress_arp
        __props__.__dict__["suppress_mac_route"] = suppress_mac_route
        return NveInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> pulumi.Output[str]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `disabled`
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="advertiseVirtualMac")
    def advertise_virtual_mac(self) -> pulumi.Output[bool]:
        """
        Enable or disable Virtual MAC Advertisement in VPC mode. - Default value: `false`
        """
        return pulumi.get(self, "advertise_virtual_mac")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> pulumi.Output[int]:
        """
        Hold Down Time. - Range: `1`-`1500` - Default value: `180`
        """
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter(name="hostReachabilityProtocol")
    def host_reachability_protocol(self) -> pulumi.Output[str]:
        """
        Host Reachability Protocol. - Choices: `Flood-and-learn`, `bgp`, `controller`, `openflow`, `openflowIR` - Default value:
        `Flood-and-learn`
        """
        return pulumi.get(self, "host_reachability_protocol")

    @property
    @pulumi.getter(name="ingressReplicationProtocolBgp")
    def ingress_replication_protocol_bgp(self) -> pulumi.Output[bool]:
        """
        VxLAN Ingress Replication Protocol BGP. - Default value: `false`
        """
        return pulumi.get(self, "ingress_replication_protocol_bgp")

    @property
    @pulumi.getter(name="multicastGroupL2")
    def multicast_group_l2(self) -> pulumi.Output[str]:
        """
        Base multicast group address for L2. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l2")

    @property
    @pulumi.getter(name="multicastGroupL3")
    def multicast_group_l3(self) -> pulumi.Output[str]:
        """
        Base multicast group address for L3. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group_l3")

    @property
    @pulumi.getter(name="multisiteSourceInterface")
    def multisite_source_interface(self) -> pulumi.Output[str]:
        """
        Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`. - Default
        value: `unspecified`
        """
        return pulumi.get(self, "multisite_source_interface")

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> pulumi.Output[str]:
        """
        Source Interface associated with the NVE. Must match first field in the output of `show int brief`. - Default value:
        `unspecified`
        """
        return pulumi.get(self, "source_interface")

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> pulumi.Output[bool]:
        """
        Suppress ARP. - Default value: `false`
        """
        return pulumi.get(self, "suppress_arp")

    @property
    @pulumi.getter(name="suppressMacRoute")
    def suppress_mac_route(self) -> pulumi.Output[bool]:
        """
        Suppress MAC Route. - Default value: `false`
        """
        return pulumi.get(self, "suppress_mac_route")

