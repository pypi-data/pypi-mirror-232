# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOspfVrfResult',
    'AwaitableGetOspfVrfResult',
    'get_ospf_vrf',
    'get_ospf_vrf_output',
]

@pulumi.output_type
class GetOspfVrfResult:
    """
    A collection of values returned by getOspfVrf.
    """
    def __init__(__self__, admin_state=None, bandwidth_reference=None, banwidth_reference_unit=None, device=None, distance=None, id=None, instance_name=None, name=None, router_id=None):
        if admin_state and not isinstance(admin_state, str):
            raise TypeError("Expected argument 'admin_state' to be a str")
        pulumi.set(__self__, "admin_state", admin_state)
        if bandwidth_reference and not isinstance(bandwidth_reference, int):
            raise TypeError("Expected argument 'bandwidth_reference' to be a int")
        pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit and not isinstance(banwidth_reference_unit, str):
            raise TypeError("Expected argument 'banwidth_reference_unit' to be a str")
        pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if distance and not isinstance(distance, int):
            raise TypeError("Expected argument 'distance' to be a int")
        pulumi.set(__self__, "distance", distance)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if router_id and not isinstance(router_id, str):
            raise TypeError("Expected argument 'router_id' to be a str")
        pulumi.set(__self__, "router_id", router_id)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> str:
        """
        Administrative state.
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> int:
        """
        Bandwidth reference value.
        """
        return pulumi.get(self, "bandwidth_reference")

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> str:
        """
        Bandwidth reference unit.
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def distance(self) -> int:
        """
        Administrative distance preference.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> str:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")


class AwaitableGetOspfVrfResult(GetOspfVrfResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOspfVrfResult(
            admin_state=self.admin_state,
            bandwidth_reference=self.bandwidth_reference,
            banwidth_reference_unit=self.banwidth_reference_unit,
            device=self.device,
            distance=self.distance,
            id=self.id,
            instance_name=self.instance_name,
            name=self.name,
            router_id=self.router_id)


def get_ospf_vrf(device: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOspfVrfResult:
    """
    This data source can read the OSPF VRF configuration.

    - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ospf_vrf(instance_name="OSPF1",
        name="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: OSPF instance name.
    :param str name: VRF name.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['instanceName'] = instance_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getOspfVrf:getOspfVrf', __args__, opts=opts, typ=GetOspfVrfResult).value

    return AwaitableGetOspfVrfResult(
        admin_state=pulumi.get(__ret__, 'admin_state'),
        bandwidth_reference=pulumi.get(__ret__, 'bandwidth_reference'),
        banwidth_reference_unit=pulumi.get(__ret__, 'banwidth_reference_unit'),
        device=pulumi.get(__ret__, 'device'),
        distance=pulumi.get(__ret__, 'distance'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        name=pulumi.get(__ret__, 'name'),
        router_id=pulumi.get(__ret__, 'router_id'))


@_utilities.lift_output_func(get_ospf_vrf)
def get_ospf_vrf_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                        instance_name: Optional[pulumi.Input[str]] = None,
                        name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOspfVrfResult]:
    """
    This data source can read the OSPF VRF configuration.

    - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ospf_vrf(instance_name="OSPF1",
        name="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str instance_name: OSPF instance name.
    :param str name: VRF name.
    """
    ...
