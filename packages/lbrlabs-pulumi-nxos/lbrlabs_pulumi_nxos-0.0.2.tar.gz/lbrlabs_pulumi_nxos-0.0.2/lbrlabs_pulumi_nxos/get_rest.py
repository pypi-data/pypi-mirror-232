# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRestResult',
    'AwaitableGetRestResult',
    'get_rest',
    'get_rest_output',
]

@pulumi.output_type
class GetRestResult:
    """
    A collection of values returned by getRest.
    """
    def __init__(__self__, class_name=None, content=None, device=None, dn=None, id=None):
        if class_name and not isinstance(class_name, str):
            raise TypeError("Expected argument 'class_name' to be a str")
        pulumi.set(__self__, "class_name", class_name)
        if content and not isinstance(content, dict):
            raise TypeError("Expected argument 'content' to be a dict")
        pulumi.set(__self__, "content", content)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if dn and not isinstance(dn, str):
            raise TypeError("Expected argument 'dn' to be a str")
        pulumi.set(__self__, "dn", dn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> str:
        """
        Class name of object being retrieved.
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter
    def content(self) -> Mapping[str, str]:
        """
        Map of key-value pairs which represents the attributes of object being retrieved.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def dn(self) -> str:
        """
        Distinguished name of object to be retrieved, e.g. sys/intf/phys-[eth1/1].
        """
        return pulumi.get(self, "dn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")


class AwaitableGetRestResult(GetRestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRestResult(
            class_name=self.class_name,
            content=self.content,
            device=self.device,
            dn=self.dn,
            id=self.id)


def get_rest(device: Optional[str] = None,
             dn: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRestResult:
    """
    This data source can read one NX-OS DME object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    l1_phys_if = nxos.get_rest(dn="sys/intf/phys-[eth1/1]")
    ```


    :param str device: A device name from the provider configuration.
    :param str dn: Distinguished name of object to be retrieved, e.g. sys/intf/phys-[eth1/1].
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['dn'] = dn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getRest:getRest', __args__, opts=opts, typ=GetRestResult).value

    return AwaitableGetRestResult(
        class_name=pulumi.get(__ret__, 'class_name'),
        content=pulumi.get(__ret__, 'content'),
        device=pulumi.get(__ret__, 'device'),
        dn=pulumi.get(__ret__, 'dn'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_rest)
def get_rest_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                    dn: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRestResult]:
    """
    This data source can read one NX-OS DME object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    l1_phys_if = nxos.get_rest(dn="sys/intf/phys-[eth1/1]")
    ```


    :param str device: A device name from the provider configuration.
    :param str dn: Distinguished name of object to be retrieved, e.g. sys/intf/phys-[eth1/1].
    """
    ...
