# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIpv4AccessListPolicyIngressInterfaceResult',
    'AwaitableGetIpv4AccessListPolicyIngressInterfaceResult',
    'get_ipv4_access_list_policy_ingress_interface',
    'get_ipv4_access_list_policy_ingress_interface_output',
]

@pulumi.output_type
class GetIpv4AccessListPolicyIngressInterfaceResult:
    """
    A collection of values returned by getIpv4AccessListPolicyIngressInterface.
    """
    def __init__(__self__, access_list_name=None, device=None, id=None, interface_id=None):
        if access_list_name and not isinstance(access_list_name, str):
            raise TypeError("Expected argument 'access_list_name' to be a str")
        pulumi.set(__self__, "access_list_name", access_list_name)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)

    @property
    @pulumi.getter(name="accessListName")
    def access_list_name(self) -> str:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list_name")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The distinguished name of the object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        """
        return pulumi.get(self, "interface_id")


class AwaitableGetIpv4AccessListPolicyIngressInterfaceResult(GetIpv4AccessListPolicyIngressInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpv4AccessListPolicyIngressInterfaceResult(
            access_list_name=self.access_list_name,
            device=self.device,
            id=self.id,
            interface_id=self.interface_id)


def get_ipv4_access_list_policy_ingress_interface(device: Optional[str] = None,
                                                  interface_id: Optional[str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpv4AccessListPolicyIngressInterfaceResult:
    """
    This data source can read an IPv4 Access List Policy Ingress Interface.

    - API Documentation: [aclIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/acl:If/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_access_list_policy_ingress_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:index/getIpv4AccessListPolicyIngressInterface:getIpv4AccessListPolicyIngressInterface', __args__, opts=opts, typ=GetIpv4AccessListPolicyIngressInterfaceResult).value

    return AwaitableGetIpv4AccessListPolicyIngressInterfaceResult(
        access_list_name=pulumi.get(__ret__, 'access_list_name'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        interface_id=pulumi.get(__ret__, 'interface_id'))


@_utilities.lift_output_func(get_ipv4_access_list_policy_ingress_interface)
def get_ipv4_access_list_policy_ingress_interface_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                                         interface_id: Optional[pulumi.Input[str]] = None,
                                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpv4AccessListPolicyIngressInterfaceResult]:
    """
    This data source can read an IPv4 Access List Policy Ingress Interface.

    - API Documentation: [aclIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/acl:If/)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nxos as nxos

    example = nxos.get_ipv4_access_list_policy_ingress_interface(interface_id="eth1/10")
    ```


    :param str device: A device name from the provider configuration.
    :param str interface_id: Must match first field in the output of `show intf brief`. Example: `eth1/1`.
    """
    ...
