# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Ipv4StaticRouteNextHopArgs',
    'ProviderDeviceArgs',
    'RestChildrenArgs',
]

@pulumi.input_type
class Ipv4StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 interface_id: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[int]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class ProviderDeviceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class RestChildrenArgs:
    def __init__(__self__, *,
                 class_name: pulumi.Input[str],
                 rn: pulumi.Input[str],
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] class_name: Class name of the child object.
        :param pulumi.Input[str] rn: The relative name of the child object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs which represents the attributes of the child object.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "rn", rn)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Input[str]:
        """
        Class name of the child object.
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter
    def rn(self) -> pulumi.Input[str]:
        """
        The relative name of the child object.
        """
        return pulumi.get(self, "rn")

    @rn.setter
    def rn(self, value: pulumi.Input[str]):
        pulumi.set(self, "rn", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs which represents the attributes of the child object.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "content", value)


