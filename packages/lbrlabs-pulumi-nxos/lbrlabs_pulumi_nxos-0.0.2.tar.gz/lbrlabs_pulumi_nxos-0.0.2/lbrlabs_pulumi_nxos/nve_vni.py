# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NveVniArgs', 'NveVni']

@pulumi.input_type
class NveVniArgs:
    def __init__(__self__, *,
                 vni: pulumi.Input[int],
                 associate_vrf: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 multicast_group: Optional[pulumi.Input[str]] = None,
                 multisite_ingress_replication: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NveVni resource.
        :param pulumi.Input[int] vni: Virtual Network ID. - Range: `1`-`16777214`
        :param pulumi.Input[bool] associate_vrf: Configures VNI as L3 VNI. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] multicast_group: Configures multicast group address for VNI. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_ingress_replication: Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
               value: `disable`
        :param pulumi.Input[str] suppress_arp: Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        """
        pulumi.set(__self__, "vni", vni)
        if associate_vrf is not None:
            pulumi.set(__self__, "associate_vrf", associate_vrf)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if multicast_group is not None:
            pulumi.set(__self__, "multicast_group", multicast_group)
        if multisite_ingress_replication is not None:
            pulumi.set(__self__, "multisite_ingress_replication", multisite_ingress_replication)
        if suppress_arp is not None:
            pulumi.set(__self__, "suppress_arp", suppress_arp)

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Input[int]:
        """
        Virtual Network ID. - Range: `1`-`16777214`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: pulumi.Input[int]):
        pulumi.set(self, "vni", value)

    @property
    @pulumi.getter(name="associateVrf")
    def associate_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures VNI as L3 VNI. - Default value: `false`
        """
        return pulumi.get(self, "associate_vrf")

    @associate_vrf.setter
    def associate_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_vrf", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="multicastGroup")
    def multicast_group(self) -> Optional[pulumi.Input[str]]:
        """
        Configures multicast group address for VNI. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group")

    @multicast_group.setter
    def multicast_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group", value)

    @property
    @pulumi.getter(name="multisiteIngressReplication")
    def multisite_ingress_replication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
        value: `disable`
        """
        return pulumi.get(self, "multisite_ingress_replication")

    @multisite_ingress_replication.setter
    def multisite_ingress_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multisite_ingress_replication", value)

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        """
        return pulumi.get(self, "suppress_arp")

    @suppress_arp.setter
    def suppress_arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suppress_arp", value)


@pulumi.input_type
class _NveVniState:
    def __init__(__self__, *,
                 associate_vrf: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 multicast_group: Optional[pulumi.Input[str]] = None,
                 multisite_ingress_replication: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NveVni resources.
        :param pulumi.Input[bool] associate_vrf: Configures VNI as L3 VNI. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] multicast_group: Configures multicast group address for VNI. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_ingress_replication: Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
               value: `disable`
        :param pulumi.Input[str] suppress_arp: Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        :param pulumi.Input[int] vni: Virtual Network ID. - Range: `1`-`16777214`
        """
        if associate_vrf is not None:
            pulumi.set(__self__, "associate_vrf", associate_vrf)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if multicast_group is not None:
            pulumi.set(__self__, "multicast_group", multicast_group)
        if multisite_ingress_replication is not None:
            pulumi.set(__self__, "multisite_ingress_replication", multisite_ingress_replication)
        if suppress_arp is not None:
            pulumi.set(__self__, "suppress_arp", suppress_arp)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="associateVrf")
    def associate_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures VNI as L3 VNI. - Default value: `false`
        """
        return pulumi.get(self, "associate_vrf")

    @associate_vrf.setter
    def associate_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_vrf", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="multicastGroup")
    def multicast_group(self) -> Optional[pulumi.Input[str]]:
        """
        Configures multicast group address for VNI. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group")

    @multicast_group.setter
    def multicast_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_group", value)

    @property
    @pulumi.getter(name="multisiteIngressReplication")
    def multisite_ingress_replication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
        value: `disable`
        """
        return pulumi.get(self, "multisite_ingress_replication")

    @multisite_ingress_replication.setter
    def multisite_ingress_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multisite_ingress_replication", value)

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        """
        return pulumi.get(self, "suppress_arp")

    @suppress_arp.setter
    def suppress_arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suppress_arp", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Network ID. - Range: `1`-`16777214`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)


class NveVni(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_vrf: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 multicast_group: Optional[pulumi.Input[str]] = None,
                 multisite_ingress_replication: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the configuration of Virtual Network ID (VNI).

        - API Documentation: [nvoNw](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Nw/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NveVni("example",
            associate_vrf=False,
            multicast_group="239.1.1.1",
            multisite_ingress_replication="disable",
            suppress_arp="off",
            vni=103100)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/nveVni:NveVni example "sys/eps/epId-[1]/nws/vni-[103100]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] associate_vrf: Configures VNI as L3 VNI. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] multicast_group: Configures multicast group address for VNI. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_ingress_replication: Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
               value: `disable`
        :param pulumi.Input[str] suppress_arp: Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        :param pulumi.Input[int] vni: Virtual Network ID. - Range: `1`-`16777214`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NveVniArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the configuration of Virtual Network ID (VNI).

        - API Documentation: [nvoNw](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Nw/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.NveVni("example",
            associate_vrf=False,
            multicast_group="239.1.1.1",
            multisite_ingress_replication="disable",
            suppress_arp="off",
            vni=103100)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/nveVni:NveVni example "sys/eps/epId-[1]/nws/vni-[103100]"
        ```

        :param str resource_name: The name of the resource.
        :param NveVniArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NveVniArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_vrf: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 multicast_group: Optional[pulumi.Input[str]] = None,
                 multisite_ingress_replication: Optional[pulumi.Input[str]] = None,
                 suppress_arp: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NveVniArgs.__new__(NveVniArgs)

            __props__.__dict__["associate_vrf"] = associate_vrf
            __props__.__dict__["device"] = device
            __props__.__dict__["multicast_group"] = multicast_group
            __props__.__dict__["multisite_ingress_replication"] = multisite_ingress_replication
            __props__.__dict__["suppress_arp"] = suppress_arp
            if vni is None and not opts.urn:
                raise TypeError("Missing required property 'vni'")
            __props__.__dict__["vni"] = vni
        super(NveVni, __self__).__init__(
            'nxos:index/nveVni:NveVni',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associate_vrf: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            multicast_group: Optional[pulumi.Input[str]] = None,
            multisite_ingress_replication: Optional[pulumi.Input[str]] = None,
            suppress_arp: Optional[pulumi.Input[str]] = None,
            vni: Optional[pulumi.Input[int]] = None) -> 'NveVni':
        """
        Get an existing NveVni resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] associate_vrf: Configures VNI as L3 VNI. - Default value: `false`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] multicast_group: Configures multicast group address for VNI. - Default value: `0.0.0.0`
        :param pulumi.Input[str] multisite_ingress_replication: Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
               value: `disable`
        :param pulumi.Input[str] suppress_arp: Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        :param pulumi.Input[int] vni: Virtual Network ID. - Range: `1`-`16777214`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NveVniState.__new__(_NveVniState)

        __props__.__dict__["associate_vrf"] = associate_vrf
        __props__.__dict__["device"] = device
        __props__.__dict__["multicast_group"] = multicast_group
        __props__.__dict__["multisite_ingress_replication"] = multisite_ingress_replication
        __props__.__dict__["suppress_arp"] = suppress_arp
        __props__.__dict__["vni"] = vni
        return NveVni(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="associateVrf")
    def associate_vrf(self) -> pulumi.Output[bool]:
        """
        Configures VNI as L3 VNI. - Default value: `false`
        """
        return pulumi.get(self, "associate_vrf")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="multicastGroup")
    def multicast_group(self) -> pulumi.Output[str]:
        """
        Configures multicast group address for VNI. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "multicast_group")

    @property
    @pulumi.getter(name="multisiteIngressReplication")
    def multisite_ingress_replication(self) -> pulumi.Output[str]:
        """
        Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
        value: `disable`
        """
        return pulumi.get(self, "multisite_ingress_replication")

    @property
    @pulumi.getter(name="suppressArp")
    def suppress_arp(self) -> pulumi.Output[str]:
        """
        Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
        """
        return pulumi.get(self, "suppress_arp")

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Output[int]:
        """
        Virtual Network ID. - Range: `1`-`16777214`
        """
        return pulumi.get(self, "vni")

