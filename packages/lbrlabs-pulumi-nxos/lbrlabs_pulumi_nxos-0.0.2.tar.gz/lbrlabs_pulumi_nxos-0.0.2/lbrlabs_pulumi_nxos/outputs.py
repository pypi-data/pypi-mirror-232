# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Ipv4StaticRouteNextHop',
    'RestChildren',
    'GetIpv4StaticRouteNextHopResult',
]

@pulumi.output_type
class Ipv4StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceId":
            suggest = "interface_id"
        elif key == "vrfName":
            suggest = "vrf_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 interface_id: str,
                 vrf_name: str,
                 description: Optional[str] = None,
                 object: Optional[int] = None,
                 preference: Optional[int] = None,
                 tag: Optional[int] = None):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "vrf_name", vrf_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        return pulumi.get(self, "vrf_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def object(self) -> Optional[int]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class RestChildren(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "className":
            suggest = "class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestChildren. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestChildren.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestChildren.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_name: str,
                 rn: str,
                 content: Optional[Mapping[str, str]] = None):
        """
        :param str class_name: Class name of the child object.
        :param str rn: The relative name of the child object.
        :param Mapping[str, str] content: Map of key-value pairs which represents the attributes of the child object.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "rn", rn)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> str:
        """
        Class name of the child object.
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter
    def rn(self) -> str:
        """
        The relative name of the child object.
        """
        return pulumi.get(self, "rn")

    @property
    @pulumi.getter
    def content(self) -> Optional[Mapping[str, str]]:
        """
        Map of key-value pairs which represents the attributes of the child object.
        """
        return pulumi.get(self, "content")


@pulumi.output_type
class GetIpv4StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: str,
                 description: str,
                 interface_id: str,
                 object: int,
                 preference: int,
                 tag: int,
                 vrf_name: str):
        """
        :param str address: Nexthop address.
        :param str description: Description.
        :param str interface_id: Must match first field in the output of `show intf brief` or `unspecified`. Example: `eth1/1` or `vlan100`.
        :param int object: Object to be tracked.
        :param int preference: Route preference.
        :param int tag: Tag value.
        :param str vrf_name: Nexthop VRF.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Nexthop address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        Must match first field in the output of `show intf brief` or `unspecified`. Example: `eth1/1` or `vlan100`.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter
    def object(self) -> int:
        """
        Object to be tracked.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def preference(self) -> int:
        """
        Route preference.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def tag(self) -> int:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        """
        Nexthop VRF.
        """
        return pulumi.get(self, "vrf_name")


