# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OspfVrfArgs', 'OspfVrf']

@pulumi.input_type
class OspfVrfArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OspfVrf resource.
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[int] bandwidth_reference: Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] distance: Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] router_id: Router ID. - Default value: `0.0.0.0`
        """
        pulumi.set(__self__, "instance_name", instance_name)
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if bandwidth_reference is not None:
            pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit is not None:
            pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @bandwidth_reference.setter
    def bandwidth_reference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_reference", value)

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @banwidth_reference_unit.setter
    def banwidth_reference_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banwidth_reference_unit", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        Router ID. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)


@pulumi.input_type
class _OspfVrfState:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OspfVrf resources.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[int] bandwidth_reference: Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] distance: Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] router_id: Router ID. - Default value: `0.0.0.0`
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if bandwidth_reference is not None:
            pulumi.set(__self__, "bandwidth_reference", bandwidth_reference)
        if banwidth_reference_unit is not None:
            pulumi.set(__self__, "banwidth_reference_unit", banwidth_reference_unit)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[str]]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_state", value)

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @bandwidth_reference.setter
    def bandwidth_reference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_reference", value)

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @banwidth_reference_unit.setter
    def banwidth_reference_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banwidth_reference_unit", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        Router ID. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)


class OspfVrf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the OSPF VRF configuration.

        - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfVrf("example",
            admin_state="enabled",
            bandwidth_reference=400000,
            banwidth_reference_unit="mbps",
            distance=110,
            instance_name="OSPF1",
            router_id="34.56.78.90")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfVrf:OspfVrf example "sys/ospf/inst-[OSPF1]/dom-[VRF1]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[int] bandwidth_reference: Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] distance: Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] router_id: Router ID. - Default value: `0.0.0.0`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OspfVrfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the OSPF VRF configuration.

        - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.OspfVrf("example",
            admin_state="enabled",
            bandwidth_reference=400000,
            banwidth_reference_unit="mbps",
            distance=110,
            instance_name="OSPF1",
            router_id="34.56.78.90")
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/ospfVrf:OspfVrf example "sys/ospf/inst-[OSPF1]/dom-[VRF1]"
        ```

        :param str resource_name: The name of the resource.
        :param OspfVrfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfVrfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state: Optional[pulumi.Input[str]] = None,
                 bandwidth_reference: Optional[pulumi.Input[int]] = None,
                 banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfVrfArgs.__new__(OspfVrfArgs)

            __props__.__dict__["admin_state"] = admin_state
            __props__.__dict__["bandwidth_reference"] = bandwidth_reference
            __props__.__dict__["banwidth_reference_unit"] = banwidth_reference_unit
            __props__.__dict__["device"] = device
            __props__.__dict__["distance"] = distance
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["name"] = name
            __props__.__dict__["router_id"] = router_id
        super(OspfVrf, __self__).__init__(
            'nxos:index/ospfVrf:OspfVrf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state: Optional[pulumi.Input[str]] = None,
            bandwidth_reference: Optional[pulumi.Input[int]] = None,
            banwidth_reference_unit: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            router_id: Optional[pulumi.Input[str]] = None) -> 'OspfVrf':
        """
        Get an existing OspfVrf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_state: Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        :param pulumi.Input[int] bandwidth_reference: Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        :param pulumi.Input[str] banwidth_reference_unit: Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] distance: Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        :param pulumi.Input[str] instance_name: OSPF instance name.
        :param pulumi.Input[str] name: VRF name.
        :param pulumi.Input[str] router_id: Router ID. - Default value: `0.0.0.0`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OspfVrfState.__new__(_OspfVrfState)

        __props__.__dict__["admin_state"] = admin_state
        __props__.__dict__["bandwidth_reference"] = bandwidth_reference
        __props__.__dict__["banwidth_reference_unit"] = banwidth_reference_unit
        __props__.__dict__["device"] = device
        __props__.__dict__["distance"] = distance
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["name"] = name
        __props__.__dict__["router_id"] = router_id
        return OspfVrf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> pulumi.Output[str]:
        """
        Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
        """
        return pulumi.get(self, "admin_state")

    @property
    @pulumi.getter(name="bandwidthReference")
    def bandwidth_reference(self) -> pulumi.Output[int]:
        """
        Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
        """
        return pulumi.get(self, "bandwidth_reference")

    @property
    @pulumi.getter(name="banwidthReferenceUnit")
    def banwidth_reference_unit(self) -> pulumi.Output[str]:
        """
        Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
        """
        return pulumi.get(self, "banwidth_reference_unit")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Administrative distance preference. - Range: `1`-`255` - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        OSPF instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        VRF name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        """
        Router ID. - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "router_id")

