# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DefaultQosPolicyMapMatchClassMapPoliceArgs', 'DefaultQosPolicyMapMatchClassMapPolice']

@pulumi.input_type
class DefaultQosPolicyMapMatchClassMapPoliceArgs:
    def __init__(__self__, *,
                 cir_rate: pulumi.Input[int],
                 class_map_name: pulumi.Input[str],
                 policy_map_name: pulumi.Input[str],
                 bc_rate: Optional[pulumi.Input[int]] = None,
                 bc_unit: Optional[pulumi.Input[str]] = None,
                 be_rate: Optional[pulumi.Input[int]] = None,
                 be_unit: Optional[pulumi.Input[str]] = None,
                 cir_unit: Optional[pulumi.Input[str]] = None,
                 conform_action: Optional[pulumi.Input[str]] = None,
                 conform_set_cos: Optional[pulumi.Input[int]] = None,
                 conform_set_dscp: Optional[pulumi.Input[int]] = None,
                 conform_set_precedence: Optional[pulumi.Input[str]] = None,
                 conform_set_qos_group: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 exceed_action: Optional[pulumi.Input[str]] = None,
                 exceed_set_cos: Optional[pulumi.Input[int]] = None,
                 exceed_set_dscp: Optional[pulumi.Input[int]] = None,
                 exceed_set_precedence: Optional[pulumi.Input[str]] = None,
                 exceed_set_qos_group: Optional[pulumi.Input[int]] = None,
                 pir_rate: Optional[pulumi.Input[int]] = None,
                 pir_unit: Optional[pulumi.Input[str]] = None,
                 violate_action: Optional[pulumi.Input[str]] = None,
                 violate_set_cos: Optional[pulumi.Input[int]] = None,
                 violate_set_dscp: Optional[pulumi.Input[int]] = None,
                 violate_set_precedence: Optional[pulumi.Input[str]] = None,
                 violate_set_qos_group: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DefaultQosPolicyMapMatchClassMapPolice resource.
        :param pulumi.Input[int] cir_rate: CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[int] bc_rate: CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        :param pulumi.Input[str] bc_unit: CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        :param pulumi.Input[int] be_rate: PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        :param pulumi.Input[str] be_unit: PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
               `unspecified`
        :param pulumi.Input[str] cir_unit: CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        :param pulumi.Input[str] conform_action: Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        :param pulumi.Input[int] conform_set_cos: Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] conform_set_dscp: Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] conform_set_precedence: Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] conform_set_qos_group: Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] exceed_action: Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        :param pulumi.Input[int] exceed_set_cos: Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] exceed_set_dscp: Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] exceed_set_precedence: Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] exceed_set_qos_group: Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] pir_rate: PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] pir_unit: PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        :param pulumi.Input[str] violate_action: Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        :param pulumi.Input[int] violate_set_cos: Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] violate_set_dscp: Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] violate_set_precedence: Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] violate_set_qos_group: Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        pulumi.set(__self__, "cir_rate", cir_rate)
        pulumi.set(__self__, "class_map_name", class_map_name)
        pulumi.set(__self__, "policy_map_name", policy_map_name)
        if bc_rate is not None:
            pulumi.set(__self__, "bc_rate", bc_rate)
        if bc_unit is not None:
            pulumi.set(__self__, "bc_unit", bc_unit)
        if be_rate is not None:
            pulumi.set(__self__, "be_rate", be_rate)
        if be_unit is not None:
            pulumi.set(__self__, "be_unit", be_unit)
        if cir_unit is not None:
            pulumi.set(__self__, "cir_unit", cir_unit)
        if conform_action is not None:
            pulumi.set(__self__, "conform_action", conform_action)
        if conform_set_cos is not None:
            pulumi.set(__self__, "conform_set_cos", conform_set_cos)
        if conform_set_dscp is not None:
            pulumi.set(__self__, "conform_set_dscp", conform_set_dscp)
        if conform_set_precedence is not None:
            pulumi.set(__self__, "conform_set_precedence", conform_set_precedence)
        if conform_set_qos_group is not None:
            pulumi.set(__self__, "conform_set_qos_group", conform_set_qos_group)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)
        if exceed_set_cos is not None:
            pulumi.set(__self__, "exceed_set_cos", exceed_set_cos)
        if exceed_set_dscp is not None:
            pulumi.set(__self__, "exceed_set_dscp", exceed_set_dscp)
        if exceed_set_precedence is not None:
            pulumi.set(__self__, "exceed_set_precedence", exceed_set_precedence)
        if exceed_set_qos_group is not None:
            pulumi.set(__self__, "exceed_set_qos_group", exceed_set_qos_group)
        if pir_rate is not None:
            pulumi.set(__self__, "pir_rate", pir_rate)
        if pir_unit is not None:
            pulumi.set(__self__, "pir_unit", pir_unit)
        if violate_action is not None:
            pulumi.set(__self__, "violate_action", violate_action)
        if violate_set_cos is not None:
            pulumi.set(__self__, "violate_set_cos", violate_set_cos)
        if violate_set_dscp is not None:
            pulumi.set(__self__, "violate_set_dscp", violate_set_dscp)
        if violate_set_precedence is not None:
            pulumi.set(__self__, "violate_set_precedence", violate_set_precedence)
        if violate_set_qos_group is not None:
            pulumi.set(__self__, "violate_set_qos_group", violate_set_qos_group)

    @property
    @pulumi.getter(name="cirRate")
    def cir_rate(self) -> pulumi.Input[int]:
        """
        CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "cir_rate")

    @cir_rate.setter
    def cir_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "cir_rate", value)

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> pulumi.Input[str]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @class_map_name.setter
    def class_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_map_name", value)

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> pulumi.Input[str]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @policy_map_name.setter
    def policy_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_map_name", value)

    @property
    @pulumi.getter(name="bcRate")
    def bc_rate(self) -> Optional[pulumi.Input[int]]:
        """
        CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        """
        return pulumi.get(self, "bc_rate")

    @bc_rate.setter
    def bc_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bc_rate", value)

    @property
    @pulumi.getter(name="bcUnit")
    def bc_unit(self) -> Optional[pulumi.Input[str]]:
        """
        CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        """
        return pulumi.get(self, "bc_unit")

    @bc_unit.setter
    def bc_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bc_unit", value)

    @property
    @pulumi.getter(name="beRate")
    def be_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        """
        return pulumi.get(self, "be_rate")

    @be_rate.setter
    def be_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "be_rate", value)

    @property
    @pulumi.getter(name="beUnit")
    def be_unit(self) -> Optional[pulumi.Input[str]]:
        """
        PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
        `unspecified`
        """
        return pulumi.get(self, "be_unit")

    @be_unit.setter
    def be_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "be_unit", value)

    @property
    @pulumi.getter(name="cirUnit")
    def cir_unit(self) -> Optional[pulumi.Input[str]]:
        """
        CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        """
        return pulumi.get(self, "cir_unit")

    @cir_unit.setter
    def cir_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cir_unit", value)

    @property
    @pulumi.getter(name="conformAction")
    def conform_action(self) -> Optional[pulumi.Input[str]]:
        """
        Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        """
        return pulumi.get(self, "conform_action")

    @conform_action.setter
    def conform_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conform_action", value)

    @property
    @pulumi.getter(name="conformSetCos")
    def conform_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_cos")

    @conform_set_cos.setter
    def conform_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_cos", value)

    @property
    @pulumi.getter(name="conformSetDscp")
    def conform_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_dscp")

    @conform_set_dscp.setter
    def conform_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_dscp", value)

    @property
    @pulumi.getter(name="conformSetPrecedence")
    def conform_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "conform_set_precedence")

    @conform_set_precedence.setter
    def conform_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conform_set_precedence", value)

    @property
    @pulumi.getter(name="conformSetQosGroup")
    def conform_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_qos_group")

    @conform_set_qos_group.setter
    def conform_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_qos_group", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[pulumi.Input[str]]:
        """
        Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        """
        return pulumi.get(self, "exceed_action")

    @exceed_action.setter
    def exceed_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_action", value)

    @property
    @pulumi.getter(name="exceedSetCos")
    def exceed_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_cos")

    @exceed_set_cos.setter
    def exceed_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_cos", value)

    @property
    @pulumi.getter(name="exceedSetDscp")
    def exceed_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_dscp")

    @exceed_set_dscp.setter
    def exceed_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_dscp", value)

    @property
    @pulumi.getter(name="exceedSetPrecedence")
    def exceed_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "exceed_set_precedence")

    @exceed_set_precedence.setter
    def exceed_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_set_precedence", value)

    @property
    @pulumi.getter(name="exceedSetQosGroup")
    def exceed_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_qos_group")

    @exceed_set_qos_group.setter
    def exceed_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_qos_group", value)

    @property
    @pulumi.getter(name="pirRate")
    def pir_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "pir_rate")

    @pir_rate.setter
    def pir_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pir_rate", value)

    @property
    @pulumi.getter(name="pirUnit")
    def pir_unit(self) -> Optional[pulumi.Input[str]]:
        """
        PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        """
        return pulumi.get(self, "pir_unit")

    @pir_unit.setter
    def pir_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pir_unit", value)

    @property
    @pulumi.getter(name="violateAction")
    def violate_action(self) -> Optional[pulumi.Input[str]]:
        """
        Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        """
        return pulumi.get(self, "violate_action")

    @violate_action.setter
    def violate_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violate_action", value)

    @property
    @pulumi.getter(name="violateSetCos")
    def violate_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_cos")

    @violate_set_cos.setter
    def violate_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_cos", value)

    @property
    @pulumi.getter(name="violateSetDscp")
    def violate_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_dscp")

    @violate_set_dscp.setter
    def violate_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_dscp", value)

    @property
    @pulumi.getter(name="violateSetPrecedence")
    def violate_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "violate_set_precedence")

    @violate_set_precedence.setter
    def violate_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violate_set_precedence", value)

    @property
    @pulumi.getter(name="violateSetQosGroup")
    def violate_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_qos_group")

    @violate_set_qos_group.setter
    def violate_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_qos_group", value)


@pulumi.input_type
class _DefaultQosPolicyMapMatchClassMapPoliceState:
    def __init__(__self__, *,
                 bc_rate: Optional[pulumi.Input[int]] = None,
                 bc_unit: Optional[pulumi.Input[str]] = None,
                 be_rate: Optional[pulumi.Input[int]] = None,
                 be_unit: Optional[pulumi.Input[str]] = None,
                 cir_rate: Optional[pulumi.Input[int]] = None,
                 cir_unit: Optional[pulumi.Input[str]] = None,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 conform_action: Optional[pulumi.Input[str]] = None,
                 conform_set_cos: Optional[pulumi.Input[int]] = None,
                 conform_set_dscp: Optional[pulumi.Input[int]] = None,
                 conform_set_precedence: Optional[pulumi.Input[str]] = None,
                 conform_set_qos_group: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 exceed_action: Optional[pulumi.Input[str]] = None,
                 exceed_set_cos: Optional[pulumi.Input[int]] = None,
                 exceed_set_dscp: Optional[pulumi.Input[int]] = None,
                 exceed_set_precedence: Optional[pulumi.Input[str]] = None,
                 exceed_set_qos_group: Optional[pulumi.Input[int]] = None,
                 pir_rate: Optional[pulumi.Input[int]] = None,
                 pir_unit: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 violate_action: Optional[pulumi.Input[str]] = None,
                 violate_set_cos: Optional[pulumi.Input[int]] = None,
                 violate_set_dscp: Optional[pulumi.Input[int]] = None,
                 violate_set_precedence: Optional[pulumi.Input[str]] = None,
                 violate_set_qos_group: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DefaultQosPolicyMapMatchClassMapPolice resources.
        :param pulumi.Input[int] bc_rate: CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        :param pulumi.Input[str] bc_unit: CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        :param pulumi.Input[int] be_rate: PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        :param pulumi.Input[str] be_unit: PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
               `unspecified`
        :param pulumi.Input[int] cir_rate: CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] cir_unit: CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] conform_action: Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        :param pulumi.Input[int] conform_set_cos: Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] conform_set_dscp: Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] conform_set_precedence: Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] conform_set_qos_group: Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] exceed_action: Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        :param pulumi.Input[int] exceed_set_cos: Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] exceed_set_dscp: Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] exceed_set_precedence: Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] exceed_set_qos_group: Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] pir_rate: PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] pir_unit: PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[str] violate_action: Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        :param pulumi.Input[int] violate_set_cos: Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] violate_set_dscp: Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] violate_set_precedence: Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] violate_set_qos_group: Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        if bc_rate is not None:
            pulumi.set(__self__, "bc_rate", bc_rate)
        if bc_unit is not None:
            pulumi.set(__self__, "bc_unit", bc_unit)
        if be_rate is not None:
            pulumi.set(__self__, "be_rate", be_rate)
        if be_unit is not None:
            pulumi.set(__self__, "be_unit", be_unit)
        if cir_rate is not None:
            pulumi.set(__self__, "cir_rate", cir_rate)
        if cir_unit is not None:
            pulumi.set(__self__, "cir_unit", cir_unit)
        if class_map_name is not None:
            pulumi.set(__self__, "class_map_name", class_map_name)
        if conform_action is not None:
            pulumi.set(__self__, "conform_action", conform_action)
        if conform_set_cos is not None:
            pulumi.set(__self__, "conform_set_cos", conform_set_cos)
        if conform_set_dscp is not None:
            pulumi.set(__self__, "conform_set_dscp", conform_set_dscp)
        if conform_set_precedence is not None:
            pulumi.set(__self__, "conform_set_precedence", conform_set_precedence)
        if conform_set_qos_group is not None:
            pulumi.set(__self__, "conform_set_qos_group", conform_set_qos_group)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)
        if exceed_set_cos is not None:
            pulumi.set(__self__, "exceed_set_cos", exceed_set_cos)
        if exceed_set_dscp is not None:
            pulumi.set(__self__, "exceed_set_dscp", exceed_set_dscp)
        if exceed_set_precedence is not None:
            pulumi.set(__self__, "exceed_set_precedence", exceed_set_precedence)
        if exceed_set_qos_group is not None:
            pulumi.set(__self__, "exceed_set_qos_group", exceed_set_qos_group)
        if pir_rate is not None:
            pulumi.set(__self__, "pir_rate", pir_rate)
        if pir_unit is not None:
            pulumi.set(__self__, "pir_unit", pir_unit)
        if policy_map_name is not None:
            pulumi.set(__self__, "policy_map_name", policy_map_name)
        if violate_action is not None:
            pulumi.set(__self__, "violate_action", violate_action)
        if violate_set_cos is not None:
            pulumi.set(__self__, "violate_set_cos", violate_set_cos)
        if violate_set_dscp is not None:
            pulumi.set(__self__, "violate_set_dscp", violate_set_dscp)
        if violate_set_precedence is not None:
            pulumi.set(__self__, "violate_set_precedence", violate_set_precedence)
        if violate_set_qos_group is not None:
            pulumi.set(__self__, "violate_set_qos_group", violate_set_qos_group)

    @property
    @pulumi.getter(name="bcRate")
    def bc_rate(self) -> Optional[pulumi.Input[int]]:
        """
        CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        """
        return pulumi.get(self, "bc_rate")

    @bc_rate.setter
    def bc_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bc_rate", value)

    @property
    @pulumi.getter(name="bcUnit")
    def bc_unit(self) -> Optional[pulumi.Input[str]]:
        """
        CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        """
        return pulumi.get(self, "bc_unit")

    @bc_unit.setter
    def bc_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bc_unit", value)

    @property
    @pulumi.getter(name="beRate")
    def be_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        """
        return pulumi.get(self, "be_rate")

    @be_rate.setter
    def be_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "be_rate", value)

    @property
    @pulumi.getter(name="beUnit")
    def be_unit(self) -> Optional[pulumi.Input[str]]:
        """
        PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
        `unspecified`
        """
        return pulumi.get(self, "be_unit")

    @be_unit.setter
    def be_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "be_unit", value)

    @property
    @pulumi.getter(name="cirRate")
    def cir_rate(self) -> Optional[pulumi.Input[int]]:
        """
        CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "cir_rate")

    @cir_rate.setter
    def cir_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cir_rate", value)

    @property
    @pulumi.getter(name="cirUnit")
    def cir_unit(self) -> Optional[pulumi.Input[str]]:
        """
        CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        """
        return pulumi.get(self, "cir_unit")

    @cir_unit.setter
    def cir_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cir_unit", value)

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @class_map_name.setter
    def class_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_map_name", value)

    @property
    @pulumi.getter(name="conformAction")
    def conform_action(self) -> Optional[pulumi.Input[str]]:
        """
        Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        """
        return pulumi.get(self, "conform_action")

    @conform_action.setter
    def conform_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conform_action", value)

    @property
    @pulumi.getter(name="conformSetCos")
    def conform_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_cos")

    @conform_set_cos.setter
    def conform_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_cos", value)

    @property
    @pulumi.getter(name="conformSetDscp")
    def conform_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_dscp")

    @conform_set_dscp.setter
    def conform_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_dscp", value)

    @property
    @pulumi.getter(name="conformSetPrecedence")
    def conform_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "conform_set_precedence")

    @conform_set_precedence.setter
    def conform_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conform_set_precedence", value)

    @property
    @pulumi.getter(name="conformSetQosGroup")
    def conform_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_qos_group")

    @conform_set_qos_group.setter
    def conform_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conform_set_qos_group", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[pulumi.Input[str]]:
        """
        Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        """
        return pulumi.get(self, "exceed_action")

    @exceed_action.setter
    def exceed_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_action", value)

    @property
    @pulumi.getter(name="exceedSetCos")
    def exceed_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_cos")

    @exceed_set_cos.setter
    def exceed_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_cos", value)

    @property
    @pulumi.getter(name="exceedSetDscp")
    def exceed_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_dscp")

    @exceed_set_dscp.setter
    def exceed_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_dscp", value)

    @property
    @pulumi.getter(name="exceedSetPrecedence")
    def exceed_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "exceed_set_precedence")

    @exceed_set_precedence.setter
    def exceed_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exceed_set_precedence", value)

    @property
    @pulumi.getter(name="exceedSetQosGroup")
    def exceed_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_qos_group")

    @exceed_set_qos_group.setter
    def exceed_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exceed_set_qos_group", value)

    @property
    @pulumi.getter(name="pirRate")
    def pir_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "pir_rate")

    @pir_rate.setter
    def pir_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pir_rate", value)

    @property
    @pulumi.getter(name="pirUnit")
    def pir_unit(self) -> Optional[pulumi.Input[str]]:
        """
        PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        """
        return pulumi.get(self, "pir_unit")

    @pir_unit.setter
    def pir_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pir_unit", value)

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @policy_map_name.setter
    def policy_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_map_name", value)

    @property
    @pulumi.getter(name="violateAction")
    def violate_action(self) -> Optional[pulumi.Input[str]]:
        """
        Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        """
        return pulumi.get(self, "violate_action")

    @violate_action.setter
    def violate_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violate_action", value)

    @property
    @pulumi.getter(name="violateSetCos")
    def violate_set_cos(self) -> Optional[pulumi.Input[int]]:
        """
        Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_cos")

    @violate_set_cos.setter
    def violate_set_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_cos", value)

    @property
    @pulumi.getter(name="violateSetDscp")
    def violate_set_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_dscp")

    @violate_set_dscp.setter
    def violate_set_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_dscp", value)

    @property
    @pulumi.getter(name="violateSetPrecedence")
    def violate_set_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "violate_set_precedence")

    @violate_set_precedence.setter
    def violate_set_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violate_set_precedence", value)

    @property
    @pulumi.getter(name="violateSetQosGroup")
    def violate_set_qos_group(self) -> Optional[pulumi.Input[int]]:
        """
        Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_qos_group")

    @violate_set_qos_group.setter
    def violate_set_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "violate_set_qos_group", value)


class DefaultQosPolicyMapMatchClassMapPolice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bc_rate: Optional[pulumi.Input[int]] = None,
                 bc_unit: Optional[pulumi.Input[str]] = None,
                 be_rate: Optional[pulumi.Input[int]] = None,
                 be_unit: Optional[pulumi.Input[str]] = None,
                 cir_rate: Optional[pulumi.Input[int]] = None,
                 cir_unit: Optional[pulumi.Input[str]] = None,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 conform_action: Optional[pulumi.Input[str]] = None,
                 conform_set_cos: Optional[pulumi.Input[int]] = None,
                 conform_set_dscp: Optional[pulumi.Input[int]] = None,
                 conform_set_precedence: Optional[pulumi.Input[str]] = None,
                 conform_set_qos_group: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 exceed_action: Optional[pulumi.Input[str]] = None,
                 exceed_set_cos: Optional[pulumi.Input[int]] = None,
                 exceed_set_dscp: Optional[pulumi.Input[int]] = None,
                 exceed_set_precedence: Optional[pulumi.Input[str]] = None,
                 exceed_set_qos_group: Optional[pulumi.Input[int]] = None,
                 pir_rate: Optional[pulumi.Input[int]] = None,
                 pir_unit: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 violate_action: Optional[pulumi.Input[str]] = None,
                 violate_set_cos: Optional[pulumi.Input[int]] = None,
                 violate_set_dscp: Optional[pulumi.Input[int]] = None,
                 violate_set_precedence: Optional[pulumi.Input[str]] = None,
                 violate_set_qos_group: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the default QoS policy map match class map police configuration.

        - API Documentation: [ipqosPolice](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:Police/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.DefaultQosPolicyMapMatchClassMapPolice("example",
            bc_rate=200,
            bc_unit="mbytes",
            be_rate=200,
            be_unit="mbytes",
            cir_rate=10000,
            cir_unit="mbps",
            class_map_name="Voice",
            conform_action="transmit",
            conform_set_cos=0,
            conform_set_dscp=0,
            conform_set_precedence="routine",
            conform_set_qos_group=0,
            exceed_action="transmit",
            exceed_set_cos=0,
            exceed_set_dscp=0,
            exceed_set_precedence="routine",
            exceed_set_qos_group=0,
            pir_rate=10000,
            pir_unit="mbps",
            policy_map_name="PM1",
            violate_action="drop",
            violate_set_cos=0,
            violate_set_dscp=0,
            violate_set_precedence="routine",
            violate_set_qos_group=0)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/defaultQosPolicyMapMatchClassMapPolice:DefaultQosPolicyMapMatchClassMapPolice example "sys/ipqos/dflt/p/name-[PM1]/cmap-[Voice]/police"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bc_rate: CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        :param pulumi.Input[str] bc_unit: CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        :param pulumi.Input[int] be_rate: PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        :param pulumi.Input[str] be_unit: PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
               `unspecified`
        :param pulumi.Input[int] cir_rate: CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] cir_unit: CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] conform_action: Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        :param pulumi.Input[int] conform_set_cos: Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] conform_set_dscp: Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] conform_set_precedence: Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] conform_set_qos_group: Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] exceed_action: Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        :param pulumi.Input[int] exceed_set_cos: Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] exceed_set_dscp: Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] exceed_set_precedence: Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] exceed_set_qos_group: Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] pir_rate: PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] pir_unit: PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[str] violate_action: Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        :param pulumi.Input[int] violate_set_cos: Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] violate_set_dscp: Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] violate_set_precedence: Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] violate_set_qos_group: Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultQosPolicyMapMatchClassMapPoliceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the default QoS policy map match class map police configuration.

        - API Documentation: [ipqosPolice](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:Police/)

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_nxos as nxos

        example = nxos.DefaultQosPolicyMapMatchClassMapPolice("example",
            bc_rate=200,
            bc_unit="mbytes",
            be_rate=200,
            be_unit="mbytes",
            cir_rate=10000,
            cir_unit="mbps",
            class_map_name="Voice",
            conform_action="transmit",
            conform_set_cos=0,
            conform_set_dscp=0,
            conform_set_precedence="routine",
            conform_set_qos_group=0,
            exceed_action="transmit",
            exceed_set_cos=0,
            exceed_set_dscp=0,
            exceed_set_precedence="routine",
            exceed_set_qos_group=0,
            pir_rate=10000,
            pir_unit="mbps",
            policy_map_name="PM1",
            violate_action="drop",
            violate_set_cos=0,
            violate_set_dscp=0,
            violate_set_precedence="routine",
            violate_set_qos_group=0)
        ```

        ## Import

        ```sh
         $ pulumi import nxos:index/defaultQosPolicyMapMatchClassMapPolice:DefaultQosPolicyMapMatchClassMapPolice example "sys/ipqos/dflt/p/name-[PM1]/cmap-[Voice]/police"
        ```

        :param str resource_name: The name of the resource.
        :param DefaultQosPolicyMapMatchClassMapPoliceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultQosPolicyMapMatchClassMapPoliceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bc_rate: Optional[pulumi.Input[int]] = None,
                 bc_unit: Optional[pulumi.Input[str]] = None,
                 be_rate: Optional[pulumi.Input[int]] = None,
                 be_unit: Optional[pulumi.Input[str]] = None,
                 cir_rate: Optional[pulumi.Input[int]] = None,
                 cir_unit: Optional[pulumi.Input[str]] = None,
                 class_map_name: Optional[pulumi.Input[str]] = None,
                 conform_action: Optional[pulumi.Input[str]] = None,
                 conform_set_cos: Optional[pulumi.Input[int]] = None,
                 conform_set_dscp: Optional[pulumi.Input[int]] = None,
                 conform_set_precedence: Optional[pulumi.Input[str]] = None,
                 conform_set_qos_group: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 exceed_action: Optional[pulumi.Input[str]] = None,
                 exceed_set_cos: Optional[pulumi.Input[int]] = None,
                 exceed_set_dscp: Optional[pulumi.Input[int]] = None,
                 exceed_set_precedence: Optional[pulumi.Input[str]] = None,
                 exceed_set_qos_group: Optional[pulumi.Input[int]] = None,
                 pir_rate: Optional[pulumi.Input[int]] = None,
                 pir_unit: Optional[pulumi.Input[str]] = None,
                 policy_map_name: Optional[pulumi.Input[str]] = None,
                 violate_action: Optional[pulumi.Input[str]] = None,
                 violate_set_cos: Optional[pulumi.Input[int]] = None,
                 violate_set_dscp: Optional[pulumi.Input[int]] = None,
                 violate_set_precedence: Optional[pulumi.Input[str]] = None,
                 violate_set_qos_group: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultQosPolicyMapMatchClassMapPoliceArgs.__new__(DefaultQosPolicyMapMatchClassMapPoliceArgs)

            __props__.__dict__["bc_rate"] = bc_rate
            __props__.__dict__["bc_unit"] = bc_unit
            __props__.__dict__["be_rate"] = be_rate
            __props__.__dict__["be_unit"] = be_unit
            if cir_rate is None and not opts.urn:
                raise TypeError("Missing required property 'cir_rate'")
            __props__.__dict__["cir_rate"] = cir_rate
            __props__.__dict__["cir_unit"] = cir_unit
            if class_map_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_map_name'")
            __props__.__dict__["class_map_name"] = class_map_name
            __props__.__dict__["conform_action"] = conform_action
            __props__.__dict__["conform_set_cos"] = conform_set_cos
            __props__.__dict__["conform_set_dscp"] = conform_set_dscp
            __props__.__dict__["conform_set_precedence"] = conform_set_precedence
            __props__.__dict__["conform_set_qos_group"] = conform_set_qos_group
            __props__.__dict__["device"] = device
            __props__.__dict__["exceed_action"] = exceed_action
            __props__.__dict__["exceed_set_cos"] = exceed_set_cos
            __props__.__dict__["exceed_set_dscp"] = exceed_set_dscp
            __props__.__dict__["exceed_set_precedence"] = exceed_set_precedence
            __props__.__dict__["exceed_set_qos_group"] = exceed_set_qos_group
            __props__.__dict__["pir_rate"] = pir_rate
            __props__.__dict__["pir_unit"] = pir_unit
            if policy_map_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_map_name'")
            __props__.__dict__["policy_map_name"] = policy_map_name
            __props__.__dict__["violate_action"] = violate_action
            __props__.__dict__["violate_set_cos"] = violate_set_cos
            __props__.__dict__["violate_set_dscp"] = violate_set_dscp
            __props__.__dict__["violate_set_precedence"] = violate_set_precedence
            __props__.__dict__["violate_set_qos_group"] = violate_set_qos_group
        super(DefaultQosPolicyMapMatchClassMapPolice, __self__).__init__(
            'nxos:index/defaultQosPolicyMapMatchClassMapPolice:DefaultQosPolicyMapMatchClassMapPolice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bc_rate: Optional[pulumi.Input[int]] = None,
            bc_unit: Optional[pulumi.Input[str]] = None,
            be_rate: Optional[pulumi.Input[int]] = None,
            be_unit: Optional[pulumi.Input[str]] = None,
            cir_rate: Optional[pulumi.Input[int]] = None,
            cir_unit: Optional[pulumi.Input[str]] = None,
            class_map_name: Optional[pulumi.Input[str]] = None,
            conform_action: Optional[pulumi.Input[str]] = None,
            conform_set_cos: Optional[pulumi.Input[int]] = None,
            conform_set_dscp: Optional[pulumi.Input[int]] = None,
            conform_set_precedence: Optional[pulumi.Input[str]] = None,
            conform_set_qos_group: Optional[pulumi.Input[int]] = None,
            device: Optional[pulumi.Input[str]] = None,
            exceed_action: Optional[pulumi.Input[str]] = None,
            exceed_set_cos: Optional[pulumi.Input[int]] = None,
            exceed_set_dscp: Optional[pulumi.Input[int]] = None,
            exceed_set_precedence: Optional[pulumi.Input[str]] = None,
            exceed_set_qos_group: Optional[pulumi.Input[int]] = None,
            pir_rate: Optional[pulumi.Input[int]] = None,
            pir_unit: Optional[pulumi.Input[str]] = None,
            policy_map_name: Optional[pulumi.Input[str]] = None,
            violate_action: Optional[pulumi.Input[str]] = None,
            violate_set_cos: Optional[pulumi.Input[int]] = None,
            violate_set_dscp: Optional[pulumi.Input[int]] = None,
            violate_set_precedence: Optional[pulumi.Input[str]] = None,
            violate_set_qos_group: Optional[pulumi.Input[int]] = None) -> 'DefaultQosPolicyMapMatchClassMapPolice':
        """
        Get an existing DefaultQosPolicyMapMatchClassMapPolice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bc_rate: CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        :param pulumi.Input[str] bc_unit: CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        :param pulumi.Input[int] be_rate: PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        :param pulumi.Input[str] be_unit: PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
               `unspecified`
        :param pulumi.Input[int] cir_rate: CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] cir_unit: CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        :param pulumi.Input[str] class_map_name: Class map name.
        :param pulumi.Input[str] conform_action: Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        :param pulumi.Input[int] conform_set_cos: Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] conform_set_dscp: Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] conform_set_precedence: Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] conform_set_qos_group: Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] exceed_action: Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        :param pulumi.Input[int] exceed_set_cos: Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] exceed_set_dscp: Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] exceed_set_precedence: Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] exceed_set_qos_group: Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] pir_rate: PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        :param pulumi.Input[str] pir_unit: PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        :param pulumi.Input[str] policy_map_name: Policy map name.
        :param pulumi.Input[str] violate_action: Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
               `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        :param pulumi.Input[int] violate_set_cos: Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        :param pulumi.Input[int] violate_set_dscp: Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        :param pulumi.Input[str] violate_set_precedence: Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
               `critical`, `internet`, `network` - Default value: `routine`
        :param pulumi.Input[int] violate_set_qos_group: Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultQosPolicyMapMatchClassMapPoliceState.__new__(_DefaultQosPolicyMapMatchClassMapPoliceState)

        __props__.__dict__["bc_rate"] = bc_rate
        __props__.__dict__["bc_unit"] = bc_unit
        __props__.__dict__["be_rate"] = be_rate
        __props__.__dict__["be_unit"] = be_unit
        __props__.__dict__["cir_rate"] = cir_rate
        __props__.__dict__["cir_unit"] = cir_unit
        __props__.__dict__["class_map_name"] = class_map_name
        __props__.__dict__["conform_action"] = conform_action
        __props__.__dict__["conform_set_cos"] = conform_set_cos
        __props__.__dict__["conform_set_dscp"] = conform_set_dscp
        __props__.__dict__["conform_set_precedence"] = conform_set_precedence
        __props__.__dict__["conform_set_qos_group"] = conform_set_qos_group
        __props__.__dict__["device"] = device
        __props__.__dict__["exceed_action"] = exceed_action
        __props__.__dict__["exceed_set_cos"] = exceed_set_cos
        __props__.__dict__["exceed_set_dscp"] = exceed_set_dscp
        __props__.__dict__["exceed_set_precedence"] = exceed_set_precedence
        __props__.__dict__["exceed_set_qos_group"] = exceed_set_qos_group
        __props__.__dict__["pir_rate"] = pir_rate
        __props__.__dict__["pir_unit"] = pir_unit
        __props__.__dict__["policy_map_name"] = policy_map_name
        __props__.__dict__["violate_action"] = violate_action
        __props__.__dict__["violate_set_cos"] = violate_set_cos
        __props__.__dict__["violate_set_dscp"] = violate_set_dscp
        __props__.__dict__["violate_set_precedence"] = violate_set_precedence
        __props__.__dict__["violate_set_qos_group"] = violate_set_qos_group
        return DefaultQosPolicyMapMatchClassMapPolice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bcRate")
    def bc_rate(self) -> pulumi.Output[int]:
        """
        CIR burst rate. - Range: `0`-`536870912` - Default value: `200`
        """
        return pulumi.get(self, "bc_rate")

    @property
    @pulumi.getter(name="bcUnit")
    def bc_unit(self) -> pulumi.Output[str]:
        """
        CIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value: `ms`
        """
        return pulumi.get(self, "bc_unit")

    @property
    @pulumi.getter(name="beRate")
    def be_rate(self) -> pulumi.Output[int]:
        """
        PIR burst rate. - Range: `0`-`536870912` - Default value: `0`
        """
        return pulumi.get(self, "be_rate")

    @property
    @pulumi.getter(name="beUnit")
    def be_unit(self) -> pulumi.Output[str]:
        """
        PIR burst rate unit. - Choices: `unspecified`, `bytes`, `kbytes`, `mbytes`, `ms`, `us`, `packets` - Default value:
        `unspecified`
        """
        return pulumi.get(self, "be_unit")

    @property
    @pulumi.getter(name="cirRate")
    def cir_rate(self) -> pulumi.Output[int]:
        """
        CIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "cir_rate")

    @property
    @pulumi.getter(name="cirUnit")
    def cir_unit(self) -> pulumi.Output[str]:
        """
        CIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `bps`
        """
        return pulumi.get(self, "cir_unit")

    @property
    @pulumi.getter(name="classMapName")
    def class_map_name(self) -> pulumi.Output[str]:
        """
        Class map name.
        """
        return pulumi.get(self, "class_map_name")

    @property
    @pulumi.getter(name="conformAction")
    def conform_action(self) -> pulumi.Output[str]:
        """
        Conform action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `transmit`
        """
        return pulumi.get(self, "conform_action")

    @property
    @pulumi.getter(name="conformSetCos")
    def conform_set_cos(self) -> pulumi.Output[int]:
        """
        Set CoS for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_cos")

    @property
    @pulumi.getter(name="conformSetDscp")
    def conform_set_dscp(self) -> pulumi.Output[int]:
        """
        Set DSCP for conforming traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_dscp")

    @property
    @pulumi.getter(name="conformSetPrecedence")
    def conform_set_precedence(self) -> pulumi.Output[str]:
        """
        Set precedence for conforming traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "conform_set_precedence")

    @property
    @pulumi.getter(name="conformSetQosGroup")
    def conform_set_qos_group(self) -> pulumi.Output[int]:
        """
        Set qos-group for conforming traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "conform_set_qos_group")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> pulumi.Output[str]:
        """
        Exceed action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `unspecified`
        """
        return pulumi.get(self, "exceed_action")

    @property
    @pulumi.getter(name="exceedSetCos")
    def exceed_set_cos(self) -> pulumi.Output[int]:
        """
        Set CoS for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_cos")

    @property
    @pulumi.getter(name="exceedSetDscp")
    def exceed_set_dscp(self) -> pulumi.Output[int]:
        """
        Set DSCP for exceeding traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_dscp")

    @property
    @pulumi.getter(name="exceedSetPrecedence")
    def exceed_set_precedence(self) -> pulumi.Output[str]:
        """
        Set precedence for exceeding traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "exceed_set_precedence")

    @property
    @pulumi.getter(name="exceedSetQosGroup")
    def exceed_set_qos_group(self) -> pulumi.Output[int]:
        """
        Set qos-group for exceeding traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "exceed_set_qos_group")

    @property
    @pulumi.getter(name="pirRate")
    def pir_rate(self) -> pulumi.Output[int]:
        """
        PIR rate. - Range: `0`-`100000000000` - Default value: `0`
        """
        return pulumi.get(self, "pir_rate")

    @property
    @pulumi.getter(name="pirUnit")
    def pir_unit(self) -> pulumi.Output[str]:
        """
        PIR rate unit. - Choices: `unspecified`, `bps`, `kbps`, `mbps`, `gbps`, `pps`, `pct` - Default value: `unspecified`
        """
        return pulumi.get(self, "pir_unit")

    @property
    @pulumi.getter(name="policyMapName")
    def policy_map_name(self) -> pulumi.Output[str]:
        """
        Policy map name.
        """
        return pulumi.get(self, "policy_map_name")

    @property
    @pulumi.getter(name="violateAction")
    def violate_action(self) -> pulumi.Output[str]:
        """
        Violate action. - Choices: `unspecified`, `transmit`, `drop`, `set-cos-transmit`, `set-dscp-transmit`,
        `set-prec-transmit`, `set-qos-transmit` - Default value: `drop`
        """
        return pulumi.get(self, "violate_action")

    @property
    @pulumi.getter(name="violateSetCos")
    def violate_set_cos(self) -> pulumi.Output[int]:
        """
        Set CoS for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_cos")

    @property
    @pulumi.getter(name="violateSetDscp")
    def violate_set_dscp(self) -> pulumi.Output[int]:
        """
        Set DSCP for violating traffic. - Range: `0`-`63` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_dscp")

    @property
    @pulumi.getter(name="violateSetPrecedence")
    def violate_set_precedence(self) -> pulumi.Output[str]:
        """
        Set precedence for violating traffic. - Choices: `routine`, `priority`, `immediate`, `flash`, `flash-override`,
        `critical`, `internet`, `network` - Default value: `routine`
        """
        return pulumi.get(self, "violate_set_precedence")

    @property
    @pulumi.getter(name="violateSetQosGroup")
    def violate_set_qos_group(self) -> pulumi.Output[int]:
        """
        Set qos-group for violating traffic. - Range: `0`-`7` - Default value: `0`
        """
        return pulumi.get(self, "violate_set_qos_group")

