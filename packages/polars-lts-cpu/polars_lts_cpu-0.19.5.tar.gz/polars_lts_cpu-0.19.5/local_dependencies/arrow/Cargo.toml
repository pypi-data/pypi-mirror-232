[package]
name = "nano-arrow"
version = "0.1.0"
authors = [
  "Jorge C. Leitao <jorgecarleitao@gmail.com>",
  "Apache Arrow <dev@arrow.apache.org>",
  "Ritchie Vink <ritchie46@gmail.com>",
]
edition = "2021"
homepage = "https://www.pola.rs/"
license = "Apache 2.0 AND MIT"
repository = "https://github.com/pola-rs/polars"
description = "Minimal implementation of the Arrow specification forked from arrow2."
resolver = "2"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
dyn-clone = { version = "1" }
foreign_vec = { version = "0.1" }
regex-syntax = { version = "0.7", optional = true }

arrow-format = { version = "0.8", optional = true, features = ["ipc"] }

# for IPC compression
lz4 = { version = "1.24", optional = true }
zstd = { version = "0.12", optional = true }

# to read IPC as a stream
async-stream = { version = "0.3.2", optional = true }

# avro support
avro-schema = { version = "0.3", optional = true }

# for division/remainder optimization at runtime
strength_reduce = { version = "0.2", optional = true }

# Support conversion to/from arrow-rs
arrow-array = { version = ">=40", optional = true }
arrow-buffer = { version = ">=40", optional = true }
arrow-data = { version = ">=40", optional = true }
arrow-schema = { version = ">=40", optional = true }
bytemuck = { version = "1", features = ["derive", "extern_crate_alloc"] }
chrono = { version = "0.4.31", default-features = false, features = ["std"] }
chrono-tz = { version = "0.8.1", optional = true }
either = "1.9"
hashbrown = { version = "0.14", features = ["rayon", "ahash"] }
num-traits = "0.2"
simdutf8 = "0.1.4"
ethnum = "1.3.2"
lexical-core = { version = "0.8.5", optional = true }
fallible-streaming-iterator = { version = "0.1.9", optional = true }
regex = { version = "1.9", optional = true }
streaming-iterator = "0.1.9"
indexmap = { version = "2", features = ["std"] , optional = true }
hex = { version = "0.4.3", optional = true }
base64 = { version = "0.21.2", optional = true }
futures = { version = "0.3.25", optional = true }
multiversion = { version = "0.7", optional = true }
ahash = "0.8"

# parquet support
[dependencies.parquet2]
version = "0.17"
optional = true
default_features = false
features = ["async"]

[build-dependencies]
rustc_version = "0.4.0"

[target.wasm32-unknown-unknown.dependencies]
getrandom = { version = "0.2", features = ["js"] }

[features]
default = []
full = [
  "arrow",
  "io_ipc",
  "io_flight",
  "io_ipc_write_async",
  "io_ipc_read_async",
  "io_ipc_compression",
  "io_parquet",
  "io_parquet_compression",
  "io_avro",
  "io_avro_compression",
  "io_avro_async",
  "regex-syntax",
  "compute",
  # parses timezones used in timestamp conversions
  "chrono-tz",
]
arrow = ["arrow-buffer", "arrow-schema", "arrow-data", "arrow-array"]
io_ipc = ["arrow-format"]
io_ipc_write_async = ["io_ipc", "futures"]
io_ipc_read_async = ["io_ipc", "futures", "async-stream"]
io_ipc_compression = ["lz4", "zstd"]
io_flight = ["io_ipc", "arrow-format/flight-data"]

# base64 + io_ipc because arrow schemas are stored as base64-encoded ipc format.
io_parquet = ["parquet2", "io_ipc", "base64", "futures", "fallible-streaming-iterator"]

io_parquet_compression = [
  "io_parquet_zstd",
  "io_parquet_gzip",
  "io_parquet_snappy",
  "io_parquet_lz4",
  "io_parquet_brotli",
]

# sample testing of generated arrow data
io_parquet_sample_test = ["io_parquet"]

# compression backends
io_parquet_zstd = ["parquet2/zstd"]
io_parquet_snappy = ["parquet2/snappy"]
io_parquet_gzip = ["parquet2/gzip"]
io_parquet_lz4 = ["parquet2/lz4"]
io_parquet_brotli = ["parquet2/brotli"]

# parquet bloom filter functions
io_parquet_bloom_filter = ["parquet2/bloom_filter"]

io_avro = ["avro-schema"]
io_avro_compression = [
  "avro-schema/compression",
]
io_avro_async = ["avro-schema/async"]

# the compute kernels. Disabling this significantly reduces compile time.
compute_aggregate = ["multiversion"]
compute_arithmetics_decimal = ["strength_reduce"]
compute_arithmetics = ["strength_reduce", "compute_arithmetics_decimal"]
compute_bitwise = []
compute_boolean = []
compute_boolean_kleene = []
compute_cast = ["lexical-core", "compute_take"]
compute_comparison = ["compute_take", "compute_boolean"]
compute_concatenate = []
compute_filter = []
compute_hash = ["multiversion"]
compute_if_then_else = []
compute_take = []
compute_temporal = []
compute = [
  "compute_aggregate",
  "compute_arithmetics",
  "compute_bitwise",
  "compute_boolean",
  "compute_boolean_kleene",
  "compute_cast",
  "compute_comparison",
  "compute_concatenate",
  "compute_filter",
  "compute_hash",
  "compute_if_then_else",
  "compute_take",
  "compute_temporal",
]
simd = []

[package.metadata.docs.rs]
features = ["full"]
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.cargo-all-features]
allowlist = ["compute", "compute_sort", "compute_hash", "compute_nullif"]
