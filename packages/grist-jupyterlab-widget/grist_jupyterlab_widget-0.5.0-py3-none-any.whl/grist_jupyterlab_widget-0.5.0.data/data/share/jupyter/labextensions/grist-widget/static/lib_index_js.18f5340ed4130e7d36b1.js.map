{"version":3,"file":"lib_index_js.18f5340ed4130e7d36b1.js","mappings":"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","sources":["webpack://grist-widget/./src/index.ts","webpack://grist-widget/./src/initKernelPy.ts"],"sourcesContent":["import { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport * as Comlink from 'comlink';\nimport initKernelPy from './initKernelPy';\nimport { IFileBrowserCommands } from '@jupyterlab/filebrowser';\n\nconst pendingWorkers: MyWorker[] = [];\n\nclass MyWorker extends Worker {\n  constructor(scriptURL: string | URL, options?: WorkerOptions) {\n    super(scriptURL, options);\n    const { grist } = (window as any);\n    if (grist) {\n      exposeWorker(this, grist);\n    } else {\n      pendingWorkers.push(this);\n    }\n  }\n}\n\nwindow.Worker = MyWorker;\n\nconst emptyNotebook = {\n  content: {\n    'metadata': {\n      'language_info': {\n        'codemirror_mode': {\n          'name': 'python',\n          'version': 3\n        },\n        'file_extension': '.py',\n        'mimetype': 'text/x-python',\n        'name': 'python',\n        'nbconvert_exporter': 'python',\n        'pygments_lexer': 'ipython3',\n        'version': '3.11'\n      },\n      'kernelspec': {\n        'name': 'python',\n        'display_name': 'Python (Pyodide)',\n        'language': 'python'\n      }\n    },\n    'nbformat_minor': 4,\n    'nbformat': 4,\n    'cells': [\n      {\n        'cell_type': 'code',\n        'source': '',\n        'metadata': {},\n        'execution_count': null,\n        'outputs': []\n      }\n    ]\n  },\n  format: 'json' as const,\n};\n\nlet currentRecord: any = null;\n\n/**\n * Initialization data for the grist-widget extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'grist-widget:plugin',\n  description: 'Custom Grist widget for a JupyterLite notebook',\n  autoStart: true,\n  requires: [IFileBrowserCommands],\n  activate: (app: JupyterFrontEnd) => {\n    hideBars(app).catch(e => console.error(e));\n\n    const script = document.createElement('script');\n    script.src = 'https://docs.getgrist.com/grist-plugin-api.js';\n    script.id = 'grist-plugin-api';\n    script.addEventListener('load', async () => {\n      const grist = (window as any).grist;\n\n      app.serviceManager.contents.fileChanged.connect(async (_, change) => {\n        if (change.type === 'save' && change.newValue?.path === 'notebook.ipynb') {\n          grist.setOption('notebook', change.newValue);\n        }\n      });\n\n      grist.onRecord((record: any) => {\n        currentRecord = record;\n      });\n\n      grist.ready();\n\n      const notebook = await grist.getOption('notebook') || emptyNotebook;\n      await app.serviceManager.contents.save('notebook.ipynb', notebook);\n      await app.commands.execute('filebrowser:open-path', { path: 'notebook.ipynb' });\n\n      console.log('JupyterLab extension grist-widget is activated!');\n\n      const kernel = await getKernel(app);\n      kernel.requestExecute({ code: initKernelPy });\n\n      for (const worker of pendingWorkers) {\n        exposeWorker(worker, grist);\n      }\n\n      await app.commands.execute('notebook:run-all-cells');\n    });\n    document.head.appendChild(script);\n  }\n};\n\nasync function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction exposeWorker(worker: Worker, grist: any) {\n  Comlink.expose({\n    grist: {\n      ...grist,\n      getTable: (tableId: string) => Comlink.proxy(grist.getTable(tableId)),\n      getCurrentRecord: () => currentRecord,\n    }\n  }, worker);\n}\n\nasync function getKernel(app: JupyterFrontEnd) {\n  while (true) {\n    const widget = app.shell.currentWidget;\n    const kernel = (widget as any)?.context?.sessionContext?.session?.kernel;\n    if (kernel) {\n      return kernel;\n    }\n    await delay(100);\n  }\n}\n\nasync function hideBars(app: JupyterFrontEnd) {\n  while (!app.shell.currentWidget) {\n    await delay(100);\n  }\n  const shell = app.shell as any;\n  shell.collapseLeft();\n  shell._titleHandler.parent.setHidden(true);\n  shell._leftHandler.sideBar.setHidden(true);\n  for (let i = 0; i < 1000; i++) {\n    if (!shell.leftCollapsed) {\n      shell.collapseLeft();\n      shell._leftHandler.sideBar.setHidden(true);\n      break;\n    } else {\n      await delay(10);\n    }\n  }\n}\n\nexport default plugin;\n","// language=Python\nconst code = `\ndef __make_grist_api():\n    from pyodide.ffi import to_js, create_proxy\n    import js\n    import pyodide_js\n    import inspect\n    import traceback\n    import asyncio\n    \n    async def maybe_await(value):\n        while inspect.isawaitable(value):\n            value = await value\n        return value\n    \n    def run_async(coro):\n        if inspect.iscoroutinefunction(coro):\n            coro = coro()\n        asyncio.get_running_loop().run_until_complete(coro)\n\n    class ComlinkProxy:\n        def __init__(self, proxy, name=None):\n            self._proxy = proxy\n            self._name = name\n\n        def __getattr__(self, name):\n            return ComlinkProxy(getattr(self._proxy, name), name)\n\n        async def __call__(self, *args, **kwargs):\n            if any(callable(arg) for arg in args):\n                assert len(args) == 1 and not kwargs, \"Only one argument is supported for callbacks\"\n                [callback] = args\n                async def wrapper(*callback_args):\n                    callback_args = [\n                        a.to_py() if hasattr(a, \"to_py\") else a\n                        for a in callback_args\n                    ]\n                    await maybe_await(callback(*callback_args))\n\n                js._grist_tmp1 = self._proxy\n                js._grist_tmp2 = js.Comlink.proxy(create_proxy(wrapper))\n                result = await js.eval(\"_grist_tmp1(_grist_tmp2)\")\n            else:\n                args = [\n                    to_js(arg, dict_converter=js.Object.fromEntries)\n                    for arg in args\n                ]\n                kwargs = {\n                    key: to_js(value, dict_converter=js.Object.fromEntries)\n                    for key, value in kwargs.items()\n                }\n                result = await self._proxy(*args, **kwargs)\n\n            if self._name == \"getTable\":\n                result = ComlinkProxy(result)\n            elif hasattr(result, \"to_py\"):\n                result = result.to_py()\n            return result\n\n    js.importScripts(\"https://unpkg.com/comlink@4.4.1/dist/umd/comlink.js\")\n    pyodide_js.registerComlink(js.Comlink)\n    \n    get_ipython().display_formatter.formatters['text/plain'].for_type(\n        str, lambda string, pp, cycle: pp.text(string)\n    )\n    \n    def auto_display():\n        handles = [display(display_id=True) for _ in range(45)]\n        \n        def start():\n            for handle in handles:\n                handle.update({}, raw=True)\n\n            i = 0\n            def disp(obj):\n                nonlocal i\n                if i == len(handles) - 1:\n                    handles[i].update(\"Too many display calls!\")\n                else:\n                    handles[i].update(obj)\n                    i += 1\n            return disp\n        return start\n    \n    def wrap_with_display(wrapper):\n        disp_start = auto_display()\n        async def inner_wrapper(*args):\n            displayer = disp_start()\n            try:\n                await maybe_await(wrapper(displayer, *args))\n            except Exception as e:\n                displayer(\"\".join(traceback.format_exception(\n                    e.__class__, e, skip_traceback_internals(e.__traceback__)\n                )))\n                \n        return inner_wrapper\n\n    def skip_traceback_internals(tb):\n        filename = (lambda: 0).__code__.co_filename\n        original = tb\n        while tb and tb.tb_frame.f_code.co_filename == filename:\n            tb = tb.tb_next\n        if tb:\n            return tb\n        else:\n            return original\n\n    class Grist:\n        def __init__(self):\n            self.raw = ComlinkProxy(js.Comlink.wrap(js).grist)\n        \n        def on_records(self, callback):\n            @wrap_with_display\n            async def wrapper(displayer, _, *rest):\n                records = await self.raw.fetchSelectedTable(keepEncoded=True)\n                return callback(displayer, records, *rest)\n\n            @run_async\n            async def run():\n                await wrapper(None)\n                await self.raw.onRecords(wrapper)\n    \n        def on_record(self, callback):\n            @wrap_with_display\n            async def wrapper(displayer, record, *rest):\n                if record:\n                    record = await self.raw.fetchSelectedRecord(record['id'], keepEncoded=True)\n                    return callback(displayer, record, *rest)\n            \n            @run_async\n            async def run():\n                await wrapper(await self.raw.getCurrentRecord())\n                await self.raw.onRecord(wrapper)\n    \n    \n    return Grist() \n\n\ngrist = __make_grist_api()\n`;\n\nexport default code;\n"],"names":[],"sourceRoot":""}