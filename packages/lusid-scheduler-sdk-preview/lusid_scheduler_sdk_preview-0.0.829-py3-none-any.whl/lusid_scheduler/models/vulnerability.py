# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.0.829
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_scheduler.configuration import Configuration


class Vulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'name': 'str',
        'package': 'str',
        'version': 'str',
        'fix_version': 'str',
        'severity': 'str',
        'description': 'str',
        'links': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'package': 'package',
        'version': 'version',
        'fix_version': 'fixVersion',
        'severity': 'severity',
        'description': 'description',
        'links': 'links'
    }

    required_map = {
        'name': 'optional',
        'package': 'optional',
        'version': 'optional',
        'fix_version': 'optional',
        'severity': 'optional',
        'description': 'optional',
        'links': 'optional'
    }

    def __init__(self, name=None, package=None, version=None, fix_version=None, severity=None, description=None, links=None, local_vars_configuration=None):  # noqa: E501
        """Vulnerability - a model defined in OpenAPI"
        
        :param name:  The name of the vulnerability
        :type name: str
        :param package:  The package that contains the vulnerability
        :type package: str
        :param version:  The version of the package
        :type version: str
        :param fix_version:  The version that has a fix for the vulnerability (if known)
        :type fix_version: str
        :param severity:  The severity of the vulnerability
        :type severity: str
        :param description:  The description of the vulnerability
        :type description: str
        :param links:  Relevant links for the vulnerability
        :type links: list[str]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._package = None
        self._version = None
        self._fix_version = None
        self._severity = None
        self._description = None
        self._links = None
        self.discriminator = None

        self.name = name
        self.package = package
        self.version = version
        self.fix_version = fix_version
        self.severity = severity
        self.description = description
        self.links = links

    @property
    def name(self):
        """Gets the name of this Vulnerability.  # noqa: E501

        The name of the vulnerability  # noqa: E501

        :return: The name of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vulnerability.

        The name of the vulnerability  # noqa: E501

        :param name: The name of this Vulnerability.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def package(self):
        """Gets the package of this Vulnerability.  # noqa: E501

        The package that contains the vulnerability  # noqa: E501

        :return: The package of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Vulnerability.

        The package that contains the vulnerability  # noqa: E501

        :param package: The package of this Vulnerability.  # noqa: E501
        :type package: str
        """

        self._package = package

    @property
    def version(self):
        """Gets the version of this Vulnerability.  # noqa: E501

        The version of the package  # noqa: E501

        :return: The version of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Vulnerability.

        The version of the package  # noqa: E501

        :param version: The version of this Vulnerability.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def fix_version(self):
        """Gets the fix_version of this Vulnerability.  # noqa: E501

        The version that has a fix for the vulnerability (if known)  # noqa: E501

        :return: The fix_version of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._fix_version

    @fix_version.setter
    def fix_version(self, fix_version):
        """Sets the fix_version of this Vulnerability.

        The version that has a fix for the vulnerability (if known)  # noqa: E501

        :param fix_version: The fix_version of this Vulnerability.  # noqa: E501
        :type fix_version: str
        """

        self._fix_version = fix_version

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.  # noqa: E501

        The severity of the vulnerability  # noqa: E501

        :return: The severity of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.

        The severity of the vulnerability  # noqa: E501

        :param severity: The severity of this Vulnerability.  # noqa: E501
        :type severity: str
        """

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this Vulnerability.  # noqa: E501

        The description of the vulnerability  # noqa: E501

        :return: The description of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vulnerability.

        The description of the vulnerability  # noqa: E501

        :param description: The description of this Vulnerability.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this Vulnerability.  # noqa: E501

        Relevant links for the vulnerability  # noqa: E501

        :return: The links of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Vulnerability.

        Relevant links for the vulnerability  # noqa: E501

        :param links: The links of this Vulnerability.  # noqa: E501
        :type links: list[str]
        """

        self._links = links

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vulnerability):
            return True

        return self.to_dict() != other.to_dict()
