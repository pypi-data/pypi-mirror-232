# Generated by Django 2.2.28 on 2023-05-26 13:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djangoldp.fields
from djangoldp_account.models import LDPUser

from ..permissions import BookletContributorPermissions
from ..models import BookletContributor, Booklet

existing_contributors = []
existing_owners = []

def dictfetchall(cursor):
    "Return all rows from a cursor as a dict"
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row))
        for row in cursor.fetchall()
    ]

def extract_contributors(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    global existing_contributors
    global existing_owners
    cursor = schema_editor.connection.cursor()

    cursor.execute("SELECT * FROM djangoldp_needle_booklet_contributors")
    existing_contributors = dictfetchall(cursor)

    cursor.execute("SELECT * FROM djangoldp_needle_booklet_owners")
    existing_owners = dictfetchall(cursor)


def update_contributors(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    global existing_contributors
    global existing_owners

    for existing_contributor in existing_contributors:
        contributor = BookletContributor(
            user=LDPUser.objects.get(pk=existing_contributor['ldpuser_id']),
            booklet=Booklet.objects.get(pk=existing_contributor['booklet_id']),
            role=BookletContributor.ROLE_CONTRIBUTOR
        )
        contributor.save()

    for existing_owner in existing_owners:
        user = LDPUser.objects.get(pk=existing_owner['ldpuser_id'])
        booklet = Booklet.objects.get(pk=existing_owner['booklet_id'])
        try:
            existing_contributor = BookletContributor.objects.filter(user=user, booklet=booklet).get()
            existing_contributor.role = BookletContributor.ROLE_OWNER
            existing_contributor.save()
        except BookletContributor.DoesNotExist:
            owner = BookletContributor(
                user=LDPUser.objects.get(pk=existing_owner['ldpuser_id']),
                booklet=Booklet.objects.get(pk=existing_owner['booklet_id']),
                role=BookletContributor.ROLE_OWNER
            )
            owner.save()


class Migration(migrations.Migration):



    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('djangoldp_needle', '0035_auto_20230525_1351'),
    ]

    operations = [
        migrations.RunPython(extract_contributors),
        migrations.RemoveField(
            model_name='booklet',
            name='contributors',
        ),
        migrations.RemoveField(
            model_name='booklet',
            name='owners',
        ),
        migrations.CreateModel(
            name='BookletContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urlid', djangoldp.fields.LDPUrlField(blank=True, null=True, unique=True)),
                ('is_backlink', models.BooleanField(default=False, help_text='set automatically to indicate the Model is a backlink')),
                ('allow_create_backlink', models.BooleanField(default=True, help_text='set to False to disable backlink creation after Model save')),
                ('role', models.CharField(choices=[('ROLE_VISIT', 'ROLE_VISIT'), ('ROLE_CONTRIBUTOR', 'ROLE_CONTRIBUTOR'), ('ROLE_MODERATOR', 'ROLE_MODERATOR'), ('ROLE_ADMIN', 'ROLE_ADMIN'), ('ROLE_OWNER', 'ROLE_OWNER')], default='ROLE_VISIT', max_length=160)),
                ('booklet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributors', to='djangoldp_needle.Booklet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booklet_contributor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'default_permissions': ['add', 'change', 'delete', 'view', 'control'],
                'rdf_type': 'hd:annotation',
                'permission_classes': [BookletContributorPermissions],
                'depth': 0,
                'anonymous_perms': [],
                'authenticated_perms': [],
                'owner_perms': [],
            },
        ),
        migrations.AddConstraint(
            model_name='bookletcontributor',
            constraint=models.UniqueConstraint(fields=('user', 'booklet'), name='unique_booklet_contributor'),
        ),
        migrations.RunPython(update_contributors),
    ]
