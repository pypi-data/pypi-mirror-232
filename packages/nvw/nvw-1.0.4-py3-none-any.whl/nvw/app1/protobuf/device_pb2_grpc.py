# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import device_pb2 as device__pb2


class ConfigStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
            '/Config/get',
            request_serializer=device__pb2.Device.SerializeToString,
            response_deserializer=device__pb2.ConfigText.FromString,
        )
        self.set = channel.unary_unary(
            '/Config/set',
            request_serializer=device__pb2.ConfigRequest.SerializeToString,
            response_deserializer=device__pb2.Result.FromString,
        )
        self.compare = channel.unary_unary(
            '/Config/compare',
            request_serializer=device__pb2.ConfigRequest.SerializeToString,
            response_deserializer=device__pb2.Result.FromString,
        )


class ConfigServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'get': grpc.unary_unary_rpc_method_handler(
            servicer.get,
            request_deserializer=device__pb2.Device.FromString,
            response_serializer=device__pb2.ConfigText.SerializeToString,
        ),
        'set': grpc.unary_unary_rpc_method_handler(
            servicer.set,
            request_deserializer=device__pb2.ConfigRequest.FromString,
            response_serializer=device__pb2.Result.SerializeToString,
        ),
        'compare': grpc.unary_unary_rpc_method_handler(
            servicer.compare,
            request_deserializer=device__pb2.ConfigRequest.FromString,
            response_serializer=device__pb2.Result.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Config', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Config(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Config/get',
                                             device__pb2.Device.SerializeToString,
                                             device__pb2.ConfigText.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Config/set',
                                             device__pb2.ConfigRequest.SerializeToString,
                                             device__pb2.Result.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compare(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Config/compare',
                                             device__pb2.ConfigRequest.SerializeToString,
                                             device__pb2.Result.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CommandStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.execute = channel.unary_unary(
            '/Command/execute',
            request_serializer=device__pb2.CommandRequest.SerializeToString,
            response_deserializer=device__pb2.Result.FromString,
        )


class CommandServicer(object):
    """Missing associated documentation comment in .proto file."""

    def execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'execute': grpc.unary_unary_rpc_method_handler(
            servicer.execute,
            request_deserializer=device__pb2.CommandRequest.FromString,
            response_serializer=device__pb2.Result.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Command', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class Command(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def execute(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Command/execute',
                                             device__pb2.CommandRequest.SerializeToString,
                                             device__pb2.Result.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
