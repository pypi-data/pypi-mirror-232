[tox]
minversion = 3.24
envlist =
    default
    build
    clean
    dockerbuild
    dockerpublish
    lint
    publish
    test
isolated_build = True


[testenv:{default,lint}]
description = Perform static analysis and style checks
skip_install = True
deps = pre-commit
passenv =
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run --all-files {posargs}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:{dockerbuild,dockerpublish}]
description =
    dockerbuild: Build development Docker images.
    dockerpublish: Publish freshly built Docker images.
changedir = {toxinidir}
deps =
    dockerbuild: build[virtualenv]
    dockerpublish: build[virtualenv]
passenv =
    SETUPTOOLS_*
allowlist_externals =
    {toxinidir}/docker/build.sh
    {toxinidir}/docker/publish.sh
commands_pre =
    ## Pre-build
    # Build the python package before building the docker image
    dockerbuild: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    dockerbuild: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    dockerbuild: python -m build
    ## Pre-publish
    # Build the python package before building the docker image
    dockerpublish: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    dockerpublish: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    dockerpublish: python -m build
    # Build the docker image
    dockerpublish: {toxinidir}/docker/build.sh
commands =
    dockerbuild: {toxinidir}/docker/build.sh {posargs}
    dockerpublish: {toxinidir}/docker/publish.sh {posargs}


[testenv:{publish,test-publish}]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    publish: python -m twine check dist/*
    publish: python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:pypi}} dist/*
    test-publish: python -m twine check dist/*
    test-publish: python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
