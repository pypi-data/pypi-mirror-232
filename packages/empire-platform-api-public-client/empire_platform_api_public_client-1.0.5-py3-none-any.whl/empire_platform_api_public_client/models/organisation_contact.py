# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api)   # noqa: E501

    The version of the OpenAPI document: 1.0.5
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr, validator

class OrganisationContact(BaseModel):
    """
    OrganisationContact
    """
    name: StrictStr = Field(...)
    phone: constr(strict=True) = Field(...)
    email: constr(strict=True) = Field(...)
    __properties = ["name", "phone", "email"]

    # @validator('phone')
    def phone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\+\d{10,13}$", value):
            raise ValueError(r"must validate the regular expression /^\+\d{10,13}$/")
        return value

    # @validator('email')
    def email_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w-\.]+@([\w-]+\.)+[\w-]{2,6}$", value):
            raise ValueError(r"must validate the regular expression /^[\w-\.]+@([\w-]+\.)+[\w-]{2,6}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganisationContact:
        """Create an instance of OrganisationContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganisationContact:
        """Create an instance of OrganisationContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganisationContact.parse_obj(obj)

        _obj = OrganisationContact.parse_obj({
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "email": obj.get("email")
        })
        return _obj

