from pathlib import Path
import pytest
import yaml
from flask_security import login_user
from invenio_access import current_access, ActionUsers
from flask_security.utils import hash_password
from invenio_accounts.proxies import current_datastore
from invenio_accounts.testutils import login_user_via_session
from invenio_app.factory import create_api
from invenio_records_resources.services.uow import UnitOfWork, RecordCommitOp
import os

from {{ vars.proxy.module }} import {{ vars.service.proxy }}
{{ vars.record.class|generate_import }}

@pytest.fixture
def record_service():
    return current_service

@pytest.fixture(scope="function")
def sample_metadata_list():
    data_path = f"{Path(__file__).parent.parent}/{{ vars.sample.file }}"
    docs = list(yaml.load_all(open(data_path), Loader=yaml.SafeLoader))
    return docs

@pytest.fixture()
def input_data(sample_metadata_list):
    return sample_metadata_list[0]


@pytest.fixture(scope="module")
def create_app(instance_path, entry_points):
    """Application factory fixture."""
    return create_api


@pytest.fixture(scope="module")
def app_config(app_config):
    """Mimic an instance's configuration."""
    app_config["JSONSCHEMAS_HOST"] = "localhost"
    app_config[
        "RECORDS_REFRESOLVER_CLS"
    ] = "invenio_records.resolver.InvenioRefResolver"
    app_config[
        "RECORDS_REFRESOLVER_STORE"
    ] = "invenio_jsonschemas.proxies.current_refresolver_store"
    app_config["RATELIMIT_AUTHENTICATED_USER"] = "200 per second"
    app_config["SEARCH_HOSTS"] = [
        {
            'host': os.environ.get('OPENSEARCH_HOST', 'localhost'),
            'port': os.environ.get('OPENSEARCH_PORT', '9200'),
        }
    ]
    # disable redis cache
    app_config["CACHE_TYPE"] = "SimpleCache"  # Flask-Caching related configs
    app_config["CACHE_DEFAULT_TIMEOUT"] = 300
    return app_config


@pytest.fixture(scope="function")
def sample_record(app, db, input_data):
    # record = {{ vars.service.proxy }}.create(system_identity, sample_data[0])
    # return record
    with UnitOfWork(db.session) as uow:
        record = {{ vars.record.class|base_name }}.create(input_data)
        uow.register(RecordCommitOp(record, {{ vars.service.proxy }}.indexer, True))
        uow.commit()
        return record


@pytest.fixture(scope="function")
def sample_records(app, db, sample_metadata_list):
    # record = {{ vars.service.proxy }}.create(system_identity, sample_data[0])
    # return record
    with UnitOfWork(db.session) as uow:
        records = []
        for sample_metadata in sample_metadata_list:
            record = {{ vars.record.class|base_name }}.create(sample_metadata)
            uow.register(RecordCommitOp(record, {{ vars.service.proxy }}.indexer, True))
            records.append(record)
        uow.commit()
        return records


@pytest.fixture()
def user(app, db):
    """Create example user."""
    with db.session.begin_nested():
        datastore = app.extensions["security"].datastore
        _user = datastore.create_user(
            email="info@inveniosoftware.org",
            password=hash_password("password"),
            active=True,
        )
    db.session.commit()
    return _user


@pytest.fixture()
def role(app, db):
    """Create some roles."""
    with db.session.begin_nested():
        datastore = app.extensions["security"].datastore
        role = datastore.create_role(name="admin", description="admin role")

    db.session.commit()
    return role


@pytest.fixture()
def client_with_credentials(db, client, user, role, sample_metadata_list):
    """Log in a user to the client."""

    current_datastore.add_role_to_user(user, role)
    action = current_access.actions["superuser-access"]
    db.session.add(ActionUsers.allow(action, user_id=user.id))

    login_user(user, remember=True)
    login_user_via_session(client, email=user.email)

    return client

{{ vars.tests.extra_code }}