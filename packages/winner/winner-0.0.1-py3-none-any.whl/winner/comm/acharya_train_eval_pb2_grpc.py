# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# import acharya_train_eval_pb2 as acharya__train__eval__pb2
from . import acharya_train_eval_pb2 as acharya__train__eval__pb2


class EvalStub(object):
    """Interface to perform evaluation of single data or data stream.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEval = channel.unary_unary(
                '/comm.Eval/GetEval',
                request_serializer=acharya__train__eval__pb2.Datum.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.EvalOutput.FromString,
                )


class EvalServicer(object):
    """Interface to perform evaluation of single data or data stream.
    """

    def GetEval(self, request, context):
        """Get eval on a single data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEval,
                    request_deserializer=acharya__train__eval__pb2.Datum.FromString,
                    response_serializer=acharya__train__eval__pb2.EvalOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comm.Eval', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Eval(object):
    """Interface to perform evaluation of single data or data stream.
    """

    @staticmethod
    def GetEval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.Eval/GetEval',
            acharya__train__eval__pb2.Datum.SerializeToString,
            acharya__train__eval__pb2.EvalOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrainStub(object):
    """Interface to perform training.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainNER = channel.unary_unary(
                '/comm.Train/TrainNER',
                request_serializer=acharya__train__eval__pb2.NERTrain.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.NEROutput.FromString,
                )
        self.TrainingRunningStatus = channel.unary_unary(
                '/comm.Train/TrainingRunningStatus',
                request_serializer=acharya__train__eval__pb2.ProbeTrain.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.TrainingRunningOutput.FromString,
                )
        self.TrainingEvaluation = channel.unary_unary(
                '/comm.Train/TrainingEvaluation',
                request_serializer=acharya__train__eval__pb2.Data_Collection.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.TrainingOutput.FromString,
                )
        self.TrainWordEmbeddings = channel.unary_unary(
                '/comm.Train/TrainWordEmbeddings',
                request_serializer=acharya__train__eval__pb2.Vocabulary.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.NEROutput.FromString,
                )


class TrainServicer(object):
    """Interface to perform training.
    """

    def TrainNER(self, request, context):
        """Train NER algorithms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainingRunningStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainingEvaluation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainWordEmbeddings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainNER': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainNER,
                    request_deserializer=acharya__train__eval__pb2.NERTrain.FromString,
                    response_serializer=acharya__train__eval__pb2.NEROutput.SerializeToString,
            ),
            'TrainingRunningStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainingRunningStatus,
                    request_deserializer=acharya__train__eval__pb2.ProbeTrain.FromString,
                    response_serializer=acharya__train__eval__pb2.TrainingRunningOutput.SerializeToString,
            ),
            'TrainingEvaluation': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainingEvaluation,
                    request_deserializer=acharya__train__eval__pb2.Data_Collection.FromString,
                    response_serializer=acharya__train__eval__pb2.TrainingOutput.SerializeToString,
            ),
            'TrainWordEmbeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainWordEmbeddings,
                    request_deserializer=acharya__train__eval__pb2.Vocabulary.FromString,
                    response_serializer=acharya__train__eval__pb2.NEROutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comm.Train', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Train(object):
    """Interface to perform training.
    """

    @staticmethod
    def TrainNER(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.Train/TrainNER',
            acharya__train__eval__pb2.NERTrain.SerializeToString,
            acharya__train__eval__pb2.NEROutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainingRunningStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.Train/TrainingRunningStatus',
            acharya__train__eval__pb2.ProbeTrain.SerializeToString,
            acharya__train__eval__pb2.TrainingRunningOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainingEvaluation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.Train/TrainingEvaluation',
            acharya__train__eval__pb2.Data_Collection.SerializeToString,
            acharya__train__eval__pb2.TrainingOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainWordEmbeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.Train/TrainWordEmbeddings',
            acharya__train__eval__pb2.Vocabulary.SerializeToString,
            acharya__train__eval__pb2.NEROutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WordEmbeddingsStub(object):
    """Interface to train WordEmbeddings for domain specific languages.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveToFormat = channel.unary_unary(
                '/comm.WordEmbeddings/SaveToFormat',
                request_serializer=acharya__train__eval__pb2.SaveVocabulary.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.NEROutput.FromString,
                )
        self.TrainWordEmbeddings = channel.unary_unary(
                '/comm.WordEmbeddings/TrainWordEmbeddings',
                request_serializer=acharya__train__eval__pb2.TrainVocabularyParams.SerializeToString,
                response_deserializer=acharya__train__eval__pb2.NEROutput.FromString,
                )


class WordEmbeddingsServicer(object):
    """Interface to train WordEmbeddings for domain specific languages.
    """

    def SaveToFormat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainWordEmbeddings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WordEmbeddingsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveToFormat': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveToFormat,
                    request_deserializer=acharya__train__eval__pb2.SaveVocabulary.FromString,
                    response_serializer=acharya__train__eval__pb2.NEROutput.SerializeToString,
            ),
            'TrainWordEmbeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainWordEmbeddings,
                    request_deserializer=acharya__train__eval__pb2.TrainVocabularyParams.FromString,
                    response_serializer=acharya__train__eval__pb2.NEROutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comm.WordEmbeddings', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WordEmbeddings(object):
    """Interface to train WordEmbeddings for domain specific languages.
    """

    @staticmethod
    def SaveToFormat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.WordEmbeddings/SaveToFormat',
            acharya__train__eval__pb2.SaveVocabulary.SerializeToString,
            acharya__train__eval__pb2.NEROutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainWordEmbeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.WordEmbeddings/TrainWordEmbeddings',
            acharya__train__eval__pb2.TrainVocabularyParams.SerializeToString,
            acharya__train__eval__pb2.NEROutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
