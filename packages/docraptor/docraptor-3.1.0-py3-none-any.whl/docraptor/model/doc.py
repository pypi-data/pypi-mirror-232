# coding: utf-8

"""
    DocRaptor

    A native client library for the DocRaptor HTML to PDF/XLS service.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from docraptor.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Doc(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    _required_property_names = set((
        'name',
        'document_type',
        'document_content',
    ))
    name = StrSchema


    class document_type(
        _SchemaEnumMaker(
            enum_value_to_name={
                "pdf": "PDF",
                "xls": "XLS",
                "xlsx": "XLSX",
            }
        ),
        StrSchema
    ):

        @classmethod
        @property
        def PDF(cls):
            return cls("pdf")

        @classmethod
        @property
        def XLS(cls):
            return cls("xls")

        @classmethod
        @property
        def XLSX(cls):
            return cls("xlsx")
    document_content = StrSchema
    document_url = StrSchema
    test = BoolSchema
    pipeline = StrSchema


    class strict(
        _SchemaEnumMaker(
            enum_value_to_name={
                "none": "NONE",
                "html": "HTML",
            }
        ),
        StrSchema
    ):

        @classmethod
        @property
        def NONE(cls):
            return cls("none")

        @classmethod
        @property
        def HTML(cls):
            return cls("html")
    ignore_resource_errors = BoolSchema
    ignore_console_messages = BoolSchema
    tag = StrSchema
    help = BoolSchema
    javascript = BoolSchema
    referrer = StrSchema
    callback_url = StrSchema
    hosted_download_limit = IntSchema
    hosted_expires_at = StrSchema

    @classmethod
    @property
    def prince_options(cls) -> typing.Type['PrinceOptions']:
        return PrinceOptions


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: name,
        document_type: document_type,
        document_content: document_content,
        document_url: typing.Union[document_url, Unset] = unset,
        test: typing.Union[test, Unset] = unset,
        pipeline: typing.Union[pipeline, Unset] = unset,
        strict: typing.Union[strict, Unset] = unset,
        ignore_resource_errors: typing.Union[ignore_resource_errors, Unset] = unset,
        ignore_console_messages: typing.Union[ignore_console_messages, Unset] = unset,
        tag: typing.Union[tag, Unset] = unset,
        help: typing.Union[help, Unset] = unset,
        javascript: typing.Union[javascript, Unset] = unset,
        referrer: typing.Union[referrer, Unset] = unset,
        callback_url: typing.Union[callback_url, Unset] = unset,
        hosted_download_limit: typing.Union[hosted_download_limit, Unset] = unset,
        hosted_expires_at: typing.Union[hosted_expires_at, Unset] = unset,
        prince_options: typing.Union['PrinceOptions', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Doc':
        return super().__new__(
            cls,
            *args,
            name=name,
            document_type=document_type,
            document_content=document_content,
            document_url=document_url,
            test=test,
            pipeline=pipeline,
            strict=strict,
            ignore_resource_errors=ignore_resource_errors,
            ignore_console_messages=ignore_console_messages,
            tag=tag,
            help=help,
            javascript=javascript,
            referrer=referrer,
            callback_url=callback_url,
            hosted_download_limit=hosted_download_limit,
            hosted_expires_at=hosted_expires_at,
            prince_options=prince_options,
            _configuration=_configuration,
            **kwargs,
        )

from docraptor.model.prince_options import PrinceOptions
