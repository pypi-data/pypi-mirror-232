from .exception import EXCEPTION as EXCEPTION
from abc import ABC
from typing import Any, Sequence

class TypeSafeGetter:
    @classmethod
    def get_by_keys(cls, _dict: dict, _keys: Sequence, _default: Any | None = ..., _deepcopy: bool = ...) -> Any: ...
    @classmethod
    def keys(cls) -> tuple: ...
    @classmethod
    def get(cls, *_key: Any, _deepcopy: bool = ...) -> Any: ...
    @classmethod
    def try_get(cls, *_key: Any, _default: Any | None = ..., _deepcopy: bool = ...) -> Any | None: ...
    @classmethod
    def exists_not_none(cls, *_key: Any) -> bool: ...
    @classmethod
    def get_str(cls, *_key: Any) -> str: ...
    @classmethod
    def try_get_str(cls, *_key: Any) -> str | None: ...
    @classmethod
    def get_int(cls, *_key: Any) -> int: ...
    @classmethod
    def try_get_int(cls, *_key: Any) -> int | None: ...
    @classmethod
    def get_bool(cls, *_key: Any) -> bool: ...
    @classmethod
    def try_get_bool(cls, *_key: Any) -> bool | None: ...
    @classmethod
    def get_dict(cls, *_key: Any) -> dict: ...
    @classmethod
    def get_dict_ref(cls, *_key: Any) -> dict: ...
    @classmethod
    def try_get_dict(cls, *_key: Any) -> dict | None: ...
    @classmethod
    def get_list(cls, *_key: Any) -> list: ...
    @classmethod
    def try_get_list(cls, *_key: Any) -> list | None: ...
    @classmethod
    def get_tuple(cls, *_key: Any) -> tuple: ...
    @classmethod
    def try_get_tuple(cls, *_key: Any) -> tuple | None: ...

class TypeSafeSetter:
    @staticmethod
    def set_by_keys(_dict: dict, _keys: Sequence, value: object, assumeKeyExists: bool = ...) -> None: ...
    @classmethod
    def set(cls, *_key: str, value: Any, assumeKeyExists: bool = ...) -> None: ...
    @classmethod
    def clear(cls) -> None: ...

class Hidable(ABC):
    def __init__(self, visible: bool = ...) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_hidden(self) -> bool: ...
