from .ui import *
import pyvns
from _typeshed import Incomplete

class DialogNode(Button):
    has_been_displayed: bool
    def __init__(self, key_name: str, font_size: int, next_keys: list[str], tag: str = ...) -> None: ...
    @property
    def next_keys(self) -> tuple[str, ...]: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class DialogNavigationWindow(AbstractFrame):
    def __init__(self, x: int_f, y: int_f, width: int_f, height: int_f, tag: str = ...) -> None: ...
    def add_node(self, key: str, next_keys: list[str]) -> None: ...
    def read_all(self, dialogs_data: dict) -> None: ...
    def update_selected(self, new_current_select: str) -> None: ...
    def get_selected_key(self) -> str: ...

class AbstractDialogBox(Hidable, metaclass=ABCMeta):
    def __init__(self) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...
    def update(self, narrator: str, contents: list) -> None: ...

class EditableDialogBox(AbstractDialogBox):
    def __init__(self, fontSize: int) -> None: ...
    def any_changed_was_made(self) -> bool: ...
    def get_narrator(self) -> str: ...
    def get_content(self) -> list: ...
    def update(self, narrator: str | None, contents: list | None) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class DialogBox(AbstractDialogBox):
    class __NextPageIndicatorIcon:
        def __init__(self) -> None: ...
        def draw_to(self, _surface: ImageSurface, _x: int, _y: int, _width: int) -> None: ...
    FONT: Incomplete
    def __init__(self, fontSize: int) -> None: ...
    def reset(self) -> None: ...
    def is_all_played(self) -> bool: ...
    def play_all(self) -> None: ...
    def update(self, narrator: str | None, contents: list | None, forceNotResizeDialogueBox: bool = ...) -> None: ...
    def get_sound_volume(self) -> float: ...
    def set_sound_volume(self, volume: number) -> None: ...
    def set_playing_automatically(self, value: bool) -> None: ...
    def is_update_needed(self) -> bool: ...
    @staticmethod
    def stop_playing_text_sound() -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class ScriptCompiler(pyvns.Compiler):
    @staticmethod
    def extract_info_from_path(_path: str) -> tuple[int, str]: ...

class AbstractVisualNovelCharacterImageFilterEffect(ABC):
    def render(self, characterImage: StaticImage, _surface: ImageSurface, is_silent: bool) -> None: ...

class VisualNovelCharacterImageManager:
    FILTERS: Final[dict[str, AbstractVisualNovelCharacterImageFilterEffect]]
    DARKNESS: int
    dev_mode: bool
    character_get_click: str | None
    @classmethod
    def reset(cls) -> None: ...
    @classmethod
    def update(cls, characterNameList: Sequence[str] | None) -> None: ...
    @classmethod
    def draw(cls, _surface: ImageSurface) -> None: ...

class AbstractVisualNovelSystem(AbstractGameSystem, metaclass=ABCMeta):
    def __init__(self) -> None: ...
    def get_dialog_folder_location(self) -> str: ...
    def get_dialog_file_location(self, lang: str) -> str: ...
    def get_data_file_path(self) -> str: ...
    def get_default_lang(self) -> str: ...
    def generate_a_new_recommended_key(self, index: int = ...) -> str: ...
    def load_progress(self, _data: dict) -> None: ...
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = ..., dialogId: str = ...) -> None: ...
    def update_language(self) -> None: ...
    def stop(self) -> None: ...
    def display_background_image(self, _surface: ImageSurface) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class VisualNovelSystem(AbstractVisualNovelSystem, PauseMenuModuleForGameSystem):
    def __init__(self) -> None: ...
    def disable_basic_features(self) -> None: ...
    def enable_basic_features(self) -> None: ...
    def load_progress(self, _data: dict) -> None: ...
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = ..., dialogId: str = ...) -> None: ...
    def update_language(self) -> None: ...
    def continue_scene(self, dialog_id: str) -> None: ...
    def play_cutscene(self, _surface: ImageSurface, fade_out_in_ms: int = ...) -> None: ...
    def display_background_image(self, _surface: ImageSurface) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class DialogEditor(AbstractVisualNovelSystem):
    def __init__(self) -> None: ...
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = ..., dialogId: str = ...) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

def create_new_project(dir_path: str, config_type: str = ...) -> None: ...
