# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *

class V1SLURMJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'command': 'str',
        'created_at': 'datetime',
        'id': 'str',
        'phase': 'V1SLURMJobStatus',
        'project_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'command': 'command',
        'created_at': 'createdAt',
        'id': 'id',
        'phase': 'phase',
        'project_id': 'projectId',
        'updated_at': 'updatedAt'
    }

    def __init__(self, cloudspace_id: 'str' =None, cluster_id: 'str' =None, command: 'str' =None, created_at: 'datetime' =None, id: 'str' =None, phase: 'V1SLURMJobStatus' =None, project_id: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1SLURMJob - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._cluster_id = None
        self._command = None
        self._created_at = None
        self._id = None
        self._phase = None
        self._project_id = None
        self._updated_at = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if command is not None:
            self.command = command
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if phase is not None:
            self.phase = phase
        if project_id is not None:
            self.project_id = project_id
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1SLURMJob.  # noqa: E501


        :return: The cloudspace_id of this V1SLURMJob.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1SLURMJob.


        :param cloudspace_id: The cloudspace_id of this V1SLURMJob.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1SLURMJob.  # noqa: E501


        :return: The cluster_id of this V1SLURMJob.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1SLURMJob.


        :param cluster_id: The cluster_id of this V1SLURMJob.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def command(self) -> 'str':
        """Gets the command of this V1SLURMJob.  # noqa: E501


        :return: The command of this V1SLURMJob.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this V1SLURMJob.


        :param command: The command of this V1SLURMJob.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1SLURMJob.  # noqa: E501


        :return: The created_at of this V1SLURMJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1SLURMJob.


        :param created_at: The created_at of this V1SLURMJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1SLURMJob.  # noqa: E501


        :return: The id of this V1SLURMJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1SLURMJob.


        :param id: The id of this V1SLURMJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def phase(self) -> 'V1SLURMJobStatus':
        """Gets the phase of this V1SLURMJob.  # noqa: E501


        :return: The phase of this V1SLURMJob.  # noqa: E501
        :rtype: V1SLURMJobStatus
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1SLURMJobStatus'):
        """Sets the phase of this V1SLURMJob.


        :param phase: The phase of this V1SLURMJob.  # noqa: E501
        :type: V1SLURMJobStatus
        """

        self._phase = phase

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1SLURMJob.  # noqa: E501


        :return: The project_id of this V1SLURMJob.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1SLURMJob.


        :param project_id: The project_id of this V1SLURMJob.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1SLURMJob.  # noqa: E501


        :return: The updated_at of this V1SLURMJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1SLURMJob.


        :param updated_at: The updated_at of this V1SLURMJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1SLURMJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1SLURMJob') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SLURMJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1SLURMJob') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
