# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *

class SLURMJobsAgentServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def s_lurm_jobs_agent_service_get_agent_slurm_job(self, id: 'str', **kwargs) -> 'V1SLURMJob':  # noqa: E501
        """GetAgentSLURMJob is used to get a specific SLURM job for a SLURM agent. For getting SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_get_agent_slurm_job(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SLURMJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_lurm_jobs_agent_service_get_agent_slurm_job_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_lurm_jobs_agent_service_get_agent_slurm_job_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def s_lurm_jobs_agent_service_get_agent_slurm_job_with_http_info(self, id: 'str', **kwargs) -> 'V1SLURMJob':  # noqa: E501
        """GetAgentSLURMJob is used to get a specific SLURM job for a SLURM agent. For getting SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_get_agent_slurm_job_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SLURMJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_lurm_jobs_agent_service_get_agent_slurm_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_lurm_jobs_agent_service_get_agent_slurm_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/slurm/jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SLURMJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url(self, body: 'object', id: 'str', **kwargs) -> 'V1GetAgentSLURMJobLogsUploadPresignedURLResponse':  # noqa: E501
        """s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str id: (required)
        :return: V1GetAgentSLURMJobLogsUploadPresignedURLResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url_with_http_info(self, body: 'object', id: 'str', **kwargs) -> 'V1GetAgentSLURMJobLogsUploadPresignedURLResponse':  # noqa: E501
        """s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str id: (required)
        :return: V1GetAgentSLURMJobLogsUploadPresignedURLResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_lurm_jobs_agent_service_get_agent_slurm_job_logs_upload_presigned_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/slurm/jobs/{id}/logs-presigned-url', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetAgentSLURMJobLogsUploadPresignedURLResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_lurm_jobs_agent_service_list_agent_slurm_jobs(self, **kwargs) -> 'V1ListAgentSLURMJobsResponse':  # noqa: E501
        """ListAgentSLURMJobs is used to list all SLURM jobs for a SLURM agent. For listing SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_list_agent_slurm_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] phase_in:
        :param list[str] phase_not_in:
        :return: V1ListAgentSLURMJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_lurm_jobs_agent_service_list_agent_slurm_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.s_lurm_jobs_agent_service_list_agent_slurm_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def s_lurm_jobs_agent_service_list_agent_slurm_jobs_with_http_info(self, **kwargs) -> 'V1ListAgentSLURMJobsResponse':  # noqa: E501
        """ListAgentSLURMJobs is used to list all SLURM jobs for a SLURM agent. For listing SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_list_agent_slurm_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] phase_in:
        :param list[str] phase_not_in:
        :return: V1ListAgentSLURMJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phase_in', 'phase_not_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_lurm_jobs_agent_service_list_agent_slurm_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phase_in' in params:
            query_params.append(('phaseIn', params['phase_in']))  # noqa: E501
            collection_formats['phaseIn'] = 'multi'  # noqa: E501
        if 'phase_not_in' in params:
            query_params.append(('phaseNotIn', params['phase_not_in']))  # noqa: E501
            collection_formats['phaseNotIn'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/slurm/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListAgentSLURMJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_lurm_jobs_agent_service_update_agent_slurm_job(self, body: 'JobsIdBody1', id: 'str', **kwargs) -> 'V1SLURMJob':  # noqa: E501
        """UpdateAgentSLURMJob is used to update a specific SLURM job for a SLURM agent. For updating SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_update_agent_slurm_job(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsIdBody1 body: (required)
        :param str id: (required)
        :return: V1SLURMJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_lurm_jobs_agent_service_update_agent_slurm_job_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_lurm_jobs_agent_service_update_agent_slurm_job_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def s_lurm_jobs_agent_service_update_agent_slurm_job_with_http_info(self, body: 'JobsIdBody1', id: 'str', **kwargs) -> 'V1SLURMJob':  # noqa: E501
        """UpdateAgentSLURMJob is used to update a specific SLURM job for a SLURM agent. For updating SLURM Jobs for a user, please use the SLURMJobsUserService.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_lurm_jobs_agent_service_update_agent_slurm_job_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsIdBody1 body: (required)
        :param str id: (required)
        :return: V1SLURMJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_lurm_jobs_agent_service_update_agent_slurm_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `s_lurm_jobs_agent_service_update_agent_slurm_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_lurm_jobs_agent_service_update_agent_slurm_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/slurm/jobs/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SLURMJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
