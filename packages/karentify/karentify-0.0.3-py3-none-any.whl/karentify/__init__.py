from random import random, choice


PUNCTUATION_TABLE = {
    '.': '!!!',
    '!': '!!!',
    '?': '?!?'}
TRANS_TABLE = str.maketrans(PUNCTUATION_TABLE)


# FIXME: this would probably better be generated by combining emotions and
# actions, but I lack the english to find a proper pattern that works.
REACTIONS = ['inaudible', 'incomprehensible', 'enraged hairflip',
             'angry fingerpointing', 'attention seeking room scan',
             'fake-storming-out double turn', 'angry foot stomp',
             'hammer punching the counter', 'judging up-down scan',
             'glaring at by-stander', 'offended lip pressing',
             'nervous eye twitching', 'condescending stare']
ACTING_OUT_CHANCE = 1 / 3

tiktok = None


def karentify(s, act_out=False):
    """Unleash your inner Karen on `s`.

    States `s` in a way like only a true Karen can.

    Parameters
    ----------
    s: str
        Your important message

    Returns
    -------
    str
        Returns a properly karentified message.

    Raises
    ------
    Concerns
        I'm not going to elaborate on that.

    """
    result = _karen_case(s)
    if s:
        result = _punctuation(result)
    if act_out:
        result = _act_out(result)
    return result


def _karen_case(s):
    global tiktok

    if tiktok is None:
        tiktok = s[0].islower() if s else True

    return ''.join([c.upper() if (tiktok := not tiktok) else c.lower()  # noqa: F841
                    for c in s])


def _punctuation(s):
    if s and s[-1] not in list(PUNCTUATION_TABLE.keys()):
        s += '.'

    return s.translate(TRANS_TABLE)


def _act_out(s):
    return s + (f'[{choice(REACTIONS)}]' if random() < ACTING_OUT_CHANCE else '')
