# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frequenz.api.dispatch.v1 import dispatch_pb2 as frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class MicrogridDispatchServiceStub(object):
    """Service providing operations related to dispatching microgrid components.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListMicrogridDispatches = channel.unary_unary(
                '/frequenz.api.dispatch.v1.MicrogridDispatchService/ListMicrogridDispatches',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchListRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchList.FromString,
                )
        self.CreateMicrogridDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.v1.MicrogridDispatchService/CreateMicrogridDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchCreateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateMicrogridDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.v1.MicrogridDispatchService/UpdateMicrogridDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchUpdateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetMicrogridDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.v1.MicrogridDispatchService/GetMicrogridDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchGetRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.Dispatch.FromString,
                )
        self.DeleteMicrogridDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.v1.MicrogridDispatchService/DeleteMicrogridDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class MicrogridDispatchServiceServicer(object):
    """Service providing operations related to dispatching microgrid components.
    """

    def ListMicrogridDispatches(self, request, context):
        """Returns a list of all dispatches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMicrogridDispatch(self, request, context):
        """Create a new dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMicrogridDispatch(self, request, context):
        """Update a dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMicrogridDispatch(self, request, context):
        """Get a single dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMicrogridDispatch(self, request, context):
        """Delete a given dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MicrogridDispatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListMicrogridDispatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMicrogridDispatches,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchListRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchList.SerializeToString,
            ),
            'CreateMicrogridDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMicrogridDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchCreateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateMicrogridDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMicrogridDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchUpdateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetMicrogridDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMicrogridDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchGetRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.Dispatch.SerializeToString,
            ),
            'DeleteMicrogridDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMicrogridDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frequenz.api.dispatch.v1.MicrogridDispatchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MicrogridDispatchService(object):
    """Service providing operations related to dispatching microgrid components.
    """

    @staticmethod
    def ListMicrogridDispatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.v1.MicrogridDispatchService/ListMicrogridDispatches',
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchListRequest.SerializeToString,
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMicrogridDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.v1.MicrogridDispatchService/CreateMicrogridDispatch',
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchCreateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMicrogridDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.v1.MicrogridDispatchService/UpdateMicrogridDispatch',
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchUpdateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMicrogridDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.v1.MicrogridDispatchService/GetMicrogridDispatch',
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchGetRequest.SerializeToString,
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.Dispatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMicrogridDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.v1.MicrogridDispatchService/DeleteMicrogridDispatch',
            frequenz_dot_api_dot_dispatch_dot_v1_dot_dispatch__pb2.DispatchDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
