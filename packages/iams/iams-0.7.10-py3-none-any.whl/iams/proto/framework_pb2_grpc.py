# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import framework_pb2 as framework__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class FrameworkStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.agents = channel.unary_stream(
                '/iams.servicer.Framework/agents',
                request_serializer=framework__pb2.AgentRequest.SerializeToString,
                response_deserializer=framework__pb2.AgentData.FromString,
                )
        self.booted = channel.unary_unary(
                '/iams.servicer.Framework/booted',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.renew = channel.unary_unary(
                '/iams.servicer.Framework/renew',
                request_serializer=framework__pb2.RenewRequest.SerializeToString,
                response_deserializer=framework__pb2.RenewResponse.FromString,
                )
        self.create = channel.unary_unary(
                '/iams.servicer.Framework/create',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=framework__pb2.AgentData.FromString,
                )
        self.update = channel.unary_unary(
                '/iams.servicer.Framework/update',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=framework__pb2.AgentData.FromString,
                )
        self.destroy = channel.unary_unary(
                '/iams.servicer.Framework/destroy',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.sleep = channel.unary_unary(
                '/iams.servicer.Framework/sleep',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.upgrade = channel.unary_unary(
                '/iams.servicer.Framework/upgrade',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.topology = channel.unary_unary(
                '/iams.servicer.Framework/topology',
                request_serializer=framework__pb2.Node.SerializeToString,
                response_deserializer=framework__pb2.Node.FromString,
                )
        self.wake = channel.unary_unary(
                '/iams.servicer.Framework/wake',
                request_serializer=framework__pb2.AgentData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class FrameworkServicer(object):
    """
    """

    def agents(self, request, context):
        """
        List all agents on with all of the specified filters applies to
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def booted(self, request, context):
        """
        agent sends this command to signalize its operational
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renew(self, request, context):
        """
        this rpc renews the client certificate and sends its data to the client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """
        send this command to create an agent

        fails with invalid_arguemnt if argument missing or incorrect
        fails with already exists if name already exists
        fails with not found if image is not found or image is invalid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """
        send this command to update an agent

        fails with invalid_arguemnt if argument missing or incorrect
        fails with not found if agent or image is not found or image is invalid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """
        send this command to destroy an agent

        fails with invalid_arguemnt if argument missing or incorrect
        fails with not found if agent or image is not found or image is invalid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sleep(self, request, context):
        """
        agent sends this command to shut himself down (service is scaled to 0)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upgrade(self, request, context):
        """
        agent sends this command to update himself (update is forced on service)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def topology(self, request, context):
        """TODO
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wake(self, request, context):
        """
        agent sends this command to start another agent (service is scaled to 1)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrameworkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'agents': grpc.unary_stream_rpc_method_handler(
                    servicer.agents,
                    request_deserializer=framework__pb2.AgentRequest.FromString,
                    response_serializer=framework__pb2.AgentData.SerializeToString,
            ),
            'booted': grpc.unary_unary_rpc_method_handler(
                    servicer.booted,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'renew': grpc.unary_unary_rpc_method_handler(
                    servicer.renew,
                    request_deserializer=framework__pb2.RenewRequest.FromString,
                    response_serializer=framework__pb2.RenewResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=framework__pb2.AgentData.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=framework__pb2.AgentData.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'sleep': grpc.unary_unary_rpc_method_handler(
                    servicer.sleep,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'upgrade': grpc.unary_unary_rpc_method_handler(
                    servicer.upgrade,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'topology': grpc.unary_unary_rpc_method_handler(
                    servicer.topology,
                    request_deserializer=framework__pb2.Node.FromString,
                    response_serializer=framework__pb2.Node.SerializeToString,
            ),
            'wake': grpc.unary_unary_rpc_method_handler(
                    servicer.wake,
                    request_deserializer=framework__pb2.AgentData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iams.servicer.Framework', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Framework(object):
    """
    """

    @staticmethod
    def agents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iams.servicer.Framework/agents',
            framework__pb2.AgentRequest.SerializeToString,
            framework__pb2.AgentData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def booted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/booted',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def renew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/renew',
            framework__pb2.RenewRequest.SerializeToString,
            framework__pb2.RenewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/create',
            framework__pb2.AgentData.SerializeToString,
            framework__pb2.AgentData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/update',
            framework__pb2.AgentData.SerializeToString,
            framework__pb2.AgentData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/destroy',
            framework__pb2.AgentData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sleep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/sleep',
            framework__pb2.AgentData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upgrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/upgrade',
            framework__pb2.AgentData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def topology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/topology',
            framework__pb2.Node.SerializeToString,
            framework__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iams.servicer.Framework/wake',
            framework__pb2.AgentData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
